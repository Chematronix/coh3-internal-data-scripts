-----------------------------------------------------------------------
-- Ticket loss on squad death
--
-- (c) Relic Entertainment 2020
--
-- Reduces a team's tickets when any of its squads are killed.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
-- Script framework
-----------------------------------------------------------------------

Core_RegisterModule("SquadLoss")


-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Called by OnInit() in core.scar.
-- Initializes data used by this system.
-- Use SquadLoss_SetParameters() to change default values/behavior.
function SquadLoss_OnInit()
	_squadloss = {
		ticket_cost = 30,			-- resource value of one ticket
		attrition_factor = 1.0,		-- factor applied to ticket cost (for ease of tuning)
		fuel_factor = 1.6,			-- factor applied to fuel cost to determine entity value
		upgrade_factor = 1.0,		-- factor applied to upgrade costs to determine entity value
		team_size_factor = 0.4,		-- factor used to adjust cost based on team size (set to 0 to disable scaling based on team size)
		veterancy_rank_bonus = 0.3,	-- bonus for each veterancy rank
		include_buildings = true,	-- whether to include emplacements (these are also squads)
		show_ticket_loss = true,	-- whether to show kicker indicating tickets lost
		squad_rank = {},			-- squad ranks indexed by squad ID (workaround for Squad_GetVeterancyRank() not working on dead squads)
		upgrade_cost = {},			-- total upgrade costs indexed by squad ID (workaround for Squad_GetActiveUpgrades() not working on dead squads)
	}
end


-- Called via Core_CallDelegateFunctions("OnMaxTicketsChanged") to set max ticket count.
function SquadLoss_OnMaxTicketsChanged(max_tickets, player)
	if not _squadloss.teams then 
		_squadloss.teams = {}
		for i = 1, World_GetPlayerCount() do
			local team = SquadLoss_GetTeam(World_GetPlayerAt(i))
			if team then
				table.insert(team.players, i)
			else
				table.insert(_squadloss.teams, { players = {i} })
			end
		end
	end

	if player then
		local team = SquadLoss_GetTeam(player)
		team.max_tickets = max_tickets
	else
		for _, team in pairs(_squadloss.teams) do
			team.max_tickets = max_tickets
		end
	end
	_squadloss.max_tickets_set = true
end


-- Called by core.scar after opening cinematics and events are complete.
function SquadLoss_Start()
	if _squadloss.max_tickets_set then
		for _, team in pairs(_squadloss.teams) do
			-- Set initial ticket count if it hasn't already been done
			if not team.tickets then
				Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), team.max_tickets, team.tickets, true)
			end
		end

		if _squadloss.upgrade_factor > 0 and not Rule_Exists(SquadLoss_OnUpgradeComplete) then
			Rule_AddGlobalEvent(SquadLoss_OnUpgradeComplete, GE_UpgradeComplete)
		end
		if _squadloss.veterancy_rank_bonus > 0 and not Rule_Exists(SquadLoss_OnSquadRankChanged) then
			Rule_AddGlobalEvent(SquadLoss_OnSquadRankChanged, GE_SquadVeterancyRank)
		end
		Rule_AddGlobalEvent(SquadLoss_OnSquadKilled, GE_SquadKilled)
	else
		Core_UnregisterModule("SquadLoss")
	end
end


-- Called by core.scar when a save game is loaded.
-- Restores the ticket UI to the proper ticket count.
function SquadLoss_OnGameRestore()
	for _, team in pairs(_squadloss.teams) do
		if team.tickets ~= nil then
			Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), team.tickets)
		end
	end
end


-- Called via Core_CallDelegateFunctions("OnTicketsChanged") signalling the ticket count for a team has changed.
function SquadLoss_OnTicketsChanged(player, tickets, previous_tickets, silent)
	-- Save the new ticket count
	local team = SquadLoss_GetTeam(player)
	team.tickets = math.min(math.max(0, tickets), team.max_tickets)
end


-- Global event callback for GE_UpgradeComplete.
-- Caches squad upgrade cost since Squad_GetActiveUpgrades() can't be used on dead squads
function SquadLoss_OnUpgradeComplete(context)
	if scartype(context.executer) == ST_SQUAD and not World_OwnsSquad(context.executer) then
		local squad_id = Squad_GetID(context.executer)
		local cost = Player_GetUpgradeBPCost(Squad_GetPlayerOwner(context.executer), context.upgrade)
		local upgrade_cost = (cost.manpower or 0) + (cost.munition or 0) + (cost.fuel or 0)
		_squadloss.upgrade_cost[squad_id] = (_squadloss.upgrade_cost[squad_id] or 0) + upgrade_cost
	end
end

-- Global event callback for GE_SquadVeterancyRank.
-- Caches squad veterancy since Squad_GetVeterancyRank() can't be used on dead squads
function SquadLoss_OnSquadRankChanged(context)
	_squadloss.squad_rank[Squad_GetID(context.squad)] = Squad_GetVeterancyRank(context.squad)
end


-- Global event callback for GE_SquadKilled.
-- Reduces ticket count for the team that owns the squad that was killed.
-- Ticket loss is proportional to squad cost (including upgrade costs) with additional bonuses for squad veterancy.
-- Ticket loss is scaled by team size, so adjust ticket_cost via SquadLoss_SetParameters() if this is not desired.
function SquadLoss_OnSquadKilled(context, data)
	if not World_OwnsSquad(context.victim) then
		local sbp = Squad_GetBlueprint(context.victim)
		if not _squadloss.include_buildings and Squad_IsSBPOfType(sbp, "building") then
			return
		end
		local owner = Squad_GetPlayerOwner(context.victim)
		local team = SquadLoss_GetTeam(owner)
		local cost = Player_GetSquadBPCost(owner, sbp)
		local squad_value = (cost.manpower or 0) + (cost.munition or 0) + (cost.fuel or 0) * _squadloss.fuel_factor
		if squad_value > 0 then
			local squad_id = Squad_GetID(context.victim)
			-- Can't use Squad_GetActiveUpgrades() on a dead squad so look up it's last cached upgrade costs
			squad_value = squad_value + (_squadloss.upgrade_cost[squad_id] or 0) * _squadloss.upgrade_factor
			_squadloss.upgrade_cost[squad_id] = nil
			
			-- Can't use Squad_GetVeterancyRank() on a dead squad so look up it's last cached vet rank
			local rank = _squadloss.squad_rank[squad_id] or 0
			squad_value = squad_value + (squad_value * _squadloss.veterancy_rank_bonus * rank)
			 _squadloss.squad_rank[squad_id] = nil
			
			
			-- Scale entity value based on killer's team size (logarithmic so keep within 0.0 and 0.6)
			-- e.g. when team_size_factor = 0.55 the squad value is 1.00/0.62/0.40/0.24 for team of 1/2/3/4
			--		when team_size_factor = 0.50 the squad value is 1.00/0.65/0.45/0.30 for team of 1/2/3/4
			--		when team_size_factor = 0.40 the squad value is 1.00/0.72/0.56/0.45 for team of 1/2/3/4
			--		when team_size_factor = 0.30 the squad value is 1.00/0.79/0.67/0.58 for team of 1/2/3/4
			--		when team_size_factor = 0.00 the squad value is 1.00 for 1/2/3/4 players
			if _squadloss.team_size_factor then
				local enemy_team = SquadLoss_GetTeam(owner, R_ENEMY)
				squad_value = squad_value - (squad_value * _squadloss.team_size_factor * math.log(#enemy_team.players))
			end

			-- Convert squad value to tickets
			local ticket_loss = squad_value / _squadloss.ticket_cost * _squadloss.attrition_factor

			--print(string.format("killed %s (rank %d) -%0.2f -> -%d tickets", 
				--BP_GetName(Squad_GetBlueprint(context.victim)), 
				--rank, 
				--ticket_loss, 
				--math.max(1, math.round(ticket_loss))))
			
			ticket_loss = math.max(1, math.round(ticket_loss))
			if _squadloss.show_ticket_loss then
				local msg = Loc_FormatText("$11232072", -ticket_loss)
				if ticket_loss == 1 then
					msg = Loc_FormatText("$11232071", -ticket_loss)
				end
				UI_CreatePositionKickerMessage(Game_GetLocalPlayer(), Util_GetPosition(context.victim), msg)
			end
			local tickets_remaining = math.max(0, team.tickets - ticket_loss)
			Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), tickets_remaining, team.tickets)
		end
	end
end



-- Called when a win condition has been met signalling that the match is ready to end.
-- Clean up UI and rules associated with this script module.
function SquadLoss_OnWinConditionTriggered(match_result)
	Rule_RemoveGlobalEvent(SquadLoss_OnSquadKilled)
	Rule_RemoveGlobalEvent(SquadLoss_OnUpgradeComplete)
	Rule_RemoveGlobalEvent(SquadLoss_OnSquadRankChanged)
end



-----------------------------------------------------------------------
-- Internal/private functions
-----------------------------------------------------------------------

-- Returns the given value rounded to the nearest integer.
-- Note: 0.5 is rounded up to 1 and -0.5 is rounded down to -1
function math.round(v)
	if v >= 0 then
		return math.floor(v + 0.5)
	end
	return math.ceil(v - 0.5)
end


-- Returns the value clamped to a given minimum and maximum.
function math.clamp(v, min, max)
	return math.max(min, math.min(params.team_size_factor, max))
end


-- Returns a table of data associated with the team for a given player.
function SquadLoss_GetTeam(player, relation)
	local relation = relation or R_ALLY
	local player_index = World_GetPlayerIndex(player)
	for _, team in pairs(_squadloss.teams) do
		for _, index in pairs(team.players) do
			if index == player_index or Player_ObserveRelationship(player, World_GetPlayerAt(index)) == relation then
				return team
			end
		end
	end
end


-----------------------------------------------------------------------
-- Public interface
-----------------------------------------------------------------------

-- Returns a table containing the settings parameters and their values.
function SquadLoss_GetParameters()
	return {
		ticket_cost = _squadloss.ticket_cost,
		attrition_factor = _squadloss.attrition_factor,
		fuel_factor = _squadloss.fuel_factor,
		upgrade_factor = _squadloss.upgrade_factor,
		team_size_factor = _squadloss.team_size_factor,
		veterancy_rank_bonus = _squadloss.veterancy_rank_bonus,
		show_ticket_loss = _squadloss.show_ticket_loss,
		include_buildings = _squadloss.include_buildings,
	}
end


-- Overrides the default behavior values.
function SquadLoss_SetParameters(params)
	if scartype(params) == ST_TABLE then
		if scartype(params.ticket_cost) == ST_NUMBER then
			_squadloss.ticket_cost = params.ticket_cost
		end
		if scartype(params.attrition_factor) == ST_NUMBER then
			_squadloss.attrition_factor = math.max(0.1, params.attrition_factor)
		end
		if scartype(params.fuel_factor) == ST_NUMBER then
			_squadloss.fuel_factor = params.fuel_factor
		end
		if scartype(params.team_size_factor) == ST_NUMBER then
			_squadloss.team_size_factor = math.clamp(params.team_size_factor, 0.0, 0.65)
		end
		if scartype(params.veterancy_rank_bonus) == ST_NUMBER then
			_squadloss.veterancy_rank_bonus = params.veterancy_rank_bonus
			if _squadloss.veterancy_rank_bonus > 0 and not Rule_Exists(SquadLoss_OnSquadRankChanged) then
				Rule_AddGlobalEvent(SquadLoss_OnSquadRankChanged, GE_SquadVeterancyRank)
			end
		end
		if scartype(params.upgrade_factor) == ST_NUMBER then
			_squadloss.upgrade_factor = params.upgrade_factor
			if _squadloss.upgrade_factor > 0 and not Rule_Exists(SquadLoss_OnUpgradeComplete) then
				Rule_AddGlobalEvent(SquadLoss_OnUpgradeComplete, GE_UpgradeComplete)
			end
		end
		if scartype(params.show_ticket_loss) == ST_BOOLEAN then
			_squadloss.show_ticket_loss = params.show_ticket_loss
		end
		if scartype(params.include_buildings) == ST_BOOLEAN then
			_squadloss.include_buildings = params.include_buildings
		end
	end
end
