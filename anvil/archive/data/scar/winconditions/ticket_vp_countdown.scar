-----------------------------------------------------------------------
-- Ticket countdown system
--
-- (c) Relic Entertainment 2020
--
-- Decrements opposing team's tickets based on number of victory points owned.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
-- Script framework 
-----------------------------------------------------------------------

Core_RegisterModule("VPCountdown")


-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Called by OnInit() in core.scar.
function VPCountdown_OnInit()
	_vp_countdown = {
		ticket_update_interval = 3.0,			-- interval (in seconds) that ticket counts are changed (from ticket_vp.scar)
		is_paused = false,				-- controls whether the ticket drip is enabled/disabled
		eg_vps = EGroup_CreateUnique(),	-- egroup containing all the victory points
	}
end


-- Called by core.scar after all OnInit() callbacks are finished.
-- Verifies that at least one victory point exists.
function VPCountdown_PostInit()
	local eg = EGroup_CreateUnique()
	World_GetStrategyPoints(eg, true)
	EGroup_ForEach(eg, function(egroup, index, entity)
			if Entity_IsSpawned(entity) and Entity_IsVictoryPoint(entity) then
				EGroup_Add(_vp_countdown.eg_vps, entity)
			end
		end)
	EGroup_Destroy(eg)
	if EGroup_Count(_vp_countdown.eg_vps) == 0 then
		Core_UnregisterModule("VPCountdown")
	end
end


-- Called via Core_CallDelegateFunctions("OnMaxTicketsChanged") to set max ticket count.
function VPCountdown_OnMaxTicketsChanged(max_tickets, player)
	if not max_tickets or max_tickets <= 0 then
		Core_UnregisterModule("VPCountdown")
		return
	end

	-- Track ticket count for each team so that it can be changed by VPCountdown_Update()
	if not _vp_countdown.teams then 
		_vp_countdown.teams = {}
		for i = 1, World_GetPlayerCount() do
			local team = VPCountdown_GetTeam(World_GetPlayerAt(i))
			if team then
				table.insert(team.players, i)
			else
				table.insert(_vp_countdown.teams, { players = {i}, tickets_to_drip = 0 })
			end
		end
	end

	if player then
		local team = VPCountdown_GetTeam(player)
		team.max_tickets = max_tickets
	else
		for _, team in pairs(_vp_countdown.teams) do
			team.max_tickets = max_tickets
		end
	end
	_vp_countdown.max_tickets_set = true
end


-- Called by core.scar after opening cinematics and events are complete.
function VPCountdown_Start()
	if _vp_countdown.max_tickets_set and #_vp_countdown.teams > 1 then
		-- Set initial ticket count if not already done elsewhere.
		for _, team in pairs(_vp_countdown.teams) do
			if not team.tickets then
				Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), team.max_tickets)
			end
		end
		Rule_AddInterval(VPCountdown_UpdateTickets, _vp_countdown.ticket_update_interval)
	else
		Core_UnregisterModule("VPCountdown")
	end
end


-- Called via Core_CallDelegateFunctions("OnTicketsChanged") signalling the ticket count for a team has changed.
function VPCountdown_OnTicketsChanged(player, tickets, previous_tickets, silent)
	-- Save the new ticket count
	local team = VPCountdown_GetTeam(player)
	team.tickets = math.min(math.max(0, tickets), team.max_tickets)
end


-- Called when a win condition has been met signalling that the match is ready to end.
-- Clean up UI and rules associated with this script module.
function VPCountdown_OnWinConditionTriggered(match_result)
	if Rule_Exists(VPCountdown_UpdateTickets) then 
		Rule_Remove(VPCountdown_UpdateTickets)
	end
end


-----------------------------------------------------------------------
-- Internal/private functions
-----------------------------------------------------------------------

function VPCountdown_GetTeam(player)
	local player_index = World_GetPlayerIndex(player)
	for _, team in pairs(_vp_countdown.teams) do
		for _, index in pairs(team.players) do
			if index == player_index or Player_ObserveRelationship(player, World_GetPlayerAt(index)) == R_ALLY then
				return team
			end
		end
	end
end


-----------------------------------------------------------------------
-- Rules
-----------------------------------------------------------------------

-- Rule that decrements each team's tickets by the number of enemy-controlled victory points.
function VPCountdown_UpdateTickets(context, data)
	if not _vp_countdown.is_paused then
		local total_vps = EGroup_CountSpawned(_vp_countdown.eg_vps)
		local neutral_vps = total_vps
		for _, team in pairs(_vp_countdown.teams) do
			team.vps = Player_GetNumVictoryPoints(World_GetPlayerAt(team.players[1]))
			neutral_vps = neutral_vps - team.vps
		end
		for _, team in pairs(_vp_countdown.teams) do
			if team.tickets > 0 then
				local new_ticket_count = math.max(0, team.tickets - (total_vps - neutral_vps - team.vps))
				if new_ticket_count ~= team.tickets then
					Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), new_ticket_count, team.tickets)
				end
			end
		end
	end
end


-----------------------------------------------------------------------
-- Public interface
-----------------------------------------------------------------------

-- Starts/pauses/resumes ticket drip.
function VPCountdown_Pause(pause)
	_vp_countdown.is_paused = pause
end


-- Returns a table containing the settings parameters and their values.
function VPCountdown_GetParameters()
	return {ticket_update_interval = _vp_countdown.ticket_update_interval }
end


-- Overrides the default behavior values.
function VPCountdown_SetParameters(params)
	if scartype(params) == ST_TABLE then
		if scartype(params.ticket_update_interval) == ST_NUMBER and _vp_countdown.ticket_update_interval ~= params.ticket_update_interval then
			_vp_countdown.ticket_update_interval = params.ticket_update_interval
			if Rule_Exists(VPCountdown_UpdateTickets) then
				Rule_Remove(VPCountdown_UpdateTickets)
				Rule_AddInterval(VPCountdown_UpdateTickets, _vp_countdown.ticket_update_interval)
			end
		end
	end
end
