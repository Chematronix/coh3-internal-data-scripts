-----------------------------------------------------------------------
-- Ticket 'recovery' system
--
-- (c) Relic Entertainment 2020
--
-- Continuously regenerates tickets if a team has not suffered any damage/losses in a while.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
-- Script framework 
-----------------------------------------------------------------------

Core_RegisterModule("TicketRecovery")


-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Called by OnInit() in core.scar.
function TicketRecovery_OnInit()
	_ticket_recovery = {
		update_interval = 3,		-- interval (in seconds) that ticket counts are changed (from ticket_vp.scar)
		ticket_recovery_rate = 15,	-- number of tickets recovered per minute
		grace_period = 10,			-- time after which tickets will regenerate if team suffers no damage/losses
		reset_by_damage = true,		-- grace period reset if team suffers damage (if true) or entity loss (if false)
		is_paused = false,			-- controls whether the ticket regneration is enabled/disabled
	}
end


-- Called by core.scar after all OnInit() callbacks are finished.
-- Verifies that at least one victory point exists.
function TicketRecovery_PostInit()
end


-- Called via Core_CallDelegateFunctions("OnMaxTicketsChanged") to set max ticket count.
function TicketRecovery_OnMaxTicketsChanged(max_tickets, player)
	if not max_tickets or max_tickets <= 0 then
		Core_UnregisterModule("TicketRecovery")
		return
	end

	-- Track ticket count for each team so that it can be changed by TicketRecovery_Update()
	if not _ticket_recovery.teams then 
		_ticket_recovery.teams = {}
		for i = 1, World_GetPlayerCount() do
			local team = TicketRecovery_GetTeam(World_GetPlayerAt(i))
			if team then
				table.insert(team.players, i)
			else
				table.insert(_ticket_recovery.teams, { players = {i}, tickets_to_recover = 0 })
			end
		end
	end

	if player then
		local team = TicketRecovery_GetTeam(player)
		team.max_tickets = max_tickets
	else
		for _, team in pairs(_ticket_recovery.teams) do
			team.max_tickets = max_tickets
		end
	end
	_ticket_recovery.max_tickets_set = true
end


-- Called by core.scar after opening cinematics and events are complete.
function TicketRecovery_Start()
	if _ticket_recovery.max_tickets_set then 
		-- Set initial ticket count if not already done elsewhere.
		for _, team in pairs(_ticket_recovery.teams) do
			if not team.tickets then
				Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), team.max_tickets)
			end
		end
		Rule_AddInterval(TicketRecovery_Update, 1)
		Rule_AddInterval(TicketRecovery_UpdateTickets, _ticket_recovery.update_interval)
		if _ticket_recovery.reset_by_damage then
			Rule_AddGlobalEvent(TicketRecovery_OnDamageReceived, GE_DamageReceived)
		else
			Rule_AddGlobalEvent(TicketRecovery_OnEntityKilled, GE_EntityKilled)
		end
	else
		Core_UnregisterModule("TicketRecovery")
	end
end


-- Called via Core_CallDelegateFunctions("OnTicketsChanged") signalling the ticket count for a team has changed.
function TicketRecovery_OnTicketsChanged(player, tickets, previous_tickets, silent)
	-- Save the new ticket count
	local team = TicketRecovery_GetTeam(player)
	team.tickets = math.min(math.max(0, tickets), team.max_tickets)
end


-- Called when a win condition has been met signalling that the match is ready to end.
-- Clean up UI and rules associated with this script module.
function TicketRecovery_OnWinConditionTriggered(match_result)
	if Rule_Exists(TicketRecovery_Update) then
		Rule_Remove(TicketRecovery_Update)
	end
	if Rule_Exists(TicketRecovery_UpdateTickets) then
		Rule_Remove(TicketRecovery_UpdateTickets)
	end
	if Rule_Exists(TicketRecovery_OnDamageReceived) then
		Rule_RemoveGlobalEvent(TicketRecovery_OnDamageReceived)
	end
	if Rule_Exists(TicketRecovery_OnEntityKilled) then
		Rule_RemoveGlobalEvent(TicketRecovery_OnEntityKilled)
	end
end


-- Global event callback for GE_EntityKilled.
-- Tracks the last time a team lost an entity.
function TicketRecovery_OnEntityKilled(context, data)
	if not _ticket_recovery.reset_by_damage
		or not context.victimOwner 
		or Entity_IsOfType(context.victim, "mine") 
		or Entity_IsCasualty(context.victim) then
		return
	end
	local team = TicketRecovery_GetTeam(context.victimOwner)
	team.last_event = World_GetGameTime()
end


-- Global event callback for GE_DamageReceived
-- Tracks the last time a team was damaged.
function TicketRecovery_OnDamageReceived(context, data)
	if _ticket_recovery.reset_by_damage and context.damage > 0 and not World_OwnsEntity(context.victim) then
		local team = TicketRecovery_GetTeam(Entity_GetPlayerOwner(context.victim))
		team.last_event = World_GetGameTime()
	end
end


-----------------------------------------------------------------------
-- Internal/private functions
-----------------------------------------------------------------------

function TicketRecovery_GetTeam(player)
	local player_index = World_GetPlayerIndex(player)
	for _, team in pairs(_ticket_recovery.teams) do
		for _, index in pairs(team.players) do
			if index == player_index or Player_ObserveRelationship(player, World_GetPlayerAt(index)) == R_ALLY then
				return team
			end
		end
	end
end


-----------------------------------------------------------------------
-- Rules
-----------------------------------------------------------------------

-- Rule that recovers tickets for teams that haven't suffered damage/losses in a while.
-- Runs every second.
function TicketRecovery_Update(context, data)
	if not _ticket_recovery.is_paused then
		for _, team in pairs(_ticket_recovery.teams) do
			if team.last_event and (World_GetGameTime() - team.last_event) < _ticket_recovery.grace_period then
				team.tickets_to_recover = 0
			elseif team.tickets < team.max_tickets then
				team.tickets_to_recover = team.tickets_to_recover + _ticket_recovery.ticket_recovery_rate / 60
			end
		end
	end
end


-- Rule that periodically adds each team's accumulated recovered tickets to their ticket count.
function TicketRecovery_UpdateTickets(context, data)
	if not _ticket_recovery.is_paused then
		for _, team in pairs(_ticket_recovery.teams) do
			if team.tickets < team.max_tickets and math.floor(team.tickets_to_recover) >= 1 then
				local new_ticket_count = math.min(team.max_tickets, team.tickets + math.floor(team.tickets_to_recover))
				team.tickets_to_recover = team.tickets_to_recover - math.floor(team.tickets_to_recover)
				Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), new_ticket_count, team.tickets)
			end
		end
	end
end


-----------------------------------------------------------------------
-- Public interface
-----------------------------------------------------------------------

-- Starts/pauses/resumes ticket drip.
function TicketRecovery_Pause(pause)
	_ticket_recovery.is_paused = pause
end


-- Returns a table containing the settings parameters and their values.
function TicketRecovery_GetParameters()
	local params = Table_Copy(_ticket_recovery)
	-- Remove data that can't/shouldn't be changed
	params.is_paused = nil
	return params
end


-- Sets the rate at which tickets are lost (tickets per minute) and how frequently the ticket count is updated.
function TicketRecovery_SetParameters(params)
	if scartype(params) == ST_TABLE then
		if scartype(params.ticket_recovery_rate) == ST_NUMBER then
			_ticket_recovery.ticket_recovery_rate = params.ticket_recovery_rate
		end
		if scartype(params.grace_period) == ST_NUMBER then
			_ticket_recovery.grace_period = params.grace_period
		end
		if scartype(params.reset_by_damage) == ST_BOOLEAN then
			_ticket_recovery.reset_by_damage = params.reset_by_damage
		end
		if scartype(params.ticket_update_interval) == ST_NUMBER and _ticket_recovery.update_interval ~= params.ticket_update_interval then
			_ticket_recovery.update_interval = params.ticket_update_interval
			if Rule_Exists(TicketRecovery_UpdateTickets) then
				Rule_Remove(TicketRecovery_UpdateTickets)
				Rule_AddInterval(TicketRecovery_UpdateTickets, _ticket_recovery.update_interval)
			end
		end
		if scartype(params.ticket_recovery_rate) == ST_NUMBER and params.ticket_recovery_rate > 0 then
			_ticket_recovery.update_interval = params.ticket_update_interval
			if Rule_Exists(TicketRecovery_UpdateTickets) then
				Rule_Remove(TicketRecovery_UpdateTickets)
				Rule_AddInterval(TicketRecovery_UpdateTickets, _ticket_recovery.update_interval)
			end
		end

		if _ticket_recovery.ticket_recovery_rate > 0 then
			if _ticket_recovery.reset_by_damage and Rule_Exists(TicketRecovery_OnEntityKilled) then
				Rule_RemoveGlobalEvent(TicketRecovery_OnEntityKilled)
				Rule_AddGlobalEvent(TicketRecovery_OnDamageReceived, GE_DamageReceived)
			elseif not _ticket_recovery.reset_by_damage and Rule_Exists(TicketRecovery_OnDamageReceived) then
				Rule_RemoveGlobalEvent(TicketRecovery_OnDamageReceived)
				Rule_AddGlobalEvent(TicketRecovery_OnEntityKilled, GE_EntityKilled)
			end
		else
			if Rule_Exists(TicketRecovery_OnDamageReceived) then
				Rule_RemoveGlobalEvent(TicketRecovery_OnDamageReceived)
			end
			if Rule_Exists(TicketRecovery_OnEntityKilled) then
				Rule_RemoveGlobalEvent(TicketRecovery_OnEntityKilled)
			end
		end
	end
end
