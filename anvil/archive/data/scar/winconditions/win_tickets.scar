-----------------------------------------------------------------------
-- Win condition based on ticket loss
--
-- (c) Relic Entertainment 2020
--
-- The win condition is triggered when a team's ticket count reaches 0.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
-- Script framework 
-----------------------------------------------------------------------

Core_RegisterModule("Tickets")


-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Called by OnInit() in core.scar.
function Tickets_OnInit()
	_tickets = {}
end


-- Called via Core_CallDelegateFunctions("OnMaxTicketsChanged") to set max ticket count.
function Tickets_OnMaxTicketsChanged(max_tickets, player)
	if not max_tickets or max_tickets <= 0 then
		Core_UnregisterModule("Tickets")
		return
	end

	if not _tickets.teams then 
		_tickets.teams = {}
		for i = 1, World_GetPlayerCount() do
			local team = Tickets_GetTeam(World_GetPlayerAt(i))
			if team then
				table.insert(team.players, i)
			else
				table.insert(_tickets.teams, { players = {i} })
			end
		end
	end

	if player then
		local team = Tickets_GetTeam(player)
		team.max_tickets = max_tickets
	else
		for _, team in pairs(_tickets.teams) do
			team.max_tickets = max_tickets
		end
	end
	_tickets.max_tickets_set = true
end


-- Called by core.scar after opening cinematics and events are complete.
function Tickets_Start()
	if _tickets and _tickets.max_tickets_set then
		-- Set initial ticket count if not already done elsewhere.
		for _, team in pairs(_tickets.teams) do
			if not team.tickets then
				Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), team.max_tickets)
			end
		end
	else
		_tickets = nil
		Core_UnregisterModule("Tickets")
	end
end


-- Called by core.scar when a game is loaded. 
-- Restores the ticket UI to the proper ticket count.
function Tickets_OnGameRestore()
	for _, team in pairs(_tickets.teams) do
		if team.tickets ~= nil then
			Core_CallDelegateFunctions("OnTicketsChanged", World_GetPlayerAt(team.players[1]), team.tickets)
		end
	end
end


-- Called via Core_CallDelegateFunctions("OnTicketsChanged") signalling the ticket count for a team has changed.
function Tickets_OnTicketsChanged(player, tickets, previous_tickets, silent)

	-- Save the new ticket count
	local team = Tickets_GetTeam(player)
	team.tickets = math.min(math.max(0, tickets), team.max_tickets)

	-- Ensure all clients have the same value
	Misc_SyncCheckVariable("Player_".. World_GetPlayerIndex(player).."_Tickets", team.tickets)

	-- TODO: Support >2 teams by eliminating teams when they reach 0 tickets and ending match when only one team remains.

	if team.tickets <= 0 then
		local match_result = {
			winners = {}, 		-- table of player indices for the winning players
			losers = {},		-- table of player indices for the losing players
			win_reason = WR_VICTORY_POINT,	-- the win condition that was triggered
		}
		for i = 1, World_GetPlayerCount() do
			if Player_ObserveRelationship(player, World_GetPlayerAt(i)) == R_ALLY then
				table.insert(match_result.losers, i)
			else				
				table.insert(match_result.winners, i)
			end
		end
		Core_CallDelegateFunctions("OnWinConditionTriggered", match_result)
	end
end


-----------------------------------------------------------------------
-- Public interface
-----------------------------------------------------------------------

-- Returns the current ticket count for a given player or player index.
-- Use this only in cases where the caller does not maintain their own ticket count.
function Tickets_GetCurrentTicketCount(player)
	local player_index = player
	if scartype(player) == ST_PLAYER then
		player_index = World_GetPlayerIndex(player)
	end
	for _, team in pairs(_tickets.teams) do
		for _, index in pairs(team.players) do
			if index == player_index or Player_ObserveRelationship(player, World_GetPlayerAt(index)) == R_ALLY then
				return team.tickets
			end
		end
	end
end

-----------------------------------------------------------------------
-- Internal/private functions
-----------------------------------------------------------------------

function Tickets_GetTeam(player)
	local player_index = World_GetPlayerIndex(player)
	for _, team in pairs(_tickets.teams) do
		for _, index in pairs(team.players) do
			if index == player_index or Player_ObserveRelationship(player, World_GetPlayerAt(index)) == R_ALLY then
				return team
			end
		end
	end
end





