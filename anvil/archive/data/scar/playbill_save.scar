import("playbills.scar")

function GetDynamicMarkerSaveTable(marker)
	return {
		name = Marker_GetName(marker),
		dir = Marker_GetDirection(marker),
		pos = Marker_GetPosition(marker),
		prox = Marker_GetProximityRadiusOrDefault(marker, -1),
		dim = Marker_GetProximityDimensionsOrDefault(marker, -1, -1),
	}
end

function RestoreDynamicMarker(markerSaveTable)
	-- Restore the marker from save data if it hasn't already been created
	if Marker_Exists(markerSaveTable.name, "") then
		return Marker_FromName(markerSaveTable.name, "")
	end
	
	local marker = Marker_Create(
		markerSaveTable.name,
		"Prefab",
		markerSaveTable.pos,
		markerSaveTable.dir)
	
	if markerSaveTable.prox >= 0 then
		Marker_SetProximityCircle(marker, markerSaveTable.prox)
	elseif markerSaveTable.dim.x >= 0 then
		Marker_SetProximityRectangle(marker, dim.x, dim.z)
	end
	
	return marker
end

function PartialSave_SavePlaybillContext(context)
	
	if context ~= nil then
		
		local context_type = context.context_type
		local context_data = context.context_data
		
		if context_type == "LOCATION_MARKER" then
			-- Since the partial save doesn't save dynamic markers, we save out marker data explicitly here
			-- instead of a reference to it. On load we may create the marker, unless it has already
			-- been created by something else. In the current flow it is expected that prefabdata reload
			-- will always recreate the marker. If the prefabata changes the name, then we will default to
			-- the old position/proximity that we save out anyway.
			context_data = GetDynamicMarkerSaveTable(context_data.position)
		end
		
		return {
			context_type = context_type,
			context_data = context_data,
			firstTurn = context.firstTurn,
		}
	end
end

function PartialSave_RestorePlaybillContextSave(contextSave)
	if contextSave ~= nil then
		if contextSave.context_type == "LOCATION_MARKER" then
			-- Marker context types must be fixed up by finding the marker by name, or
			-- creating it again from the saved info in the case of a name change.
			contextSave.context_data = {
				position = RestoreDynamicMarker(contextSave.context_data)
			}
		end
	end
	
	return contextSave
end

function PartialSave_SavePlaybills(saveTable)
	local playbillSaveTable = {
		version = 1,
		i_lastUsedPlaybillID = i_lastUsedPlaybillID or 1,
		playbills = {},
	}
	
	local allRunningPlaybills = t_allRunningPlaybills
	local runningPlaybillCount = allRunningPlaybills and #allRunningPlaybills or 0
	for i=1, runningPlaybillCount do
		local playbillInfo = allRunningPlaybills[i]
		
		if playbillInfo.active then
			
			local contextSave = PartialSave_SavePlaybillContext(playbillInfo.context)
			
			local playbillSaveInfo = {
				instanceName = playbillInfo.instanceName,
				currentStage = playbillInfo.currentStage,
				waitingForAdvanceTo = playbillInfo.waitingForAdvanceTo,
				loop = playbillInfo.loop,
				numLoopsMade = playbillInfo.numLoopsMade,
				turnFrequencyInfo = playbillInfo.turnFrequencyInfo,
				lastUpdatedTurn = playbillInfo.lastUpdatedTurn,
				context = contextSave,
				id = playbillInfo.id,
			}
	
			playbillSaveTable.playbills[#playbillSaveTable.playbills + 1] = playbillSaveInfo
		end
	end
	
	saveTable.playbillSaveTable = playbillSaveTable
end

function RestorePlaybill(restoreInfo, playbillIDMapping)
	
	local instance = Prefab_GetInstance(restoreInfo.instanceName)
	
	if instance == nil then
		return
	end
	
	local playbillInfo = {
		playbill = instance.playbills,
		active = true,
		instanceName = restoreInfo.instanceName,
		context = PartialSave_RestorePlaybillContextSave(restoreInfo.context),
		id = restoreInfo.id, 
		currentStage = restoreInfo.currentStage,
		loop = restoreInfo.loop,
		waitingForAdvanceTo = restoreInfo.waitingForAdvanceTo,
		context_selection_info = instance.context_selection_enabled and instance.context_selection_info or nil,
		lastUpdatedTurn = restoreInfo.lastUpdatedTurn,
		turnFrequencyInfo = restoreInfo.turnFrequencyInfo,
		runningActionlists = {},
	}
	
	table.insert(t_allRunningPlaybills, playbillInfo)
	
	playbillIDMapping[restoreInfo.id] = playbillInfo
end

function PartialSave_RestorePlaybills(saveTable)
	
	local playbillSaveTable = saveTable.playbillSaveTable
	
	i_lastUsedPlaybillID = playbillSaveTable.i_lastUsedPlaybillID
	
	t_allRunningPlaybills = {}
	
	-- Map restored playbillIDs to newly created playbillInfo tables
	local playbillIDMapping = {}
	
	local playbills = playbillSaveTable.playbills
	local playbillCount = #playbills
	for i=1, playbillCount do
		local playbillRestoreInfo = playbills[i]
		RestorePlaybill(playbillRestoreInfo, playbillIDMapping)
	end
	
	if World_IsCampaignMetamapGame() and not Rule_Exists(Playbill_CheckForEndScriptedTurnPhase) then
		Rule_AddInterval(Playbill_CheckForEndScriptedTurnPhase, 1)
	end

	Rule_Add(Playbill_UpdateAllPlaybills)
	RestoreActionlistRule()
end

function RestoreActionlistRule()
	_ActionLists_Running = {}
	if Rule_Exists(ActionList_Manager) == false then
		Rule_Add(ActionList_Manager)
	end
end