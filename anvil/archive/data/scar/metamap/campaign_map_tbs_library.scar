-----------------------------------------------------------------------
-- Campaign Map Turn-Based Strategy Library
--
-- In an effort to clean up Win Conditions, this is now called from the
-- metamap/metamap_library.scar. 
-- This now behaves exactly as when it was a Win Condition.
--
-- Done by Cloe Veilleux 
--                   with the help of John Kalyan
--                                        at the behest of David Sitar.
--
-- (c) Relic Entertainment 2022
--
-----------------------------------------------------------------------
import("core.scar")
import("metamap/metamap_input_state.scar")

local _newTurnBaseResourceAmounts =
{
	[RT_Action] = 3,
	[RT_Command] = 3,
	[RT_Fuel] = 3,
	[RT_Munition] = 3,
	[RT_Manpower] = 3,
}

local base_manpower_cap = 500 -- Caps must be also be set in army blueprints: 
local base_munitions_cap = 250 -- army\americans_campaign and army\british_campaign
local base_fuel_cap = 250 

local current_turn = World_GetCurrentTurn()
local is_players_turn = true
local current_player_id = World_GetCurrentTurnPlayerID()
local is_showing_unused_squad_warning = false
local unspent_movement_event_cue_id = -1
local unused_squads_panel_data_key = "unused_squads_panel"
local show_unused_squads_panel_data_key = "unused_squads_panel.show"
g_cinematic_nonplayer_turn = not Misc_IsCommandLineOptionSet("no_cinematic_ai_turn")
g_disable_unused_squad_warning = false

local sim_rate_at_end_turn = Game_GetSimRate()
g_disable_end_turn_button_requests = 0 -- Any number greater than 0 will disable the end turn button

local is_scripted_phase = false

local TURN_END_LOC_STRING_ID = 11251676 -- Turn %1TURN% End

-- Initialization ---------------------------------------------------------------------------------
Core_RegisterModule("CampaignMapTBS")

function CampaignMapTBS_InitTurnInformation()
	current_turn = 0
	is_players_turn = false
	current_player_id = 0
	is_scripted_phase = false
end

function CampaignMapTBS_RefreshTurnInformation()
	current_turn = World_GetCurrentTurn()
	is_players_turn = World_IsPlayersTurn(Game_GetLocalPlayer())
	current_player_id = World_GetCurrentTurnPlayerID()
	is_scripted_phase = World_IsScriptedTurnPhase()
end

function CampaignMapTBS_CommonSetup()
	-- Set Campaign Speech Decision Tree
	Sound_SetSpeechTreeRoot("campaign_speech_decision_tree")

	-- Add UI Elements
	InitializeUI()
	
	Rule_Add(UpdateTurnState)
	Rule_Add(WatchLocalUnusedSquads)
	Rule_Add(UpdateEndTurnButton)
	Rule_AddInterval(ActionDirector_HandleScarData)
	SetupSupply()
	
	UI_SetModalAbilityPhaseCallback(AbilityPhaseCallback)
	Rule_AddGlobalEvent(OnOverviewMode, GE_CameraOverviewMode)
	
	-- Disable the default squad death event cues as the campaign map has custom scripted event cues.
	UI_EnableUIEventCueType(UIE_SquadKilled, false)
end

function SetupSupply()
	
	RecalculateMaxSupply()

	for i = 1, World_GetPlayerCount() do
		local player = World_GetPlayerAt(i)
		local supply_points = Player_GetEntities(player)
		local supply_point_count = EGroup_CountSpawned(supply_points)
		for i = 1, supply_point_count do
			local entity = EGroup_GetSpawnedEntityAt(supply_points, i)
			if Entity_IsOfType(entity, "campaign_supply_point") then
				Rule_AddEntityEvent(RecalculateMaxSupply, entity, GE_EntityOwnerChange)
			end
		end
	end
end

function CampaignMapTBS_OnInit()
	print("CampaignMapTBS_Init")
	CampaignMapTBS_CommonSetup()
	MetaMap_MakeCapturePointsInvulnerable()
	CampaignMapTBS_InitTurnInformation()
end

function RecalculateMaxSupply()
	for i = 1, World_GetPlayerCount() do
		
		local player = World_GetPlayerAt(i)
		local supply_points = Player_GetEntities(player)
		EGroup_Filter(supply_points, "campaign_supply_point", FILTER_KEEP)
		local supply_points_count = EGroup_CountAlive(supply_points)
		
		local max_supply = 0
		if i == 1 then
			max_supply = 30 + 5 * supply_points_count
			-- Set Resource Caps based on max supply
			local scalingValue = math.ceil(max_supply/2.5 - 2) / 10
			UpdateResourceCaps(scalingValue)
			
			-- Store the supply information in narrative variables			
			SetNarrativeVariable("pb015_supply.current_supply", max_supply)
			local supply_highpoint = GetNarrativeVariable("pb015_supply.supply_highpoint")
			if (supply_highpoint == nil or max_supply > supply_highpoint) then 
				SetNarrativeVariable("pb015_supply.supply_highpoint", max_supply)					
			end
			
		else 
			max_supply = 10 + 5 * supply_points_count
		end

		Player_SetStateModelInt(player, "campaign_max_supply", max_supply)
		
		local squads = Player_GetSquads(player)
		SGroup_ForEach(squads,
			function(sgroup, index, squad)
				local squad_id = Squad_GetID(squad)
				if Squad_HasStateModelInt(squad, "campaign_supply") then
					local supply = Squad_GetStateModelInt(squad, "campaign_supply")
					if supply > max_supply then
						Squad_SetStateModelInt(squad, "campaign_supply", max_supply)
						
						-- Statetree will adjust current move point depending on the new current supply
					end
				end
			end
		)
	end
end

function UpdateResourceCaps(scaling)
	local player = World_GetPlayerAt(1)
	if modID_manpowerCap ~= nil then Modifier_Remove(modID_manpowerCap) end
	modID_manpowerCap = Modify_PlayerResourceCap(player, RT_Manpower, scaling, MUT_Multiplication)
	if Player_GetResource(player, RT_Manpower) > base_manpower_cap * scaling then
		Player_SetResource(player, RT_Manpower, base_manpower_cap * scaling)
	end
	
	if modID_munitionsCap ~= nil then Modifier_Remove(modID_munitionsCap) end
	modID_munitionsCap = Modify_PlayerResourceCap(player, RT_Munition, scaling, MUT_Multiplication)
	if Player_GetResource(player, RT_Munition) > base_munitions_cap * scaling then
		Player_SetResource(player, RT_Munition, base_munitions_cap * scaling)
	end
	
	if modID_fuelCap ~= nil then Modifier_Remove(modID_fuelCap) end
	modID_fuelCap = Modify_PlayerResourceCap(player, RT_Fuel, scaling, MUT_Multiplication) 
	if Player_GetResource(player, RT_Fuel) > base_fuel_cap * scaling then
		Player_SetResource(player, RT_Fuel, base_fuel_cap * scaling)
	end
end
	
function CampaignMapTBS_OnGameRestore()
	
	print("CampaignMapTBS - OnGameRestore")
	
	CampaignMapTBS_RefreshTurnInformation()
	
	CampaignMapTBS_CommonSetup()
	
	-- If we need to process a mission then pause the AI until the debriefing
	-- has been closed to prevent AI from taking action in the background
	local campaign = Game_RetrieveTableData("campaign", false)
	if campaign.process_mission_result == true then
		AI_PauseAll(true)
	end
	
	if not is_players_turn then
		EnterAITurn()
	end
 end

function CampaignMapTBS_OnReloadUI()
	print("CampaignMapTBS - OnReloadUI")
	UI_Remove("TurnDisplay")
	InitializeUI()
 end

-- User Interface ---------------------------------------------------------------------------------

local UI_END_TURN_BUTTON = "TurnDisplay.EndTurnButton"
local UI_AI_TURN_INDICATOR = "TurnDisplay.AITurnIndicator"
local UI_TURN_COUNTER = "TurnDisplay.TurnCounter"

local end_turn_button_enabled = false -- Cache the end turn enabled property to avoid unnecessary updates

function InitializeUI()
	-- add the "End Turn" button and connect to our EndTurn function
	local xaml =
[[<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:hudControls="clr-namespace:WPFGUI.HUD.Controls" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:esControls="clr-namespace:WPFGUI.Shared.Controls;assembly=EngineUI"
            xmlns:esUtility="clr-namespace:WPFGUI.Shared.Utility;assembly=EngineUI"
            xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:ee="clr-namespace:WPFGUI;assembly=EngineUI"
            xmlns:wm="clr-namespace:WPFGUI.Shared.MarkupExtensions;assembly=EngineUI"
            HorizontalAlignment="Center" VerticalAlignment="Top">			
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!-- Turn Counter -->
            <Border Grid.Column="0" Background="Black" Opacity="0.9" Width="64" Height="80" VerticalAlignment="Top">
                <StackPanel Orientation="Vertical">
                    <TextBlock Style="{StaticResource BaseTextBlockStyle}" HorizontalAlignment="Center" FontSize="14"
                            Margin="0,10,0,0" Foreground="White" Text="{esUtility:LocString $11166550}" />
                    <TextBlock x:Name="TurnCounter" Style="{StaticResource BaseTextBlockStyle}"
                            HorizontalAlignment="Center" FontSize="34" Foreground="White" Text="1" />
                </StackPanel>
            </Border>

            <!-- AI's Turn Indicator -->
            <StackPanel x:Name="AITurnIndicator" Grid.Column="1" Orientation="Vertical" Visibility="Collapsed">
                <Border Background="#823B3B" Opacity="0.6" Width="300" Height="60" VerticalAlignment="Top">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <Image Source="pack://application:,,,/WPFGUI;component/icons/campaign/CM_EnemyMove_Icon.png"
                                Width="32" Height="32" />
                        <TextBlock Style="{StaticResource BaseTextBlockStyle}" FontSize="20" VerticalAlignment="Center"
                                Margin="10,0,20,0" Foreground="White" Text="{esUtility:LocString $11166552}" />
                    </StackPanel>
                </Border>
                <ContentControl Style="{StaticResource AITurnProcessAnimStyle}" Width="300" Height="12"/>
            </StackPanel>
            
			<StackPanel Orientation="Vertical" Grid.Column="1" VerticalAlignment="Top">
				<!-- End Turn Button -->
	             <Button x:Name="EndTurnButton" Grid.Column="1" Style="{StaticResource EndTurnButtonStyle}" MinWidth="300" MaxWidth="340" Height="60" VerticalAlignment="Top"
	                Visibility="Collapsed" IsEnabled="False" 
					esUtility:KeyBindingAttachedProperty.BindingName="gp_hud_next_day"
					esUtility:KeyBindingAttachedProperty.BindingCondition="{Binding Path=NavigationFocus, Source={x:Static hudModel:HUDModel.Instance}, Converter={StaticResource HUDNavigationLegalTransitionConverter}, ConverterParameter=MovePointsPanel}"
					esControls:TagAdorner.AlignmentMode="Relative"
					esControls:TagAdorner.ArrowDataTemplate="{StaticResource TagArrowDataTemplate}"
					esControls:TagAdorner.ClampMode="None"
					esControls:TagAdorner.DataTemplate="{StaticResource TagDataTemplate}"
					esControls:TagAdorner.HorizontalAnchor="Center" esControls:TagAdorner.HorizontalPlacement="Center"
					esControls:TagAdorner.TargetDataTemplate="{StaticResource EmptyTagDataTemplate}"
					esControls:TagAdorner.VerticalAnchor="Bottom" esControls:TagAdorner.VerticalPlacement="Bottom" Content="{esUtility:LocString $11166551}">
	                <esControls:TagAdorner.IsTagged>
	                    <MultiBinding Converter="{StaticResource IsTaggedConverter}" ConverterParameter="EndTurnButton">
	                        <Binding Path="TagVersion" Source="{x:Static hudModelTypes:HUDModel.Instance}" />
	                    </MultiBinding>
	                </esControls:TagAdorner.IsTagged>
	                <esControls:TagAdorner.Data>
	                    <MultiBinding Converter="{StaticResource TagDataConverter}" ConverterParameter="EndTurnButton">
	                        <Binding Path="TagVersion" Source="{x:Static hudModelTypes:HUDModel.Instance}" />
	                    </MultiBinding>
	                </esControls:TagAdorner.Data>
	            </Button>
			
				<!-- Unused Squad Button -->
	            <Button x:Name="UnusedSquadButton" Style="{StaticResource WarningButton}"
	                Visibility="Collapsed" IsEnabled="False" Content="{esUtility:LocString $11166801}" />
			</StackPanel>
			<!-- HACK: Disabling the end turn button by setting IsEnabled="False" doesn't seem to work so, put this blocker over the button instead -->
            <Rectangle Grid.Column="1" Fill="{StaticResource Gray20Brush}" Opacity="0.5" Width="300" Height="60" VerticalAlignment="Top" 
                Visibility="{Binding IsSaving, Converter={StaticResource BoolToVis}}" />
        </Grid>
    </Grid>
]]
	
	UI_AddChild("", "XamlPresenter", "TurnDisplay", { Xaml = xaml })
	UI_AddEventHandler(UI_END_TURN_BUTTON, "Click", "EndTurnButtonClicked")
	UI_AddEventHandler("TurnDisplay.UnusedSquadButton", "Click", "UnusedSquadButtonClicked")
	
	if is_players_turn then
		UI_SetPropertyValue(UI_END_TURN_BUTTON, "Visibility", "Visible")
	else
		UI_SetPropertyValue(UI_AI_TURN_INDICATOR, "Visibility", "Visible")
	end
	
	UI_SetPropertyValue(UI_TURN_COUNTER, "Text", tostring(current_turn))

end

function ClearUnusedSquadUI()
	UI_SetPropertyValue("TurnDisplay.UnusedSquadButton", "Visibility", "Collapsed")
	UI_SetPropertyValue("TurnDisplay.UnusedSquadButton", "IsEnabled", false)
	
	if unspent_movement_event_cue_id > -1 then
		UI_ClearEventCueFromID(unspent_movement_event_cue_id)
		unspent_movement_event_cue_id = -1
	end
	
	UI_ShowUnusedSquadsPanel(false)
	Game_RemoveTableData(show_unused_squads_panel_data_key)
	
	is_showing_unused_squad_warning = false
end

function WatchLocalUnusedSquads()
	if is_showing_unused_squad_warning and not World_PlayerHasUnusedSquad(Game_GetLocalPlayer(), "company") then
		ClearUnusedSquadUI()
	end
end

function EndTurnButtonClicked()
	if Metamap_IsSaving() then
		return
	end
	
	if ShouldShowUnusedSquadsPanel() then
		UI_SetPropertyValue("TurnDisplay.UnusedSquadButton", "Visibility", "Visible")
		UI_SetPropertyValue("TurnDisplay.UnusedSquadButton", "IsEnabled", true)
		
		if unspent_movement_event_cue_id == -1 then
			unspent_movement_event_cue_id = EventCues_CampaignEventCallback("cm_unspent_movement", Loc_GetString(11204475), Loc_GetString(11204476), __DoNothing, {})	
			EventCues_RegisterEndTurnEvent(unspent_movement_event_cue_id)
		end
		
		is_showing_unused_squad_warning = true
		
		if Game_IsGamepadActive() then
			UnusedSquadButtonClicked()
		end
	else
		ClearUnusedSquadUI()
		EndTurn()
	end
end

function UnusedSquadButtonClicked()
	UI_ShowUnusedSquadsPanel(true)
end

function ShouldShowUnusedSquadsPanel()
	if not World_PlayerHasUnusedSquad(Game_GetLocalPlayer(), "company") then
		return false
	end
	
	local unused_squads_panel_data = Game_RetrieveTableData(unused_squads_panel_data_key, false)
	if unused_squads_panel_data.show then
		return false
	end
	
	if Game_IsGamepadActive() then
		return true
	end
	
	if not g_disable_unused_squad_warning and not is_showing_unused_squad_warning then
		return true
	end
	
	return false
end

-- Turn Management --------------------------------------------------------------------------------
function DispenseNewTurnResources()
	for i = 1, World_GetPlayerCount() do
		
		local player = World_GetPlayerAt(i)
		
		-- for each resource type, add base resources to player
		for resourceType,resourceAmount in pairs(_newTurnBaseResourceAmounts) do
		
			Player_AddResource(player, resourceType, resourceAmount)
			print("DispenseNewTurnResources - adding base resources to Player: "..i..", ResourceType: "..resourceType..", Add Amount: "..resourceAmount..", New Amount: "..Player_GetResource(player, resourceType))
		end
		
		-- gather owned entities or whatever to calculate resource allocation???
		local additionalResources = {}
		
		-- for each resource type, add additional resources to player
		for resourceType,resourceAmount in pairs(additionalResources) do
		
			Player_AddResource(player, resourceType, resourceAmount)
			print("DispenseNewTurnResources - adding additional resources Player: "..i..", ResourceType: "..resourceType..", Add Amount: "..resourceAmount..", New Amount: "..Player_GetResource(player, resourceType))
		end
	end
end

function AdvanceAbilityCooldown()
	for i = 1, World_GetPlayerCount() do
		
		local player = World_GetPlayerAt(i)
		local sgroupID = Player_GetSquads(player)
		local egroupID = Player_GetAllEntities(player)
		
		local _EachSquad = function(gid, idx, sid)
			-- reduce ability cooldown of all squad by 1
			Squad_AdjustAbilityCooldown(sid, -1)
		end
		
		local _EachEntity = function(gid, idx, eid)
			-- reduce ability cooldown of all entity by 1
			Entity_AdjustAbilityCooldown(eid, -1)
		end
		
		SGroup_ForEach(sgroupID, _EachSquad)
		EGroup_ForEach(egroupID, _EachEntity)
		EGroup_Clear(egroupID)
		SGroup_Clear(sgroupID)
	end
end

function DoCampaignMapSaveAndEndTurn(context, data)
	-- Speed up the game when an end turn is requested
	if World_IsLastTurnActionFinished() == false then
		local sim_rate_multiplier = World_GetEndTurnSimRateMultiplier()
		Game_SetSimRate(sim_rate_at_end_turn * sim_rate_multiplier)
	end
	
	local saveStartedCallback = function()
			World_EndTurn()
	end
	local saveNotStartedCallback = function()
		-- if something goes wrong saving, we don't want the end turn button to be stuck
		RemoveDisableEndTurnRequest()
		UpdateEndTurnButton()
		metamap_save_requested = false
	end
	local save_name = GenerateAutoSaveName(TURN_END_LOC_STRING_ID)
	MetaMap_Save(saveStartedCallback, saveNotStartedCallback, save_name)
end

-- Note: Only player clicking end turn goes through this function. Normal AI end turn is handled through
-- PCMD_EndTurn. This means that if we want to do some turn logic stuff here, we need to make sure AI also calls this function when
-- they end their turn or put it at OnPlayerAdvance/OnTurnAdvance
function EndTurn()
	
	-- Do this guard so player can't end turn multiple times in quick succession by spam clicking button
	if CanEndTurn() then
		Misc_ClearSelection()
		
		-- Adding a disable request to prevent further EndTurn() calls until one is explicitly removed
		-- Once the turn actually advances, we remove a request.
		AddDisableEndTurnRequest()
		UI_UpdateEndTurnButtonEnabled(false)

		-- Speed up the game when an end turn is requested
		sim_rate_at_end_turn = Game_GetSimRate()
		
		EventCues_ClearEndTurnEvents()
		MetaMapInput_AddUILimits({IEF_Selection, IEF_Command}, {}, false, "CampaignMapTbs")
		
		-- Delay the save for 1 frame. This is needed because there might be a command queued for this frame that
		-- will begin a turn action and then a save will get queued before it takes control as the active turn
		-- agent, but by the time the save is processed a few frames later there may be an ongoing action
		-- which we don't support. This may happen if the game is paused and a command is issued and the next
		-- day button clicked before unpausing.
		Rule_AddOneShot(DoCampaignMapSaveAndEndTurn, 0)
	end
end

function EnterAITurn()
	if g_cinematic_nonplayer_turn then
		MetaMapInput_AddUILimits({IEF_Camera, IEF_Selection, IEF_Command}, {VF_ComponentTaskbar}, true, "AITurn")
		local event_cue_id = EventCues_AITurn()
		EventCues_RegisterEndTurnEvent(event_cue_id)
		Sound_Play2D ("sfx_ui_enemy_turn_start")
	end
end

-- Used for executing actions in the OnPlayerTurnEnd list
-- When the player clicks on NextDay, we wait for running actions to finish. Thereafter, we end the player's
-- turn and enter a scripted phase to execute OnPlayerTurnEnd actions, before moving on to AI Player's turn
function OnPlayerTurnEndScriptedPhase()
	Objective_Manager_CheckForExpiredObjectives()
	Objective_Manager_OnPlayerTurnEnd()
end

-- Used for disabling the button, and disregarding clicks that made it through
-- on the button that were added at the same time as the button being disabled
-- so they still were registered
function CanEndTurn()
	return g_disable_end_turn_button_requests <= 0
end

-- Runs every frame to understand how the turn phases have advanced and run the transition
-- logic necessary if they have (e.g. UI changes) and call any update functions reliant on
-- the turn info being correct (only guaranteed after this rule has run).
function UpdateTurnState()
	
	turn_advance = current_turn ~= World_GetCurrentTurn()
	player_advance = current_player_id ~= World_GetCurrentTurnPlayerID()
	local player_turn_end_scripted_phase = not is_scripted_phase and World_IsTurnEndScriptedPhase()
	CampaignMapTBS_RefreshTurnInformation()
	
	-- At this point the turn information variables are up to date so we can safely
	-- call any functions for the appropriate transitions, and these can rely on
	-- the turn variables being accurate.
	
	if turn_advance then
		OnTurnAdvance()
	end
	
	if player_advance then
		OnPlayerAdvance()
	end
	
	if player_turn_end_scripted_phase and is_players_turn then
		OnPlayerTurnEndScriptedPhase()
	end
	
	-- Functions that should run every frame that rely on the turn state information
	-- can be called here:
	FollowAISquads()
end

-- Called when a player's phase of the turn has ended
function OnPlayerAdvance()
	-- A player's turn has ended
	Game_SetSimRate(sim_rate_at_end_turn) -- Reset sim rate if it was sped up
		
	if is_players_turn then
		-- Begin player phase of the turn
		
		-- Update the UI values for the players Turn:
		UI_SetPropertyValue(UI_END_TURN_BUTTON, "Visibility", "Visible")
		UI_SetPropertyValue(UI_AI_TURN_INDICATOR, "Visibility", "Collapsed")
		
		-- Reset camera
		MetaMapInput_RemoveUILimits("AITurn") -- Cinematic Mode during AI turn
		MetaMapInput_RemoveUILimits("CampaignMapTbs") -- Input blockers added when end turn is clicked
		Camera_ResetFocus()
		if last_manual_camera_info ~= nil then
			Camera_FocusOnPosition(last_manual_camera_info.pos)
			Camera_SetZoomDist(last_manual_camera_info.zoom)
			last_manual_camera_info = nil
		end		
		
		-- Execute objectives' player turn start actions
		if World_IsScriptedTurnPhaseEnabled() then
			Objective_Manager_OnPlayerTurnStart()
		end
		
		-- Check for changes during enemy turn:
		MetaMap_PlayerTurnStartNotificationChecks()
	else
		-- Begin Non-player phase of the turn
		-- Update the UI values for the AI Turn:
		UI_SetPropertyValue(UI_END_TURN_BUTTON, "Visibility", "Collapsed")
		UI_SetPropertyValue(UI_AI_TURN_INDICATOR, "Visibility", "Visible")
		
		if last_manual_camera_info == nil then
			last_manual_camera_info = {
				pos = Camera_GetPivot(),
				zoom = Camera_GetZoomDist(),
			}
		end
		
		-- Record player's territories at the beginning of the AI turn
		MetaMap_RecordPlayerControlledTerritories()
		
		EnterAITurn()
	end
end

-- This is called when the turn system advances to the next turn (both players have finished their actions)
function OnTurnAdvance()
	RemoveDisableEndTurnRequest() -- Notify that the end turn is completed
	World_DispenseTurnResource()
	
	-- advance ability cooldown of all squads and entities
	AdvanceAbilityCooldown()
	Objective_Manager()
	-- Update the turn counter
	UI_SetPropertyValue(UI_TURN_COUNTER, "Text", tostring(current_turn))
end

function FollowAISquads()
	if g_cinematic_nonplayer_turn and (not is_players_turn) then
		local agent = World_GetCurrentTurnAgent()
		local shouldFollow = scartype(agent) == ST_SQUAD and Squad_IsVisibleInFOW(Game_GetLocalPlayer(), agent)
		if shouldFollow and agent ~= g_followSquad then
			-- Start following
			g_followSquad = agent
			Camera_Follow(agent)
		elseif not shouldFollow then
			-- Stop following
			g_followSquad = nil
			Camera_ResetFocus()
		end
	else
		g_followSquad = nil
	end
end

function UpdateEndTurnButton()
	local enabled = CanEndTurn()
	UI_UpdateEndTurnButtonEnabled(enabled)
end

t_overview_abilities = {
	ABILITY.AMERICAN.CMAP_TRANSFER_B25_US,
	ABILITY.AMERICAN.CMAP_TRANSFER_C47_US,
	ABILITY.AMERICAN.CMAP_TRANSFER_L2_US,
	ABILITY.AMERICAN.CMAP_TRANSFER_P47_US,
	ABILITY.BRITISH.CMAP_TRANSFER_FULMAR_UK,
	ABILITY.BRITISH.CMAP_TRANSFER_SWORDFISH_UK,
}

function AbilityPhaseCallback(pbg, phase)
	
	local ability_uses_overview_camera = false
	
	local overview_abilities = t_overview_abilities
	local overview_ability_count = #overview_abilities
	for i=1, overview_ability_count do
		if pbg == overview_abilities[i] then
			ability_uses_overview_camera = true
			break
		end
	end
	
	if not ability_uses_overview_camera then
		return
	end
	
	if phase == TP_Position then
		Camera_SetOverviewModeEnabled(true)
	elseif phase == TP_Cancelled then
		Camera_SetOverviewModeEnabled(false)
	end

end

function OnOverviewMode(context, data)
	g_inOverviewMode = context.overview_enabled
	-- Notify scenario scripts to transition atmospheres if needed
	if Scenario_OnOverviewModeChanged ~= nil then
		Scenario_OnOverviewModeChanged()
	end
end

--? @shortdesc Removes a previously added request to disable the end turn button. When there are no requests, the button is enabled.
function RemoveDisableEndTurnRequest()
	g_disable_end_turn_button_requests = g_disable_end_turn_button_requests - 1
end

--? @shortdesc Adds a previously added request to disable the end turn button. When there are no requests, the button is enabled.
--? @extdesc You need to eventually remove this request with RemoveDisableEndTurnRequest or else the button will never be enabled.
function AddDisableEndTurnRequest()
	g_disable_end_turn_button_requests = g_disable_end_turn_button_requests + 1
end
---------------------------
-- UI Helpers

	
function UI_UpdateEndTurnButtonEnabled(enabled)
	-- Update UI if necessary
	if end_turn_button_enabled ~= enabled then
		end_turn_button_enabled = enabled
		UI_SetPropertyValue(UI_END_TURN_BUTTON, "IsEnabled", enabled)
	end
end

function CampaignMapTbs_GenerateSaveTable(globalSaveTable)
	globalSaveTable.campaignMapTbs = {
		version = 2,
		last_manual_camera_info = last_manual_camera_info,
		g_inOverviewMode = g_inOverviewMode,
	}
end

function CampaignMapTbs_RestoreFromSaveTable(globalSaveTable)
	local campaignMapTbsSaveTable = globalSaveTable.campaignMapTbs
	if campaignMapTbsSaveTable ~= nil then
		last_manual_camera_info = campaignMapTbsSaveTable.last_manual_camera_info
		g_inOverviewMode = campaignMapTbsSaveTable.g_inOverviewMode
	end
	
	if g_inOverviewMode then
		Camera_SetOverviewModeEnabled(true)
	else
		Camera_SetOverviewModeEnabled(false)
	end
end
	