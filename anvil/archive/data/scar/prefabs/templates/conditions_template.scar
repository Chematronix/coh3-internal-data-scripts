import("table.scar")
import("narrative/dynamic_narrative_variables.scar")

local conditionsCommonElements = {
	{
		type = ST_STRING,
		name = "condition",
		displayName = "Condition",
		description = "Condition to trigger the following actions",
		options = {"None", "Boolean", "HasUnits", "HasBuildings","UnitAtLocation", "EntityAtLocation", "CompareUnitCounts",
			"ObjectiveCounter", "ObjectiveTimer", "ObjectiveIsComplete", "ObjectiveIsStarted","ObjectiveIsFailed", "ObjectiveIntroCheck", "HealthPercentage",
			"GroupCount", "PlayerCanSee", "SGroupCanSeeSGroup", "HasResources", "GameTime", "AskScarFunction", "CheckDifficultySetting",
			"PlayerHasAbilityOrUpgrade", "PlayerOwner", "CheckLedgerValue", "TurnDuration", "CheckAffectorTable", "PrefabIsActive",
			"CheckPlayerStateModelInt","IsUnderAttack", "IsSuppressedOrPinned", "PlayerPopulation", "CheckRace", "CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades", "IsOnScreen", "AggregatedCount",
			"IsGarrisoned", "CheckTerritoryOwnedBy", "CheckTerritoryFrontlineDistance", "CheckNarrativeVariable", "TrueForTurns", "NoEventRunning"},
		default = "None",
		category = " Condition",
	},
	{
		type = ST_PLAYER,
		name = "player",
		displayName = "Player",
		description = "The target player",
		requirement = {"condition", "HasUnits", "HasBuildings", "UnitAtLocation", "EntityAtLocation", "PlayerCanSee", "HasResources", "PlayerHasAbilityOrUpgrade", "PlayerOwner", "CheckRace", "CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades", "CheckPlayerStateModelInt", "PlayerPopulation", "CheckTerritoryOwnedBy"},
		category = "Options",
		allowWorld = true,
		default = "Player1",
	},
	
	--PRE COMPARISON VALUES
	{
		type = ST_STRING,
		name = "statemodel_key",
		displayName = "Statemodel Key",
		description = "The string key of the player's statemodel int to check against",
		default = "",
		requirement = {"condition", "CheckPlayerStateModelInt"},
		category = "Comparison",
	},
	{
		type = ST_STRING,
		name = "id",
		displayName = "ID",
		description = "A unique ID to reference an item in a list",
		requirement = {"condition", "GameTime", "ObjectiveCounter", "ObjectiveTimer", "ObjectiveIsComplete", "ObjectiveIsStarted", "ObjectiveIsFailed", "CheckLedgerValue"},
		category = "Comparison",
	},
	
	{
		type = ST_STRING,
		name = "comparison",
		displayName = "Comparison",
		description = "How to compare the numbers",
		options = {"IS_EQUAL", "IS_LESS_THAN", "IS_GREATER_THAN", "IS_LESS_THAN_OR_EQUAL", "IS_GREATER_THAN_OR_EQUAL", "IS_NOT_EQUAL"},
		default = "IS_LESS_THAN_OR_EQUAL",
		requirement = {"condition", "HasUnits", "HasBuildings", "CompareUnitCounts", "ObjectiveCounter", "ObjectiveTimer", "CheckDifficultySetting",
			"HealthPercentage", "GroupCount", "GameTime", "HasResources", "TurnDuration", "CheckPlayerStateModelInt", "UnitAtLocation",
			"CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades", "PlayerPopulation", "AggregatedCount", "CheckLedgerValue"},
		category = "Comparison",
	},
	
	{
		type = ST_STRING,
		name = "accumulator",
		displayName = "Accumulator",
		description = "How to combine the counts from each subcondition",
		options = {"SUM", "MAX", "MIN"},
		default = "SUM",
		requirement = {"condition", "AggregatedCount"},
		category = "Options",
	},
	
	{
		type = ST_NUMBER,
		name = "number",
		displayName = "Number",
		description = "Number to compare to (second in comparison).",
		requirement = 
		{
			operator = "ANY",
			{"condition", "HasUnits", "HasBuildings", "ObjectiveCounter", "ObjectiveTimer", "GroupCount", "HasResources", "PlayerPopulation", "AggregatedCount", "CheckLedgerValue"},
			{
				operator = "ALL",
				{"condition", "CheckAffectorTable"},
				{"affector", "EntryPoint"},
			},
		},
		category = "Comparison",
		default = 0,
	},
	
	{
		type = ST_TABLE,
		name = "exclude_bps",
		displayName = "Blueprints to Exclude",
		description = "Blueprint type to filter out",
		multiplicity = "multiple",
		requirement = {"condition", "UnitAtLocation"},
		itemSchema = 
		{
			{
				type = ST_PBG,
				name = "bp_name",
				displayName = "Blueprint Name",
				blueprintType  = "squad",
				description = "Type of squad to exclude",
				category = "Options",
			},
		},
	},
	
	{
		type = ST_NUMBER,
		name = "amount",
		displayName = "Amount",
		description = "Number of units to check for at the location (second number in comparison).",
		requirement = 	{"condition", "UnitAtLocation"},
		category = "Comparison",
	},
	
    {
        type = ST_STRING,
        name = "upgrade_type",
        displayName = "Upgrade Type",
        description = "Is it on a squad, an entity, or the player",
        options = {"Entity", "Squad", "Player"},
        default = "Squad",
		requirement = {"condition", "CountConstructedUpgrades"},
        category = "Construction Requirements",
    },
	{
		type = ST_NUMBER,
		name = "count",
		displayName = "Count",
		description = "Amount to be constructed",
		requirement = {"condition", "CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades"},
		category = "Comparison",
	},
	
	{
		type = ST_BOOLEAN,
		name = "include_existing",
		displayName = "opt Include Existing",
		description = "Include units that already existed at condition init?",
		requirement = {"condition", "CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades"},
		default = false,
		category = "Options",
	},
	
	{
		type = ST_BOOLEAN,
		name = "require_location",
		displayName = "opt Require Location",
		description = "Must the construction occur at a particular location? (tolerance can be set with the marker radius)",
		requirement = {"condition", "CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades"},
		default = false,
		category = "Options",
	},
	
	{
		type = ST_BOOLEAN,
		name = "require_facing",
		displayName = "opt Require Facing",
		description = "Must the construction be oriented at the provided point? Uses the location of the constructed, not the location specified in Require Location",
		requirement = {"condition", "CountConstructedEntities"},
		default = false,
		category = "Options",
	},
	{
		type = ST_MARKER,
		name = "facing",
		description = "Location they must be facing",
		requirement = {"require_facing", true},
		category = "General",
		colour = "orange",
	},
	{
		type = ST_NUMBER,
		name = "facing_tolerance_deg",
		displayName = "Facing Tolerance (Degrees)",
		description = "How tolerant are we of facing in degrees? (0 is exact, 180 is any angle)",
		requirement = {"require_facing", true},
		default = 0,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "target",
		displayName = "Target Type",
		description = "What target type to use for this condition: EGroup or SGroup",
		options = {"SGROUP", "EGROUP"},
		default = "SGROUP",
		requirement = 
		{
			operator = "ANY",
			{"condition", "GroupCount"},
			{
				operator = "ALL",
				{"condition", "HealthPercentage", "PlayerOwner"},
				{"use_context_as_target", false},
			},
		},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "use_context_as_target",
		default = false,
		requirement = {"condition", "HealthPercentage", "PlayerOwner"},
		category = "Options",
		description = "If enabled then use the context as the target rather than a group",
	},
	{
		type = ST_STRING,
		name = "is_on_screen_target_type",
		displayName = "Target Type",
		description = "Target of the condition",
		options = {"SGROUP", "EGROUP", "MARKER"},
		default = "SGROUP",
		requirement = {"condition", "IsOnScreen"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "spawned_only",
		displayName = "opt Spawned Only",
		description = "Should we only count spawned entities/squads?",
		default = false,
		requirement = {"condition", "EntityAtLocation", "GroupCount"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "target_type",
		displayName = "Target Type",
		description = "What target type to use for this condition: EGroup, SGroup, Position, Enemy. CONTEXT uses the dynamic context selected by the playbill.",
		options = {"SGROUP", "EGROUP", "POSITION", "ENEMY", "CONTEXT"},
		default = "SGROUP",
		requirement = {"condition", "PlayerCanSee"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "location_target_type",
		displayName = "Location Type",
		description = "What type of target to use as the position. CONTEXT uses the dynamic context selected by the playbill.",
		options = {"SGROUP", "EGROUP", "MARKER", "CONTEXT"},
		default = "MARKER",
		requirement = {
			operator = "ANY", 
			{"condition", "UnitAtLocation"},
			{"condition", "EntityAtLocation"},
			{"condition", "CheckTerritoryOwnedBy"},
			{"condition", "CheckTerritoryFrontlineDistance"},
		},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "sgroup",
		displayName = "SGroup",
		description = "SGroup targeted",
		requirement = 
		{
			operator = "ANY",
			{"condition", "IsUnderAttack", "IsSuppressedOrPinned"},
			{
				operator = "ALL",
				{"target_type", "SGROUP"},
				{"condition", "PlayerCanSee"},
			},
			{
				operator = "ALL",
				{"location_target_type", "SGROUP"},
				{"condition", "UnitAtLocation", "EntityAtLocation", "CheckTerritoryOwnedBy", "CheckTerritoryFrontlineDistance"},

			},
			{
				operator = "ALL",
				{"target", "SGROUP"},
				{
					operator = "ANY",
					{"condition", "GroupCount", "PlayerOwner"},
					{
						operator = "ALL",
						{"condition", "HealthPercentage"},
						{"use_context_as_target", false},
					},
				},
			},
			{
				operator = "ALL",
				{"is_on_screen_target_type", "SGROUP"},
				{"condition", "IsOnScreen"},
			},
			{
				operator = "ALL",
				{"condition", "IsGarrisoned"},
				{"garrison_target_type", "SGROUP"},
			},
		},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "opt_dest_sgroup",
		displayName = "opt Constructed SGroup",
		description = "An SGroup to place the constructed squads into",
		requirement = {"condition", "CountConstructedSquads", "CountConstructedUpgrades"},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "sgroupA_source",
		displayName = "SGroup Source",
		description = "Source SGroup doing the looking",
		requirement = {"condition", "SGroupCanSeeSGroup"},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "sgroupB_target",
		displayName = "SGroup Target",
		description = "Target SGroup being looked for",
		requirement = {"condition", "SGroupCanSeeSGroup"},
		category = "Options",
	},
	--------------------
	{
		type = ST_EGROUP,
		name = "egroup",
		displayName = "EGroup",
		description = "EGroup targeted",
		requirement = 
		{
				operator = "ANY",
			{
				operator = "ALL",
				{"condition", "EntityAtLocation"},
				{"location_target_type", "EGROUP"},
			},
			{
				operator = "ALL",
				{"target_type", "EGROUP"},
				{"condition", "PlayerCanSee"},
			},
			{
				operator = "ALL",
				{"location_target_type", "EGROUP"},
				{"condition", "UnitAtLocation", "CheckTerritoryOwnedBy", "CheckTerritoryFrontlineDistance"},
			},
			{
				operator = "ALL",
				{"target", "EGROUP"},
				{
					operator = "ANY",
					{"condition", "GroupCount", "PlayerOwner"},
					{
						operator = "ALL",
						{"condition", "HealthPercentage"},
						{"use_context_as_target", false},
					},
				},
			},
			{
				operator = "ALL",
				{"is_on_screen_target_type", "EGROUP"},
				{"condition", "IsOnScreen"},
			},
			{
				operator = "ALL",
				{"condition", "IsGarrisoned"},
				{"garrison_target_type", "EGROUP"},
			},
		},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "entity_egroup",
		displayName = "Entity EGroup (Optional)",
		description = "Group containing a specified entity or entity type",
		requirement = {"condition", "EntityAtLocation"},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "opt_dest_egroup",
		displayName = "opt Constructed EGroup",
		description = "An SGroup to place the constructed squads into",
		requirement = {"condition", "CountConstructedEntities", "CountConstructedUpgrades"},
		category = "Options"
	},
	{
		type = ST_MARKER,
		name = "position",
		displayName = "Position",
		description = "Where to check. May take into account range.",
		hasRange = true,
		requirement =
		{
			operator = "ANY",
			{"condition", "CompareUnitCounts"},
			{
				operator = "ALL",
				{"condition", "PlayerCanSee"},
				{"target_type", "POSITION"},
			},
			{
				operator = "ALL",
				{"location_target_type", "MARKER"},
				{"condition", "UnitAtLocation", "EntityAtLocation", "CheckTerritoryOwnedBy", "CheckTerritoryFrontlineDistance"},
			},
			{
				operator = "ALL",
				{"condition", "CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades"},
				{"require_location", true},
			},
			{
				operator = "ALL",
				{"is_on_screen_target_type", "MARKER"},
				{"condition", "IsOnScreen"},
			},
		},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "override_marker_range",
		displayName = "Override Marker Range",
		description = "Enable to specify a range instead of using a context or marker range",
		category = "Options",
		requirement = {
			operator = "ALL",
			{"condition", "UnitAtLocation", "EntityAtLocation"},
			{
				operator = "ANY",
				{"location_target_type", "CONTEXT"},
				{"location_target_type", "MARKER"},
			},
		},
		default = false,
	},
	{
		type = ST_NUMBER,
		name = "range",
		displayName = "Range",
		description = "The circular range around a position.",
		default = 10,
		requirement =
		{
			
			operator = "ALL",
			{"condition", "UnitAtLocation", "EntityAtLocation"},
			{
				operator = "ANY",
				{"location_target_type", "EGROUP"},
				{"location_target_type", "SGROUP"},
				{
					operator = "ALL",
					{"location_target_type", "CONTEXT", "MARKER"},
					{"override_marker_range", true},
				},
			},
		},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "sector_distance",
		displayName = "Sector Distance",
		description = "Distance in territories for CheckTerritoryFrontlineDistance. 0 means the sector is on the frontline (neighbouring a territory of opposite ownership)",
		requirement = {"condition", "CheckTerritoryFrontlineDistance"},
		integer = true,
		default = 0,	
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "opt_sgroup",
		displayName = "opt SGroup Filter",
		description = "Only check for units of this sgroup at the location specified.",
		requirement = {"condition", "UnitAtLocation"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "use_squad_type_to_filter",
		displayName = "Use Squad Type to Filter",
		description = "Use squad type to filter instead of BP",
		requirement = {"condition", "UnitAtLocation", "IsGarrisoned"},
		default = false,
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "unitType",
		displayName = "opt Unit BP",
		blueprintType = "squad",
		description = "BP of unit to filter",
		category = "Options",
		requirement = {
			operator = "ANY",
			{"condition", "HasUnits"},
			{
				operator = "ALL",
				{"condition", "UnitAtLocation", "IsGarrisoned"},
				{"use_squad_type_to_filter", false},
			},
		},
	},
	{
		type = ST_TABLE,
		name = "opt_unit_types_to_filter_in",
		description = "Unit types to include in the check",
		multiplicity = "multiple",
		requirement = {"condition", "HasUnits", "UnitAtLocation"},
		itemSchema =
		{
			
		},
	},
	{
		type = ST_TABLE,
		name = "squad_types_to_filter",
		description = "Squad type to filter in",
		multiplicity = "multiple",
		requirement = {"use_squad_type_to_filter", true},
		itemSchema = 
		{
			{
				type = ST_STRING,
				name = "squad_type",
				displayName = "Squad type to filter",
				description = "Type of squad to filter (Add more in the schema to support more types to filter)",
				options = {"anti_tank", "artillery", "elite_infantry", "heavy_armor", "light_armor", "mortar", "sniper", "standard_infantry", "suppression"},
				category = "Options",
			},
		},
	},
	{
		type = ST_PBG,
		name = "sbp",
		displayName = "Squad Blueprint",
		blueprintType = "squad",
		description = "Type of squad to be constructed",
		requirement = {"condition", "CountConstructedSquads"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_airplane",
		displayName = "opt Ignore Airplanes",
		description = "Ignores planes in this unit check.",
		requirement = {"condition", "HasUnits","UnitAtLocation"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_bp_casualty",
		displayName = "opt Ignore Casualties",
		description = "Ignores casualties in this unit check.",
		requirement = {"condition", "HasUnits","UnitAtLocation"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_auto_builder",
		displayName = "opt Ignore Auto-Builder squads",
		description = "Ignores auto-builder squads in this unit check.",
		requirement = {"condition", "HasUnits","UnitAtLocation"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_building",
		displayName = "opt Ignore Building squads",
		description = "Ignores building squads (emplacements etc) in this unit check.",
		requirement = {"condition", "HasUnits","UnitAtLocation"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_medic_na",
		displayName = "opt Ignore Medic",
		description = "Ignores medic in this unit check. (NOTE: Medics dont have a unit type yet. Anvil_FilterOutForbiddenSquadTypes will need to be updated once medic type is specified)",
		requirement = {"condition", "HasUnits","UnitAtLocation"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "opt_useTeam",
		displayName = "opt Use Team",
		description = "Use whole team of selected player",
		requirement = {"condition", "UnitAtLocation", "HasUnits", "HasBuildings", "PlayerOwner"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "opt_ignore_withdraw_towards_edge_squads",
		displayName = "opt Ignore Withdraw Towards Edge Squads",
		description = "Ignores squads withdraw retreating towards the edge",
		requirement = {"condition", "GroupCount", "UnitAtLocation", "HasUnits"},
		category = "Options",
		default = true,
	},
	{
		type = ST_PBG,
		name = "buildingTypes",
		displayName = "Building Blueprint",
		blueprintType = "entity",
		description = "Type of buildings to check for",
		requirement = {"condition", "HasBuildings"},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "entityType",
		displayName = "opt Entity Blueprint",
		blueprintType = "entity",
		description = "type of entity to filter",
		requirement = {"condition", "EntityAtLocation"},
		category = "Options",
	},
	
	{
		type = ST_PBG,
		name = "ebp",
		displayName = "Entity Blueprint",
		blueprintType = "entity",
		description = "Type of entity to be constructed",
		requirement = {"condition", "CountConstructedEntities"},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "ability_pbg",
		displayName = "Ability Blueprint",
		blueprintType = "ability",
		description = "type of ability to check",
		requirement =
		{
			operator = "ALL",
			{"condition", "PlayerHasAbilityOrUpgrade"},
			{"abilityOrUpgrade", "Ability"},
		},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "upgrade_pbg",
		displayName = "Upgrade Blueprint",
		blueprintType = "upgrade",
		description = "type of upgrade to check",
		requirement = 
		{
			operator = "ANY",
			{
				operator = "ALL",
				{"condition", "PlayerHasAbilityOrUpgrade"},
				{"abilityOrUpgrade", "Upgrade"},
			},
			{"condition", "CountConstructedUpgrades"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "abilityOrUpgrade",
		displayName = "Ability or Upgrade",
		description = "Ability or Upgrade to check",
		options = {"Ability", "Upgrade"},
		default = "Ability",
		requirement = {"condition", "PlayerHasAbilityOrUpgrade"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "statemodel_value",
		displayName = "Statemodel Value",
		description = "The expected value of the statemodel int at the specified key to check for",
		requirement = {"condition", "CheckPlayerStateModelInt"},
		category = "Comparison",
	},
	{
		type = ST_PLAYER,
		name = "playerA",
		displayName = "Player A",
		description = "The first player in a comparison",
		requirement = {"condition", "CompareUnitCounts"},
		category = "Options",
	},
	{
		type = ST_PLAYER,
		name = "playerB",
		displayName = "Player B",
		description = "The second player in a comparison",
		requirement = {"condition", "CompareUnitCounts"},
		category = "Options",
	},
	
	{
		type = ST_SGROUP,
		name = "sgroupA",
		displayName = "SGroup A",
		description = "First group in a comparison",
		requirement = {"condition", "CompareUnitCounts"},
		category = "Options",
	},
	
	{
		type = ST_SGROUP,
		name = "sgroupB",
		displayName = "SGroup B",
		description = "Second group in a comparison",
		requirement = {"condition", "CompareUnitCounts"},
		category = "Options",
	},
	
	{
		type = ST_NUMBER,
		name = "percentage",
		displayName = "Percentage",
		description = "Percentage value for comparison: 0.0-1.0",
		requirement = {"condition", "HealthPercentage", "IsOnScreen"},
		category = "Comparison",
		default = 0,
		integer = false,
		min = 0,
		max = 1,
	},
	
	{
		type = ST_BOOLEAN,
		name = "all",
		displayName = "ALL [or ANY]",
		description = "If true it uses the ALL check, if unchecked it uses ANY",
		requirement =
		{
			operator = "ANY",
			{"condition", "PlayerCanSee", "SGroupCanSeeSGroup", "IsUnderAttack", "IsSuppressedOrPinned"},
			{
				operator = "ALL",
				{"is_on_screen_target_type", "SGROUP", "EGROUP"},
				{"condition", "IsOnScreen"},
			},
		},
		category = "Options",
		default = false,
	},
	{
		type = ST_STRING,
		name = "suppressed_pinned_check_option",
		displayName = "Suppressed and/or Pinned",
		description = "Check for sgroup suppressed/pinned or either",
		requirement = {"condition", "IsSuppressedOrPinned"},
		options = {"IsSuppressed", "IsPinned", "Either"},
		default = "IsSuppressed",
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "population_cap_type",
		displayName = "Cap Type",
		description = "Cap type to use for population count",
		requirement = {"condition", "PlayerPopulation"},
		options = {"CT_Personnel", "CT_Vehicle", "CT_Medic"},
		default = "CT_Personnel",
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "resourceType",
		displayName = "Resource Type",
		description = "Resource type to use (Manpower, Fuel, Munition, Command)",
		options = {"Manpower", "Fuel", "Munition", "Command"},
		requirement = {"condition", "HasResources"},
		category = "Options",
		default = "Manpower",
	},
	
	{
		type = ST_NUMBER,
		name = "seconds",
		displayName = "Seconds",
		description = "Seconds for comparison",
		requirement = {"condition", "GameTime"},
		category = "Comparison",
		default = 1,
	},
	{
		type = ST_NUMBER,
		name = "time_since_last_attack",
		displayName = "Time Since Last Attack",
		description = "time since last attack for comparison",
		requirement = {"condition", "IsUnderAttack"},
		category = "Options",
		default = 1,
	},
	
	{
		type = ST_NUMBER,
		name = "turnDuration",
		displayName = "Turn Duration",
		description = "Number of turns to check against",
		requirement = {"condition", "TurnDuration"},
		category = "Comparison",
		default = 1,
	},
	
	{
		type = ST_BOOLEAN,
		name = "checkFromCurrentTurn",
		displayName = "opt Check From Current Turn",
		description = "If true it checks Turn Duration from the point this condition starts checking. False with check duration from turn 1.",
		requirement = {"condition", "TurnDuration"},
		category = "Options",
		default = true,
	},
	
	{
		type = ST_STRING,
		name = "functionName",
		displayName = "Function Name",
		description = "Calls a function of this name - function must return a true or false",
		requirement = {"condition", "AskScarFunction"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "countBuildingsUnderConstruction",
		displayName = "opt Count If Under Construction",
		description = "Include buildings that are currently under construction",
		requirement = {"condition", "HasBuildings"},
		category = "Options",
		default = false,
	},
	{
		type = ST_STRING,
		name = "name",
		displayName = "Prefab Name",
		description = "The name of the intro prefab to check.",
		requirement = {"condition", "ObjectiveIntroCheck"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "affector",
		displayName = "Affector",
		description = "Affector to check",
		options = {"CompanyBlueprint", "EnemyCompanyBlueprint", "ReinforcingCompanyBlueprint", "EntryPoint"},
		default = "CompanyBlueprint",
		requirement = {"condition", "CheckAffectorTable"},
		category = "Condition",
	},
	{
		type = ST_PBG,
		name = "company_blueprint",
		displayName = "Company Blueprint",
		description = "Blueprint to check for.",
		blueprintType = "squad",
		requirement = 
		{
			operator = "ALL",
			{"condition", "CheckAffectorTable"},
			{
				operator = "ANY",
				{"affector", "CompanyBlueprint"},
				{"affector", "EnemyCompanyBlueprint"},
				{"affector", "ReinforcingCompanyBlueprint"},
			},
		},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "race",
		displayName = "Race",
		description = "Race to check for",
		blueprintType = "race",
		requirement = {"condition", "CheckRace"},
		category = "Options",
	},
	{
		type = ST_PREFAB,
		name = "prefab",
		displayName = "Prefab",
		description = "Prefab to check against",
		requirement = {"condition", "PrefabIsActive"},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "debug_ebp",
		displayName = "Debug Entity Blueprint",
		description = "Blueprint of entity to spawn to complete condition.",
		blueprintType = "entity",
		requirement = {
			operator = "ANY",
			{"condition", "EntityAtLocation", "HasBuildings"},
			{
				operator = "ALL",
				{"condition", "GroupCount"},
				{"target", "EGROUP"},
			},
		},
		category = "z Debug",
	},
	{
		type = ST_PBG,
		blueprintType = "squad",
		name = "debug_sbp",
		displayName = "Debug Squad Blueprint",
		description = "Blueprint of squad to spawn to complete condition.",
		requirement = {
			operator = "ANY",
			{"condition", "CompareUnitCounts", "HasUnits", "UnitAtLocation"},
			{
				operator = "ALL",
				{"condition", "GroupCount"},
				{"target", "SGROUP"},
			},
		},
		category = "z Debug",
	},
	{
		type = ST_NUMBER,
		name = "debug_radius",
		displayName = "Debug Clear Radius",
		description = "Radius around any capture point(s) to clear",
		default = 10,
		requirements = {
			operator = "ALL",
			{"condition", "PlayerOwner"},
			{"target", "EGROUP"},
		},
	},
	{
		type = ST_BOOLEAN,
		name = "has_debug_location",
		displayName = "Has Debug Location",
		description = "Do you want to specify a location to spawn the troops/entities for this when debugging?",
		default = false,
		requirements = {"condition", "CountConstructedEntities", "CountConstructedSquads", "CountConstructedUpgrades", "GroupCount", "CompareUnitCounts"},
		category = "z Debug",
	},
	{
		type = ST_MARKER,
		name = "debug_location",
		requirements = {"has_debug_location", true},
	},
	{
		type = ST_STRING,
		name = "difficulty",
		displayName = "Difficulty Setting",
		description = "The SP difficulty setting.",
		options = {"0 - Easy", "1 - Normal", "2 - Hard", "3 - Expert"},
		requirement = {"condition", "CheckDifficultySetting"},
		category = "Options",
		default = "1 - Normal",
	},
	-- IsGarrisoned
	{
		type = ST_STRING,
		name = "garrison_match_type",
		displayName = "Garrison Match Type",
		description = "Require ALL, ANY, or NONE of the specified targets to have a matching garrisoned squad",
		options = {"ALL", "ANY", "NONE"},
		requirement = {"condition", "IsGarrisoned"},
		category = "Options",
		default = "ALL",
	},
	{
		type = ST_STRING,
		name = "garrison_target_type",
		options = {"SGROUP", "EGROUP", "CONTEXT"},
		requirement = {"condition", "IsGarrisoned"},
		category = "Options",
		default = "EGROUP",
		displayName = "Garrison Target Type"
	},
	{
		type = ST_STRING,
		name = "narrative_variableset",
		displayName = "Variableset",
		description = "Variableset to check",
		options = g_narrative_variable_sets,
		default = "<none>",
		requirement = {"condition", "CheckNarrativeVariable"},
		category = "Variable",
	},   
}

g_subconditions_template = Table_Concatenate(conditionsCommonElements, Table_Concatenate(g_narrative_variable_template, g_narrative_variable_condition_template))

-- Extra options that the top level template has
local conditionsSuperElements = {
	{
		type = ST_STRING,
		name = "boolean",
		displayName = "Boolean",
		description = "Checks sub conditions to see if ANY #, ALL, or NONE have been completed",
		options = {"ALL", "ANY", "NONE"},
		requirement = {"condition", "Boolean"},
		category = "Options",
		default = "ALL",
	},
	{
		type = ST_NUMBER,
		name = "minRequired",
		displayName = "Min Required",
		description = "Minimum number of conditions passed",
		requirement = {"boolean", "ANY", "NONE"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "turn_count",
		displayName = "Turn Count",
		description = "Number of turns all the subconditions must be true, for this to return true",
		default = "None",
		requirement = {"condition", "TrueForTurns"},
		category = "Variable",
	},
	{
		type = ST_TABLE,
		name = "subconditions",
		displayName = "Subconditions",
		description = "All conditions to check for the Boolean & AggregatedCount conditions",
		multiplicity = "multiple",
		requirement = {"condition", "Boolean", "AggregatedCount", "TrueForTurns"},
		itemSchema = g_subconditions_template,
	},
}

-- Top level condition template
g_conditions_template = Table_Concatenate(Table_Concatenate(conditionsCommonElements, conditionsSuperElements), Table_Concatenate(g_narrative_variable_template, g_narrative_variable_condition_template))

