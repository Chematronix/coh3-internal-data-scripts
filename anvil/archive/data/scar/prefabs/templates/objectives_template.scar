import("ui/hpat_enum_util.scar")
import("table.scar")
import("prefabs/templates/conditions_template.scar")
import("prefabs/templates/actions_base_template.scar")

-- Beat type options for sub objective
local subObjectiveOptions = {
    "Destroy", "Capture", "Defend", "ClearArea", "PrepareCountdown", "RepairHealth", "Escort", "UseAbility", "Rescue",
    "CompleteMission", "CompletePopupMission", "Construct", "Blank"
}

-- Beat type options for top level objective
local superObjectiveOptions = Table_Concatenate(subObjectiveOptions, {"SubObjective"})

local objectiveVeterancyRewardOptions = { "None", "Low", "High" }

local objective_stage_callback_schema = {
	{
		type = ST_PREFAB,
		name = "playbill",
		description = "Linked playbill prefab",
		default = "",
	},
	{
		type = ST_STRING,
		name = "scenref_playbill_key",
		description = "Name of a playbill that should start when this prefab's objectives are finished. Only use for referencing a scenref playbill from a scenario.",
		default = "",
	},
	{
		type = ST_TABLE,
		name = "actions",
		displayName = "Actions",
		description = "All actions to be fired for this objective stage",
		multiplicity = "multiple",
		itemSchema = g_playbills_actions_base_template,
	},
}

-- Common elements of both sub and top level objectives
local objectivesCommonElements = {
	
	{
		type = ST_STRING,
		name = "visibility",
		displayName = "Visibility",
		description = "Who should be able to see these objectives?",
		default = "All",
		options = {"All", "Team", "Player", "None"},
        category = "General",
	},
	{
		type = ST_PLAYER,
		name = "visibility_player",
		displayName = "Player",
		description = "Which Player should be able to see these objectives? If Team is selected, their entire team will see these objectives.",
		default = "Player1",
		requirement = {"visibility", "Player", "Team"},
        category = "General",
	},
    {
        type = ST_BOOLEAN,
        name = "turn_based",
        displayName = "Turn Based?",
        description = "Is this objective turn based? Allows for expiry.",
        default = false,
        category = "General",
    },
    {
        type = ST_BOOLEAN,
        name = "expires_after_turns",
        displayName = "Expires After Turns",
        description = "Does the objective expire after a turn duration?",
        requirement = {"turn_based", true},
        default = false,
        category = "General"
    },
    {
        type = ST_NUMBER,
        name = "expiry_turns",
        displayName = "Expiry Turns",
        description = "Number of turns that the objective will last from the turn that it was started",
        requirement = {"expires_after_turns", true},
        category = "General",
    },
    {
        type = ST_BOOLEAN,
        name = "has_turn_reminder",
        displayName = "Has Turn Reminder",
        description = "Does this objective have a reminder after a turn interval?",
        requirement = {"turn_based", true},
        default = false,
        category = "General"
    },
    {
        type = ST_NUMBER,
        name = "reminder_delay_turns",
        displayName = "Reminder Turns Delay",
        description = "The first reminder won't show up until this many turns have past",
        requirement = {"has_turn_reminder", true},
        category = "General",
    },
    {
        type = ST_NUMBER,
        name = "reminder_turn_frequency",
        displayName = "Reminder Turn Frequency",
        description = "Number of turns that will go by between each reminder",
        requirement = {"has_turn_reminder", true},
        category = "General",
    },
	{
		type = ST_STRING,
		name = "icon_name",
		displayName = "Icon Name",
		description = "File path of the icon",
		default = "",
		category = "General",
	},
    {
        type = ST_STRING,
        name = "title",
        displayName = "Title",
        description = "Title for the objective.",
        editor = 
        {
            name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
        },
        category = "General",
    },
    {
        type = ST_STRING,
        name = "description",
        displayName = "Description",
        description = "Description text, specifically for Info objectives",
        editor = 
        {
            name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
        },
        category = "General",
    },
    {
        type = ST_STRING,
        name = "objective_type",
        displayName = "Objective Type",
        description = "Type of objective to create",
        category = "General",
        default = "OT_PRIMARY",
        options = {"OT_PRIMARY", "OT_SECONDARY", "OT_BONUS", "OT_INFORMATION"},
    },
    {
        type = ST_STRING,
        name = "ui_datatemplate",
        displayName = "UI DataTemplate",
        description = "The datatemplate that UI will use to display this objective",
        category = "General",
        default = "PrimaryObjectiveDataTemplate",
        options = {"PrimaryObjectiveDataTemplate", "SecondaryObjectiveDataTemplate", "BonusObjectiveDataTemplate",
        "InfoObjectiveDataTemplate", "SubObjectiveDataTemplate"}
    },
    {
        type = ST_BOOLEAN,
        name = "showTitle",
        displayName = "Show Objective Pop-up",
        description = "Whenever the objective changes state, should it show the Objective Pop-up?",
        default = true,
        category = "General",
    },
	{
		type = ST_BOOLEAN,
		name = "showStartTitle",
		displayName = "Enable Start Titlecard",
		default = true,
		description = "Shows or hides titlecard on objective start only",
		category = "General",
        requirement = {"showTitle", true},
	},
	{
		type = ST_BOOLEAN,
		name = "showCompletionTitle",
		displayName = "Enable Completion Titlecard",
		default = true,
		description = "Shows or hides titlecard on success only",
		category = "General",
        requirement = {"showTitle", true},
	},
	{
		type = ST_BOOLEAN,
		name = "showFailureTitle",
		displayName = "Enable Failure Titlecard",
		default = true,
		description = "Shows or hides titlecard on failure only",
		category = "General",
		requirement = {"showTitle", true},
	},
    {
        type = ST_STRING,
        name = "start_narrative_event",
        displayName = "Start Narrative Event",
        editor = 
        {
            name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
            properties = 
            {
                type= "NarrativeEvent"
            }
        },
        description = "The narrative event to play when the objective starts.",
        category = "Narrative",
    },
    {
        type = ST_STRING,
        name = "complete_narrative_event",
        displayName = "Complete Narrative Event",
        editor = 
        {
            name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
            properties = 
            {
                type= "NarrativeEvent"
            }
        },
        description = "The narrative event to play when the objective completes.",
        category = "Narrative",
    },
    {
        type = ST_STRING,
        name = "fail_narrative_event",
        displayName = "Fail Narrative Event",
        editor = 
        {
            name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
            properties = 
            {
                type= "NarrativeEvent"
            }
        },
        description = "The narrative event to play when the objective fails.",
        category = "Narrative",
    },
    {
        type = ST_STRING,
        name = "fail_extra_narrative_event",
        displayName = "Fail Narrative Event (Extra)",
        editor = 
        {
            name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
            properties = 
            {
                type= "NarrativeEvent"
            }
        },
        description = "OPTIONAL Extra narrative to play to support playing two narrative events for example company speech & also campaign speech when you fail",
        category = "Narrative",
    },
    {
        type = ST_STRING,
        name = "complete_extra_narrative_event",
        displayName = "Complete Narrative Event (Extra)",
        editor = 
        {
            name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
            properties = 
            {
                type= "NarrativeEvent"
            }
        },
        description = "OPTIONAL Extra narrative to play to support playing two narrative events for example company speech & also campaign speech when you complete",
        category = "Narrative",
    },
    {
        type = ST_STRING,
        name = "expire_narrative_event",
        displayName = "Expire Narrative Event",
        editor = 
        {
            name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
            properties = 
            {
                type= "NarrativeEvent"
            }
        },
        description = "The narrative event to play when the objective expires.",
        category = "Narrative",
    },
    {
        type = ST_STRING,
        name = "reminder_narrative_event",
        displayName = "Reminder Narrative Event",
        editor = 
        {
            name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
            properties = 
            {
                type= "NarrativeEvent"
            }
        },
        description = "The narrative event to play for the objective reminder.",
        category = "Narrative",
    },
    {
        type = ST_STRING,
        name = "objective_id",
        displayName = "Objective ID",
        description = "A unique objective id that can be referenced. ENSURE THERE IS NO DUPLICATE NAME WHEN USING THIS",
        category = "Optional",
    },
    {
        type = ST_NUMBER,
        name = "cp_reward",
        displayName = "Command Point Reward",
        description = "Command Points granted to the player upon completing this objective.",
		default = 0,
        category = "Optional",
    },
    {
        type = ST_NUMBER,
        name = "cp_cap_boost",
        displayName = "Command Point Cap Increase",
        description = "How much to increase the player's current CP cap. Default increase is equal to CP reward.",
		default = 0,
        category = "Optional",
    },
    {
        type = ST_STRING,
        name = "defend_target",
        displayName = "Defend Target",
        description = "What are we defending/What is the enemy attacking? This determines the fail/complete conditions. None means it uses external failure conditions.",
        options = {"Destroy Target", "Capture Target", "None"},
        default = "Destroy Target",
        requirement = {"beat_type", "Defend"},
        category = "General",
    },
    {
        type = ST_STRING,
        name = "count_condition",
        displayName = "Counting Condition",
        description = "NONE: Doesn't use any counting conditions. TIMER: Counts down. Completes on 0. COUNTER: Counts the number of target conditions completed. TURN_COUNTER: Counts down the number of turns remaining.",
        options = {"NONE", "TIMER", "COUNTER", "TURN_COUNTER"},
        default = "NONE",
        category = "General",
    },
    {
        type = ST_NUMBER,
        name = "timer_start_time",
        displayName = "Timer Start Time",
        description = "How long the timer should be on medium difficulty.",
        default = 120,
        requirement = {"count_condition", "TIMER"},
        category = "General",
    },
    {
        type = ST_NUMBER,
        name = "timer_start_time_easy",
        displayName = "Easy Timer Start Time",
        description = "How long the timer should be on easy difficulty. A negative number will be the same as normal difficulty.",
        default = -1,
        requirement = {"count_condition", "TIMER"},
        category = "General",
    },
    {
        type = ST_NUMBER,
        name = "timer_start_time_hard",
        displayName = "Hard Timer Start Time",
        description = "How long the timer should be on hard difficulty. A negative number will be the same as normal difficulty.",
        default = -1,
        requirement = {"count_condition", "TIMER"},
        category = "General",
    },
    {
        type = ST_NUMBER,
        name = "timer_start_time_expert",
        displayName = "Expert Timer Start Time",
        description = "How long the timer should be on expert difficulty. A negative number will be the same as normal difficulty.",
        default = -1,
        requirement = {"count_condition", "TIMER"},
        category = "General",
    },
    {
        type = ST_NUMBER,
        name = "timer_flash_at",
        displayName = "Timer Flash At",
        description = "The time remaining that the timer should flash at.",
        default = 30,
        requirement = {"count_condition", "TIMER"},
        category = "General",
    },
    {
        type = ST_BOOLEAN,
        name = "use_team",
        displayName = "Use Team Ownership",
        description = "Consider the point captured if it's held by your team",
        default = false,
        category = "General",
        requirement = {"beat_type", "Capture"},
    },
    {
        type = ST_NUMBER,
        name = "min_num",
        displayName = "Minimum Targets Used",
        description = "Min targets possible, -1 means all of them",
        default = -1,
        category = "Target Spawning",
        requirement = {"beat_type", "Destroy", "Capture", "Defend", "RepairHealth", "Escort"},
    },
    {
        type = ST_NUMBER,
        name = "max_num",
        displayName = "Maximum Targets Used",
        description = "Max targets possible, -1 means all of them",
        default = -1,
        category = "Target Spawning",
        requirement = {"beat_type", "Destroy", "Capture", "Defend", "RepairHealth", "Escort"},
    },
    {
        type = ST_STRING,
        name = "completion_check",
        displayName = "Completion Check",
        description = "How to check the conditions for this objective to complete: ALL, ANY, or NONE",
        options = {"ALL", "ANY", "NONE"},
        default = "ALL",
        category = "Objective Complete",
    },
    {
        type = ST_NUMBER,
        name = "completion_num",
        displayName = "Completion Number",
        description = "Minimum targets to take out for this objective to be completed",
        default = 1,
        requirement = {"completion_check", "ANY"},
        category = "Objective Complete",
    },
    {
        type = ST_STRING,
        name = "comparison",
        displayName = "Comparison",
        description = "Generic Objective comparison",
        options = {"IS_EQUAL", "IS_LESS_THAN", "IS_GREATER_THAN", "IS_LESS_THAN_OR_EQUAL", "IS_GREATER_THAN_OR_EQUAL", "IS_NOT_EQUAL"},
        default = "IS_LESS_THAN_OR_EQUAL",
        requirement = {"beat_type", "RepairHealth"},
        category = "Objective",
    },
    {
        type = ST_SGROUP,
        name = "sgroup",
        displayName = "SGroup",
        description = "SGroup in question for beat",
        requirement = 
        {
            operator = "ALL",
            {"beat_type", "RepairHealth"},
            {"target", "SGROUP"},
        },
        category = "Objective",
    },
    {
        type = ST_EGROUP,
        name = "egroup",
        displayName = "EGroup",
        description = "EGroup in question for beat",
        requirement = 
        {
            operator = "ALL",
            {"beat_type", "RepairHealth"},
            {"target", "EGROUP"},
        },
        category = "Objective",
    },
    {
        type = ST_STRING,
        name = "prepareCountdown_variant",
        displayName = "Countdown Variant",
        description = "Which Prepare/Countdown variant to use. If 'NONE' then it just defaults to counter running out to win.",
        options = {"Has forward position", "Has X building constructed", "Has at least X number of Y unit", "Has X ability and/or upgrade", "None (Countdown only)"},
        default = "None (Countdown only)",
        requirement = {"beat_type", "PrepareCountdown"},
        category = "Objective",
    },
    {
        type = ST_STRING,
        name = "at_location_boolean",
        displayName = "At Location Boolean",
        description = "Enable objective to be checked at ANY or ALL or NONE location(s)",
        options = {"ALL", "ANY", "NONE"},
        requirement = 
        {
            operator = "ALL",
            {"beat_type", "PrepareCountdown"},
            {"prepareCountdown_variant", "Has at least X number of Y unit", "Has forward position", "Has X building constructed"},
        },
        category = "Objective",
        default = "ALL",
    },
    {
        type = ST_NUMBER,
        name = "number_of_locations",
        displayName = "Number of Locations",
        description = "Minimum number of locations that this objective applies to ",
        default = 1,
        requirement = 
        {
            operator = "ALL",
            {"beat_type", "PrepareCountdown"},
            {"prepareCountdown_variant", "Has at least X number of Y unit", "Has forward position", "Has X building constructed"},
        },
        category = "Objective",
    },
    {
        type = ST_STRING,
        name = "check_complete_conditions",
        displayName = "Check Complete Conditions",
        description = "When using a timer, should we be checking completion conditions before or after the timer is finished?",
        options = {"Before Timer", "After Timer"},
        default = "Before Timer",
        requirement = {"count_condition", "TIMER"},
        category = "Objective Complete",
    },
    {
        type = ST_BOOLEAN,
        name = "can_Complete",
        displayName = "Can Complete?",
        description = "Whether the complete conditions are enabled or not - if this is checked off the objective needs to be completed by another source",
        default = true,
        category = "Objective Complete",
    },
    {
        type = ST_BOOLEAN,
        name = "can_fail",
        displayName = "Can Fail?",
        description = "Whether the fail conditions are enabled or not",
        default = false,
        category = "Objective Fail",
        requirement = {
            operator = "NOT",
            {"beat_type", "Rescue"}
        },
    },
    {
        type = ST_BOOLEAN,
        name = "include_mission_fail",
        displayName = "Include Mission Fail?",
        description = "Whether to include mission loss in the fail conditions. Leaving this false will exclusively use failure_conditions.",
        default = true,
        requirement =
        {
            operator = "ALL",
            {"beat_type", "CompleteMission"},
            {"can_fail", true},
        },
        category = "Objective Fail",
    },
    {
        type = ST_NUMBER,
        name = "number",
        displayName = "Number",
        description = "Number to do generic check against for objective",
        default = 1,
        requirement =
        {
            operator = "ALL",
            {"beat_type", "PrepareCountdown"},
            {"prepareCountdown_variant", "Has at least X number of Y unit", "Has X building constructed"},
        },
        category = "Objective",
    },
    {
        type = ST_PBG,
        name = "unitType",
        displayName = "Unit Type",
        blueprintType = "squad",
        description = "type of unit to check",
        requirement = 
        {
            operator = "ALL",
            {"beat_type", "PrepareCountdown"},
            {"prepareCountdown_variant", "Has at least X number of Y unit"},
        },
        category = "Objective",
    },
    {
        type = ST_PBG,
        name = "buildingTypes",
        displayName = "Building Types",
        blueprintType = "entity",
        description = "type of buildings to check",
        requirement =
        {
            operator = "ALL",
            {"beat_type", "PrepareCountdown"},
            {"prepareCountdown_variant", "Has X building constructed"},
        },
        category = "Objective",
    },
    {
        type = ST_PBG,
        name = "ability_pbg",
        displayName = "Ability PBG",
        blueprintType = "ability",
        description = "type of ability to check",
        requirement = 
        {
            operator ="ALL",
            {"beat_type", "PrepareCountdown"},
            {"prepareCountdown_variant", "Has forward position", "Has X ability and/or upgrade"},
        },
        category = "Objective",
    },
    {
        type = ST_TABLE,
        name = "ability_targets",
        description = "Locations for objective targets",
        multiplicity = "multiple",
        requirement = {"beat_type", "UseAbility"},
        itemSchema = {
            {
                type = ST_PBG,
                name = "ability_pbg",
                displayName = "Ability PBG",
                blueprintType = "ability",
                description = "type of ability to check",
                category = "Objective",
            },
            {
                type = ST_NUMBER,
                name = "ability_radius",
                displayName = "Ability Radius",
                description = "Radius of the ability if it is an area of effect ability, not necessary if the ability uses a selected target",                            
                requirement = {
                    operator = "NOT",
                    {"target_type", "location", "none"},
                },
                category = "Objective",
            },
            {
                type = ST_STRING,
                name = "target_type",
                displayName = "Target Type",
                description = "What sort of thing are we targeting? None means they only need to (successfully) use the ability, we don't care about where or on what.",
                options = {"entities", "squads", "location", "none"},
                default = "none",
                category = "Target",
            },
            {
                type = ST_PBG,
                name = "opt_target_ebp",
                displayName = "Opt Target EBP",
                blueprintType  = "entity",
                description = "Target entity blueprint",
                category = "Target",
                requirement = {"target_type", "entities"},
            },
            {
                type = ST_PBG,
                name = "opt_target_sbp",
                displayName = "Opt Target SBP",
                blueprintType  = "squad",
                description = "Target squad blueprint",
                category = "Target",
                requirement = {"target_type", "squads"},
            },
            {
                type = ST_PLAYER,
                name ="player",
                displayName = "Player",
                description = "Player owner of targets",
                default = "Player1",
            },
            {
                type = ST_EGROUP,
                name = "opt_target_egroup",
                displayName = "Opt Target EGroup",
                description = "EGroup to be targeted",
                category = "Target",
                requirement = {"target_type", "entities"},
            },
            {
                type = ST_SGROUP,
                name = "opt_target_sgroup",
                displayName = "Opt Target SGroup",
                description = "SGroup to be targeted",
                category = "Target",
                requirement = {"target_type", "squads"},
            },
            {
                type = ST_MARKER,
                name = "location",
                description = "Location for objective.",
                colour = "orange",
                hasDirection = true,
				hasRange = true,
                requirement = {"target_type", "location"},
            },
        },
    },
    {
        type = ST_PBG,
        name = "upgrade_pbg",
        displayName = "Upgrade PBG",
        blueprintType = "upgrade",
        description = "type of upgrade to check",
        requirement = 
        {
            operator = "ALL",
            {"beat_type", "PrepareCountdown"},
            {"prepareCountdown_variant", "Has forward position", "Has X ability and/or upgrade"},
        },
        category = "Objective",
    },
    {
        type = ST_STRING,
        name = "target",
        displayName = "Target",
        description = "What target type to use for this condition: EGroup or SGroup",
        options = {"SGROUP", "EGROUP"},
        default = "SGROUP",
        requirement = {"beat_type", "RepairHealth"},
        category = "Objective",
    },
    {
        type = ST_NUMBER,
        name = "percentage_default100",
        displayName = "Percentage",
        description = "Percentage value for comparison: 0.0-1.0 (Default 1 for 100%)",
        requirement = {"beat_type", "RepairHealth"},
        category = "Objective",
        default = 1,
        integer = false,
        min = 0,
        max = 1,
    },
    {
        type = ST_STRING,
        name = "failure_check",
        displayName = "Failure Check",
        description = "How to check the target conditions for this objective to fail: ALL, ANY, or NONE",
        options = {"ALL", "ANY", "NONE"},
        default = "ALL",
        requirement = {
            operator = "ANY",
            {"beat_type", "Rescue"},
            {"can_fail", true}
        },
        category = "Objective Fail",
    },
    {
        type = ST_NUMBER,
        name = "failure_num",
        displayName = "Failure Number",
        description = "Minimum targets that need to be lost for this objective to fail",
        default = 1,
        requirement = {"failure_check", "ANY"},
        category = "Objective Fail",
    },
    {
        type = ST_STRING,
        name = "fail_result",
        displayName = "Fail Result",
        description = "What the result is if this objective fails",
        options = {"MissionFail", "NextObjective"},
        default = "NextObjective",
        requirement = {
            operator = "ANY",
            {"beat_type", "Rescue"},
            {"can_fail", true}
        },
        category = "Objective Fail",
    },
    {
        type = ST_STRING,
        name = "check_fail_conditions",
        displayName = "Check Fail Conditions",
        description = "When using a timer, should we be checking completion conditions before or after the timer is finished?",
        options = {"Before Timer", "After Timer"},
        default = "Before Timer",
        requirement = {"count_condition", "TIMER"},
        category = "Objective Fail",
    },
    {
        type = ST_BOOLEAN,
        name = "use_takeback_timer",
        displayName = "Use Takeback Timer",
        description = "Enables a warning objective popup that gives the player a chance to recapture before failing",
        default = false,
        requirement = {"beat_type", "Capture", "Defend"},
        category = "Objective Fail",
    },
    {
        type = ST_NUMBER,
        name = "takeback_time",
        displayName = "Takeback Time",
        description = "Time the player gets to take back a capture point before the mission fails",
        default = 60,
        requirement = {"use_takeback_timer", true},
        category = "Take-Back Timer",
    },
    {
        type = ST_NUMBER,
        name = "takeback_flash_at",
        displayName = "Takeback Flash At",
        description = "When the timer should flash at",
        default = 10,
        requirement = {"use_takeback_timer", true},
        category = "Take-Back Timer",
    },
    {
        type = ST_STRING,
        name = "takeback_title",
        displayName = "Takeback Title",
        description = "Title for the take-back warning objective",
        requirement = {"use_takeback_timer", true},
        editor = 
        {
            name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
        },
        category = "Take-Back Timer",
    },
    {
        type = ST_STRING,
        name = "takeback_description",
        displayName = "Takeback Description",
        description = "Description for the take-back warning objective",
        requirement = {"use_takeback_timer", true},
        editor = 
        {
            name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
        },
        category = "Take-Back Timer",
    },
    {
        type = ST_STRING,
        name = "takeback_start_intel",
        displayName = "Takeback Start Intel",
        description = "Intel to be played when the objective starts",
        requirement = {"use_takeback_timer", true},
        category = "Take-Back Timer",
    },
    {
        type = ST_STRING,
        name = "takeback_complete_intel",
        displayName = "Takeback Complete Intel",
        description = "Intel to be played when the objective completes",
        requirement = {"use_takeback_timer", true},
        category = "Take-Back Timer",
    },
    {
        type = ST_STRING,
        name = "takeback_fail_intel",
        displayName = "Takeback Fail Intel",
        description = "Intel to be played when the objective fails",
        requirement = {"use_takeback_timer", true},
        category = "Take-Back Timer",
    },
    {
        type = ST_STRING,
        name = "takeback_id",
        displayName = "Takeback ID",
        description = "(REQUIRED) Unique ID so the warning objective can be referenced later",
        requirement = {"use_takeback_timer", true},
        category = "Take-Back Timer",
    },
    {
        type = ST_TABLE,
        name = "failure_conditions",
        description = "All conditions to check",
        requirement = {
            operator = "ANY",
            {"can_fail", true},
            {"beat_type", "Rescue"}
        },
        multiplicity = "multiple",
        itemSchema = g_conditions_template,
    },
    {
        type = ST_TABLE,
        name = "completion_conditions",
        description = "All conditions to check",
        multiplicity = "multiple",
        itemSchema = g_conditions_template,
    },
    {
    type = ST_EGROUP,
    name = "mission_entity",
    displayName = "Mission EGroup",
    description = "An egroup containing an entity with mission_entry_point_ext",
    requirement = {"beat_type", "CompleteMission"},
    category = "Objective Complete",
    },
    {
        type = ST_BOOLEAN,
        name = "is_defend_mission",
        displayName = "opt Is Defend Mission",
        description = "Whether to include mission loss in the fail conditions. Leaving this false will exclusively use failure_conditions.",
        default = false,
        requirement = {"beat_type", "CompleteMission"},
        category = "Objective Complete",
    },
    {
        type = ST_STRING,
        name = "popup_spawn_type",
        displayName = "Popup Spawn Type",
        description = "Spawn type for the popup mission",
        category = "Popup Mission Specific",
        options = {"Position", "EGROUP", "SGROUP", "CONTEXT"},
        default = "Position",
        requirement = {"beat_type", "CompletePopupMission"},
    },
    {
        type = ST_MARKER,
        name = "popup_position",
        displayName = "Popup Position",
        description = "Where you want the popup mission to spawn to the closest node",
        category = "Popup Mission Specific",
        requirement = {"popup_spawn_type", "Position"},
    },
    {
        type = ST_SGROUP,
        name = "popup_sgroup",
        displayName = "Popup SGroup",
        description = "Sgroup to where the popup mission should start from",
        category = "Popup Mission Specific",
        requirement = {"popup_spawn_type", "SGROUP"},
    },
    {
        type = ST_EGROUP,
        name = "popup_egroup",
        displayName = "Popup EGroup",
        description = "Egroup to where the popup mission should start from",
        category = "Popup Mission Specific",
        requirement = {"popup_spawn_type", "EGROUP"},
    },
    {
        type = ST_PBG,
        name = "map_data",
        displayName = "Map Data",
        blueprintType = "map_pool",
        description = "Map pool to set for popup mission",
        requirement = {"beat_type", "CompletePopupMission"},
        category = "Popup Mission Specific",
    },
    {
        type = ST_BOOLEAN,
        name = "kill_mission_entity_on_end",
        displayName = "Kill Mission Entity On End",
        requirement = {"beat_type", "CompletePopupMission"},
        default = false,
        category = "Popup Mission Specific",
    },
    {
        type = ST_TABLE,
        name = "target_locations",
        description = "Locations for objective targets",
        multiplicity = "multiple",
        requirement = {"beat_type", "Destroy", "Capture", "Defend", "RepairHealth", "Escort"},
        itemSchema = {
            {
                type = ST_NUMBER,
                name = "priority",
                displayName = "Priority",
                description = "Higher priority will spawn these first",
                default = 1,
            },
            {
                type = ST_STRING,
                name = "target_type",
                displayName = "Target Type",
                description = "How are we deciding what object to use for a target",
                options = {"ebp", "sbp", "existing_group", "CONTEXT"},
                default = "EBP",
                category = "Target",
            },
            {
                type = ST_PBG,
                name = "target_ebp",
                displayName = "Target EBP",
                blueprintType  = "entity",
                description = "Target entity to be spawned",
                category = "Target",
                requirement = {"target_type", "ebp"},
                show = true,
                showAlways = true,
                lockedTo = "location",
            },
            {
                type = ST_PBG,
                name = "target_sbp",
                displayName = "Target SBP",
                blueprintType  = "squad",
                description = "Target squad to be spawned",
                category = "Target",
                requirement = {"target_type", "sbp"},
                show = true,
                showAlways = true,
                lockedTo = "location",
            },
            {
                type = ST_STRING,
                name = "existing_target_type",
                displayName = "Existing Target Type",
                description = "Type of the existing target - SGroup or EGroup",
                options = {"SGroup", "EGroup"},
                default = "SGroup",
                requirement = {"target_type", "existing_group"},
                category = "Target",
            },
            {
                type = ST_EGROUP,
                name = "target_egroup",
                displayName = "Target EGroup",
                description = "Target squad to be spawned",
                category = "Target",
                requirement = 
                {
                        operator = "ANY",
                        {"target_type", "ebp",},
                    {
                        operator = "ALL",
                        {"target_type", "existing_group"},
                        {"existing_target_type", "EGroup"},
                    },
                },
            },
            {
                type = ST_SGROUP,
                name = "target_sgroup",
                displayName = "Target SGroup",
                description = "Target squad to be spawned",
                category = "Target",
                requirement = 
                {
                        operator = "ANY",
                        {"target_type", "sbp",},
                    {
                        operator = "ALL",
                        {"target_type", "existing_group"},
                        {"existing_target_type", "SGroup"},
                    },
                },
            },
            {
                type = ST_PBG,
                name = "upgradePBG",
                displayName = "Upgrade PBG",
                blueprintType  = "upgrade",
                description = "Upgrade to grant the group",
                category = "Target",
                show = true,
                showAlways = true,
                lockedTo = "location",
            },
            {
                type = ST_BOOLEAN,
                name = "split_group",
                displayName = "Split Group",
                description = "Will split each entity/squad in the group to count as separate objective conditions.",
                default = false,
                category = "Target",
                requirement = {"target_type", "existing_group"},
            },
            {
                type = ST_STRING,
                name = "spawn_type",
                displayName = "Spawn Type",
                description = "The unit can spawn at a location, in the hold of a building, or in the hold of a vehicle.",
                options = {"LOCATION", "BUILDING_HOLD", "VEHICLE_HOLD"},
                default = "LOCATION",
                category = "Where to Spawn",
                requirement = {"target_type", "sbp"},
            },
            {
                type = ST_MARKER,
                name = "location",
                description = "Location for objective.",
                colour = "orange",
                hasDirection = true,
				hasRange = true,
                requirement =
                {
                        operator = "ANY",
                        {"target_type", "sbp", "ebp"},
                    {
                        operator = "ALL",
                        {"target_type", "sbp"},
                        {"spawn_type", "LOCATION"},
                    },
                },
            },
            {
                type = ST_MARKER,
                name = "spawn_facing",
                description = "Default facing for entities like bunkers.",
                colour = "orange",
                hasDirection = true,
                requirement =
                {
                        operator = "ANY",
                        {"target_type", "ebp"},
                    {
                        operator = "ALL",
                        {"target_type", "sbp"},
                        {"spawn_type", "LOCATION"},
                    },
                },
            },
            {
                type = ST_EGROUP,
                name = "location_egroup",
                displayName = "Location EGroup",
                description = "Building that the target should spawn in.",
                category = "Where to Spawn",
                requirement = {"spawn_type", "BUILDING_HOLD"},
            },
            {
                type = ST_SGROUP,
                name = "location_sgroup",
                displayName = "Location SGroup",
                description = "Vehicle that the target should spawn in.",
                category = "Where to Spawn",
                requirement = {"spawn_type", "VEHICLE_HOLD"},
            },
            {
                type = ST_PLAYER,
                name = "target_owner",
                displayName = "Target Owner",
                description = "Set the player owner of the target",
                requirement = {"target_type", "sbp", "ebp"},
                category = "Target",
                allowWorld = true,
                default = "Player2",
            },
            {
                type = ST_NUMBER,
                name = "target_health_percent",
                displayName = "Target Health Percentage",
                description = "Target squad or entity's health percentage.  Min 0.0, Max 1",
                default = 1,
                integer = false,
                min = 0,
                max = 1,
                category = "Modifiers",
                requirement = {"target_type", "sbp", "ebp"},
            },
            {
                type = ST_BOOLEAN,
                name = "invulnerable",
                displayName = "Invulnerability?",
                description = "Target is invulnerable",
                default = false,
                category = "Modifiers",
                requirement = {"target_type", "sbp", "ebp", "existing_group"},
            },
            {
                type = ST_NUMBER,
                name = "damage_received_modifier",
                displayName = "Damage Received Modifier",
                description = "Target squad or entity's damage received modifier (i.e. 0.5 = 50%)",
                requirement = {"target_type", "sbp", "ebp", "existing_group"},
                default = nil,
                integer = false,
                category = "Modifiers",
            },
            {
                type = ST_TABLE,
                name = "escort_path",
                description = "Series of markers for the vip to follow",
                multiplicity = "multiple",
                itemSchema = {
                    {
                        type = ST_MARKER,
                        name = "location",
                        description = "A point along the path for the vip to follow.",
                        colour = "green",
                        hasDirection = true,
                    },
                },
            },
        },
    },
    {
        type = ST_STRING,
        name = "construct_type",
        displayName = "Construct Type",
        description = "Is it a squad, an entity, or an upgrade",
        options = {"ebp", "sbp", "upgrade bp"},
        default = "ebp",
        requirement = {"beat_type", "Construct"},
        category = "Construction Requirements",
    },
    {
        type = ST_STRING,
        name = "upgrade_type",
        displayName = "Upgrade Type",
        description = "Is it on a squad, an entity, or the player",
        options = {"Entity", "Squad", "Player"},
        default = "Squad",
        requirement = {
            operator = "ALL",
            {"beat_type", "Construct"},
            {"construct_type", "upgrade bp"},
        },
        category = "Construction Requirements",
    },
    {
        type = ST_PBG,
        name = "construct_ebp",
        displayName = "Entity Blueprint",
        blueprintType  = "entity",
        description = "Entity to be constructed",
        category = "Construction Requirements",
        requirement = {"construct_type", "ebp"},
    },
    {
        type = ST_PBG,
        name = "construct_sbp",
        displayName = "Squad Blueprint",
        blueprintType  = "squad",
        description = "Squad to be constructed",
        category = "Construction Requirements",
        requirement = {"construct_type", "sbp"},
    },
    {
        type = ST_PBG,
        name = "construct_upg",
        displayName = "Upgrade Blueprint",
        blueprintType  = "upgrade",
        description = "Upgrade to be constructed",
        category = "Construction Requirements",
        requirement = {"construct_type", "upgrade bp"},
    },
    {
        type = ST_EGROUP,
        name = "opt_source_egroup",
        displayName = "Opt Source EGroup",
        description = "EGroup of entities to be potentially upgraded",
        category = "Construction Requirements",
        requirement = {"construct_type", "upgrade bp"},
    },
    {
        type = ST_SGROUP,
        name = "opt_source_sgroup",
        displayName = "Opt Source SGroup",
        description = "SGroup of squads to be potentially upgraded",
        category = "Construction Requirements",
        requirement = {"construct_type", "upgrade bp"},
    },
    {
        type = ST_EGROUP,
        name = "opt_dest_egroup",
        displayName = "Opt Constructed EGroup",
        description = "egroup to put entities in when constructed/upgraded",
        category = "Construction Target",
        requirement = {"construct_type", "ebp", "upgrade bp"},
    },
    {
        type = ST_SGROUP,
        name = "opt_dest_sgroup",
        displayName = "Opt Constructed SGroup",
        description = "sgroup to put entities in when constructed/upgraded",
        category = "Construction Target",
        requirement = {"construct_type", "sbp", "upgrade bp"},
    },
    {
        type = ST_TABLE,
        name = "construct_locations",
        multiplicity = "multiple",
        requirement = {"require_locations", true},
        itemSchema = {
            {
                type = ST_BOOLEAN,
                displayName = "Require Location?",
                name = "require_location",
                description = "Require the construction to occur at a particular location (tolerance can be set with the marker radius)",
                category = "Construction Requirements",
                default = false,
            },
            {
                type = ST_BOOLEAN,
                name = "require_facing",
                displayName = "Require Facing?",
                description = "Must the construction be oriented towards a point? (ONLY WORKS FOR ENTITIES)",
                default = false,
                category = "Construction Requirements",
            },
            {
                type = ST_MARKER,
                name = "location",
                description = "Location they must be at",
                requirement = {"require_location", true},
				hasRange = true,
                colour = "orange",
            },
            {
                type = ST_MARKER,
                name = "facing",
                description = "Location they must be facing",
                requirement = {"require_facing", true},
                colour = "orange",
            },
            {
                type = ST_NUMBER,
                name = "facing_tolerance_deg",
                displayName = "Facing Tolerance (Degrees)",
                description = "How tolerant are we of facing in degrees? (0 is exact, 180 is any angle)",
                requirement = {"require_facing", true},
                default = 0,
                category = "Construction Requirements",
            },
            {
                type = ST_NUMBER,
                name = "count",
                displayName = "Construct Count",
                description = "How many should be constructed (Does not require units to remain alive after construction)",
                category = "Construction Requirements",
                default = 1,
            },
        },
    },
    {
        type = ST_BOOLEAN,
        displayName = "Require Locations?",
        name = "require_locations",
        description = "Require the construction to occur at particular locations (radius possible) or facing particular directions?",
        category = "Construction Requirements",
        requirement = {"beat_type", "Construct"},
        default = false,
    },
    {
        type = ST_NUMBER,
        name = "count",
        displayName = "Construct Count",
        description = "How many should be constructed (Does not require units to remain alive after construction)",
        category = "Construction Requirements",
        default = 1,
        requirement = {
            operator = "ALL",
            {"beat_type", "Construct"},
            {"require_locations", false},
        },
    },
    {
        type = ST_PLAYER,
        name = "constructing_player",
        displayName = "Constructing Player",
        description = "Which player should perform the construction",
        category = "Construction Requirements",
        default = "Player1",
        requirement = {"beat_type", "Construct"},
    },
    {
        type = ST_BOOLEAN,
        name = "include_existing",
        displayName = "Include Existing?",
        description = "Should existing entities/squads/upgrades count",
        category = "Construction Requirements",
        default = true,
        requirement = {"beat_type", "Construct"},
    },
    {
        type = ST_TABLE,
        name = "area_locations",
        description = "Locations for objectives",
        multiplicity = "multiple",
        requirement = {"beat_type", "ClearArea", "PrepareCountdown", "Escort"},
        itemSchema = {
            {
                type = ST_MARKER,
                name = "location",
                description = "Location for objective",
				hasRange = true,
                colour = "orange",
            },
            {
                type = ST_NUMBER,
                name = "amount_to_escort",
                displayName = "Amount To Escort",
                description = "-ESCORT ONLY- The number of escort units that need to be at this location for it to complete.",
                default = 1,
                category = "Escort",
            },
            {
                type = ST_SGROUP,
                name = "sgroup_to_escort",
                displayName = "SGroup To Escort",
                description = "-ESCORT ONLY- Only check for these units at this location - otherwise it will check for ANY escort units",
                category = "Escort",
            },
        },
    },
    {
        type = ST_TABLE,
        name = "ui_callouts",
        description = "When and where ui callouts should appear for this objective.",
        multiplicity = "multiple",
        itemSchema = {
            {
                type = ST_STRING,
                name = "start_callout",
                description = "What causes this callout to appear.",
                options = {"Immediately", "Proximity", "Condition"},
                default = "Immediately",
                category = "General",
            },
            {
                type = ST_STRING,
                name = "target",
                description = "Where should this callout appear. Target Locations and Groups will spawn one for EACH item.",
                options = {"Target Locations", "Group", "Marker", "Context"},
                default = "Target Locations",
                category = "General",
            },
            {
                type = ST_STRING,
                name = "end_callout",
                description = "What causes this callout to dissapear. (Death means the target squad/entity has 0 HP remaining)",
                options = {"Objective Complete", "Condition", "Death"},
                default = "Objective Complete",
                category = "General",
            },
			{
				type = ST_STRING,
				name = "icon_name",
				description = "File path of the icon",
				default = "",
				category = "Options",
			},
            {
                type = ST_STRING,
                name = "text",
                description = "What the callout should say next to the arrow.",
                default = "",
                editor = 
                {
                    name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
                },
                category = "Options",
            },
            {
                type = ST_NUMBER,
                name = "offset",
                description = "What kind of offset should this ui callout have. Positive numbers raises it higher in world.",
                default = 0,
                category = "Options",
            },
            {
                type = ST_STRING,
                name = "ui_template",
                description = "How the callout should look.",
                options = {"PrimaryObjectiveDataTemplate", "SecondaryObjectiveDataTemplate", "BonusObjectiveDataTemplate", "ThreatGroupDataTemplate", "Debug", "InfoObjectiveDataTemplate", "TutorialDataTemplate", "ObjectiveMarkerDataTemplate"},
                default = "PrimaryObjectiveDataTemplate",
                category = "Options",
            },
			{
				type = ST_STRING,
				name = "action_type",
				description = "The DCA action to spawn with the hint point.",
				options = HPAT_NAMES,
				default = "None",
				category = "Options",
			},
			{
				type = ST_BOOLEAN,
				name = "world_arrow",
				displayName = "Use World Arrow",
				description = "Do you want a world arrow?",
				default = true,
				category = "Options",
			},
			{
				type = ST_BOOLEAN,
				name = "add_blip_area",
				displayName = "Add Minimap Blip Area",
				description = "Do you want to add a circle of a given radius to the minimap blip?",
				default = false,
				category = "Options",
			},
			{
				type = ST_NUMBER,
				name = "blip_radius",
				displayName = "Minimap Blip Radius Override",
				description = "When this is a positive number, it will be used for the radius of the minimap blip."..
				" Otherwise the radius will be extracted from the target marker if possible.",
				requirement = {"add_blip_area", true},
				default = -1,
				category = "Options",
			},
			{
				type = ST_BOOLEAN,
				name = "add_reticule",
				displayName = "Add Ground Reticule",
				description = "Do you want to add a circular reticule (ground overlay) centred on this location?"..
				"\n\nNOTE: If this hint point is using the ObjectiveMarkerDataTemplate, the reticule will only show when the hint point is hovered.",
				default = false,
				category = "Options",
			},
			{
				type = ST_NUMBER,
				name = "reticule_radius",
				displayName = "Ground Reticule Radius Override",
				description = "When this is a positive number, it will be used for the radius of the ground reticule."..
				" Otherwise the radius will be extracted from the target marker if possible.",
				requirement = {"add_reticule", true},
				default = -1,
				category = "Options",
			},
            {
                type = ST_NUMBER,
                name = "proximity_trigger",
                description = "At what range the ui callout should appear. If the target is a marker it will default to use the marker's range if it has one.",
                requirement = {"start_callout", "Proximity"},
                default = 1,
                category = "Options",
            },
            {
                type = ST_EGROUP,
                name = "target_egroup",
                description = "UI callout will be spawned on each member of the egroup.",
                requirement = {"target", "Group"},
                category = "Options",
            },
            {
                type = ST_SGROUP,
                name = "target_sgroup",
                description = "UI callout will be spawned on each member of the sgroup.",
                requirement = {"target", "Group"},
                category = "Options",
            },
            {
                type = ST_TABLE,
                name = "start_conditions",
                description = "All conditions to check",
                requirement = {"start_callout", "Condition"},
                multiplicity = "multiple",
                itemSchema = g_conditions_template,
            },
            {
                type = ST_TABLE,
                name = "end_conditions",
                description = "All conditions to check",
                requirement = {"end_callout", "Condition"},
                multiplicity = "multiple",
                itemSchema = g_conditions_template,
            },
            {
                type = ST_TABLE,
                name = "markers",
                description = "The markers to spawn ui callouts at",
                requirement = {"target", "Marker"},
                multiplicity = "multiple",
                itemSchema = {
                    {
                        type = ST_MARKER,
                        name = "location",
                        description = "Location for objective",
                        colour = "orange",
			hasRange = true,
                    },
                },
            },
        },
    },
    {
        type = ST_TABLE,
        name = "on_prestart",
        displayName = "On PreStart",
        description = "Actions triggered when this objective inits",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_TABLE,
        name = "on_start",
        displayName = "On Start",
        description = "Conditions and Actions triggered when this objective starts",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_TABLE,
        name = "on_precomplete",
        displayName = "On PreComplete",
        description = "Playbill triggered right when this objective completes. Before dialogue and objective popups.",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_TABLE,
        name = "on_complete",
        displayName = "On Complete",
        description = "Actions triggered when this objective completes",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_TABLE,
        name = "on_preexpire",
        displayName = "On PreExpire",
        description = "Playbill triggered right when this objective expires. Before dialogue and objective popups.",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_TABLE,
        name = "on_prefail",
        displayName = "On PreFail",
        description = "Playbill triggered right when this objective fails. Before dialogue and objective popups.",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_TABLE,
        name = "on_fail",
        displayName = "On Fail",
        description = "Actions triggered if this objective fails",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_TABLE,
        name = "on_turn_expire",
        displayName = "On Expire",
        description = "Actions triggered if this objective expires",
        multiplicity = "multiple",
        requirement = {"expires_after_turns", true},
        itemSchema = objective_stage_callback_schema,
    },
	{
        type = ST_TABLE,
        name = "on_player_turn_start",
        displayName = "On Player Turn Start",
        description = "Actions triggered at the start of player turn",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
	{
        type = ST_TABLE,
        name = "on_player_turn_end",
        displayName = "On Player Turn End",
        description = "Actions triggered at the end of player turn",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
	{
        type = ST_TABLE,
        name = "on_objective_end",
        displayName = "On Objective End",
        description = "Actions triggered if this objective ends",
        multiplicity = "multiple",
        itemSchema = objective_stage_callback_schema,
    },
    {
        type = ST_BOOLEAN,
        name = "enable_wait_on_end",
        displayName = "Enable Wait on End",
        description = "Will wait for all the on_complete/on_end playbills to finish based on a WAIT action specified before proceeding to the next objective",
        default = false,
        category = "General",
    },
    {
        type = ST_MARKER,
        name = "rescue_area",
        description = "Area in which the rescue will be shown in the objectives pane",
        colour = "orange",
		hasRange = true,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_TABLE,
        multiplicity = "multiple",
        name = "rescuees",
        displayName = "Rescuees",
        requirement = {"beat_type", "Rescue"},
        description = "Info for the squads needing to be rescued",
        itemSchema = {
            {
                type = ST_PBG,
                blueprintType ="squad",
                name = "sbp",
                displayName = "Squad Blueprint",
                description = "Blueprint for the rescuee squad",
            },
            {
                type = ST_PBG,
                blueprintType ="upgrade",
                name = "upgrade_pbg",
                displayName = "Squad Upgrade",
                description = "Upgrade for the rescuee squad",
            },
			{
				type = ST_BOOLEAN,
				name = "lock_squads",
				displayName = "Lock Squads?",
				default = false,
				description = "Should the squads be locked when they're spawned?",
			},
			{
				type = ST_SGROUP,
				name = "sgroup",
				displayName = "SGroup",
				description = "SGroup to put this specific squad into",
			},
            {
                type = ST_NUMBER,
                name = "loadout_count",
                displayName = "Loadout Count",
                description = "Number of units in each of these squads",
            },
            {
                type = ST_NUMBER,
                name = "squad_count",
                displayName = "Squad Count",
                description = "Number of these squads",
            },
            {
                type = ST_STRING,
                name ="spawn_type",
                displayName = "Rescuee Spawn Type",
                description = "Should they be spawned at a location, in a building, or in a vehicle?",
                category = "Where to Spawn",
                options = {
                    "Location", "Building", "Vehicle",
                },
            },
            {
                type = ST_MARKER,
                name = "location",
                displayName = "Rescuee Location",
                description = "Location to spawn the rescuees",
                requirement = {"spawn_type", "Location"},
            },
            {
                type = ST_MARKER,
                name = "facing",
                displayName = "Rescuee Facing",
                description = "Location to face the rescuees at",
                requirement = {"spawn_type", "Location"},
            },
            {
                type = ST_EGROUP,
                name = "building_egroup",
                displayName = "Building EGroup",
                description = "Building that the rescuees should spawn in.",
                category = "Where to Spawn",
                requirement = {"spawn_type", "Building"},
            },
            {
                type = ST_SGROUP,
                name = "vehicle_sgroup",
                displayName = "Vehicle SGroup",
                description = "Vehicle that the rescuees should spawn in.",
                category = "Where to Spawn",
                requirement = {"spawn_type", "Vehicle"},
            },
            {
                type = ST_NUMBER,
                name = "entity_armor_multiplier",
                displayName = "Building/Vehicle Armor Multiplier",
                description = "Multiplier for the armor of the building/vehicle the units are in",
                default = 1,
				category = "Modifiers",
                requirement = {
                    operator = "ANY",
                    {"spawn_type", "Building"},
                    {"spawn_type", "Vehicle"},
                },
            },
            {
                type = ST_NUMBER,
                name = "entity_received_multiplier",
                displayName = "Building/Vehicle Damage Received Multiplier",
                description = "Multiplier for the Damage Received by the building/vehicle the units are in",
                default = 1,
				category = "Modifiers",
                requirement = {
                    operator = "ANY",
                    {"spawn_type", "Building"},
                    {"spawn_type", "Vehicle"},
                },
            },
            {
                type = ST_NUMBER,
                name = "vehicle_damage_multiplier",
                displayName = "Vehicle Damage Multiplier",
                description = "Multiplier for the damage dealt by the vehicle",
                default = 1,
				category = "Modifiers",
                requirement = {"spawn_type", "Vehicle"},
            },
            {
                type = ST_NUMBER,
                name = "in_range_armor_multiplier",
                displayName = "In Range Armor Multiplier",
                description = "Armor Multiplier to apply to the Building/Vehicle once the player has entered the area (ON TOP OF THE OTHER MULTIPLIER).",
                default = 1,
				category = "Modifiers",
                requirement = {
                    operator = "ANY",
                    {"spawn_type", "Building"},
                    {"spawn_type", "Vehicle"},
                },
            },
            {
                type = ST_NUMBER,
                name = "in_range_received_multiplier",
                displayName = "In Range Damage Received Multiplier",
                description = "Damage multiplier to apply to the damage dealt to the Building/Vehicle once the player has entered the area (ON TOP OF THE OTHER MULTIPLIER).",
                default = 1,
				category = "Modifiers",
                requirement = {
                    operator = "ANY",
                    {"spawn_type", "Building"},
                    {"spawn_type", "Vehicle"},
                },
            },
            {
                type = ST_NUMBER,
                name = "in_range_damage_multiplier",
                displayName = "In Range Damage Multiplier",
                description = "Damage multiplier to apply to the damage dealt by the vehicle once the player has entered the area (ON TOP OF THE OTHER MULTIPLIER).",
                default = 1,
				category = "Modifiers",
                requirement = {"spawn_type", "Vehicle"},
            },
        },
    },
    {
        type = ST_TABLE,
        multiplicity = "multiple",
        name = "enemies",
        displayName = "Enemies",
        requirement = {"beat_type", "Rescue"},
        description = "Info for the attacking enemy squads",
        itemSchema = {
            {
                type = ST_PBG,
                blueprintType ="squad",
                name = "sbp",
                displayName = "Squad Blueprint",
                description = "Blueprint for the enemy squad",
            },
            {
                type = ST_PBG,
                blueprintType ="upgrade",
                name = "upgrade_pbg",
                displayName = "Squad Upgrade",
                description = "Upgrade for the enemy squad",
            },
            {
                type = ST_NUMBER,
                name = "loadout_count",
                displayName = "Loadout Count",
                description = "Number of units in each of these squads",
            },
            {
                type = ST_NUMBER,
                name = "squad_count",
                displayName = "Squad Count",
                description = "Number of these squads",
            },
			{
				type = ST_BOOLEAN,
				name = "lock_squads",
				displayName = "Lock Squads?",
				default = false,
				description = "Should the squads be locked when they're spawned?",
			},
            {
                type = ST_MARKER,
                name = "location",
                displayName = "Enemy Location",
                description = "Location to spawn the squad(s)",
            },
            {
                type = ST_MARKER,
                name = "facing",
                displayName = "Enemy Facing",
                description = "Location to face the squad(s) at",
            },
        },
    },
    {
        type = ST_PLAYER,
        name = "rescuee_owner",
        displayName = "Rescuee Squad Owner",
        category = "Rescuee Details",
        description = "Which player should own the rescuees?",
        default = "Player1",
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_SGROUP,
        name = "opt_rescuee_sgroup",
        displayName = "opt Rescuee SGroup",
        category = "Rescuee Details",
        description = "(Optional) SGroup to put all spawned rescuees into.",
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_NUMBER,
        name = "min_time",
        displayName = "Min Objective Time (s)",
        category = "Objective",
        description = "Minimum time before the rescuees die in seconds. Will be strictly enforced using invulnerability.",
        default = 0,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_BOOLEAN,
        name = "end_inv_in_area",
        displayName = "Remove Min Time in Area",
        category = "Objective",
        description = "Once the player enters the rescue area, should we remove the strict minimum time enforced by Min Objective Time?",
        default = false,
        requirement = {
            operator = "ALL",
            {"beat_type", "Rescue"},
            {
                operator = "NOT",
                {"min_time", 0}
            }
        }
    },
    {
        type = ST_NUMBER,
        name = "rescuee_armor_multiplier",
        displayName = "Rescuee Armor Multiplier",
        description = "Multiplier to apply to the armor of the rescuee.",
        category = "Rescuee Details",
        default = 1,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_NUMBER,
        name = "rescuee_received_multiplier",
        displayName = "Rescuee Damage Received Multiplier",
        description = "Multiplier to apply to the damage received by the rescuee.",
        category = "Rescuee Details",
        default = 1,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_NUMBER,
        name = "rescuee_damage_multiplier",
        displayName = "Rescuee Damage Multiplier",
        description = "Damage multiplier to apply to the damage dealt by the rescuee.",
        category = "Rescuee Details",
        default = 1,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_NUMBER,
        name = "in_range_armor_multiplier",
        displayName = "In Range Armor Multiplier",
        description = "Armor multiplier to apply to the rescuee once the player has entered the area (ON TOP OF THE OTHER MULTIPLIER).",
        category = "Rescuee Details",
        default = 1,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_NUMBER,
        name = "in_range_received_multiplier",
        displayName = "In Range Damage Received Multiplier",
        description = "Damage multiplier to apply to the damage dealt to the rescuee once the player has entered the area (ON TOP OF THE OTHER MULTIPLIER).",
        category = "Rescuee Details",
        default = 1,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_NUMBER,
        name = "in_range_damage_multiplier",
        displayName = "In Range Damage Multiplier",
        description = "Damage multiplier to apply to the damage dealt by the rescuee once the player has entered the area (ON TOP OF THE OTHER MULTIPLIER).",
        category = "Rescuee Details",
        default = 1,
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_PLAYER,
        name = "enemy_owner",
        displayName = "Enemy Squad Owner",
        category = "Rescue Enemy Details",
        description = "Which player should own the enemies?",
        default = "Player2",
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_SGROUP,
        name = "opt_enemy_sgroup",
        displayName = "opt Enemy SGroup",
        category = "Rescue Enemy Details",
        description = "(Optional) SGroup to put all spawned enemies into.",
        requirement = {"beat_type", "Rescue"},
    },
    {
        type = ST_NUMBER,
        name = "min_rescued",
        displayName = "Minimum Number Rescued",
        description = "The minimum number of squads that need to be rescued for a success; -1 means they must all survive",
        category = "Objective",
        requirement = {"beat_type", "Rescue"},
        default = 1,
    },
    {
        type = ST_STRING,
        name = "success_type",
        displayName = "Success Type",
        description = "Is the beat completion in terms of percentage or amount remaining?",
        category = "Objective",
        requirement = {"beat_type", "Destroy"},
        options = {"Amount Remaining", "Percentage"},
        default = "Amount Remaining"
    },
    {
        type = ST_NUMBER,
        name = "percentage_killed",
        displayName = "Percentage Killed",
        description = "Percentage that must be killed to complete beat (0.0-1.0)",
        requirement = {
            operator = "ALL",
            {"beat_type", "Destroy"},
            {"success_type", "Percentage"},
        },
        category = "Objective",
        default = 1,
        integer = false,
        min = 0,
        max = 1,
    },
    {
        type = ST_NUMBER,
        name = "max_remaining",
        displayName = "Maximum Enemy Remaining",
        description = "The maximum number of enemy squads that can be remaining for a success",
        category = "Objective",
        requirement = {
            operator = "ANY",
            {"beat_type", "Rescue"},
            {
                operator = "ALL",
                {"beat_type", "Destroy"},
                {"success_type", "Amount Remaining"},
            }
        },
        default = 0,
    },
    {
        type = ST_STRING,
        name = "debug_title",
        displayName = "Debug Title",
        description = "Title to display in the cheat menu for the objective.",
        category = "Debug",
    },
    {
        type = ST_BOOLEAN,
        name = "has_debug_actions",
        displayName = "Has Debug Actions?",
        description = "Are there actions that this objective should run upon being started?",
        category = "Debug",
    },
    {
        type = ST_TABLE,
        name = "on_debug_skip_start",
        multiplicity = "multiple",
        requirement = {"has_debug_actions", true},
        itemSchema = {
            {
                type = ST_PREFAB,
                name = "playbill",
                description = "Linked playbill prefab",
                default = "",
            },
            {
                type = ST_STRING,
                name = "scenref_playbill_key",
                description = "Name of a playbill that should start when this prefab's objectives are finished. Only use for referencing a scenref playbill from a scenario.",
                default = "",
            },
        },
    },
    {
        type = ST_NUMBER,
        name = "debug_radius",
        displayName = "Debug Clear Radius",
        description = "Radius around the capture point(s) to clear",
        default = 10,
        requirement = {"beat_type", "Capture"},
    },
	{
		type = ST_STRING,
		name = "completion_condition_check_type",
		displayName = "Completion Condition Check Type",
		description = "Objective Completion checks can be limited to PlayerTurnStart/EndScripted phase, or every few seconds. Defaults to checking the completion conditions every Objective_Manager update.",
		requirement = {"can_Complete", true},
		options = {"Default", "TurnStart", "TurnEnd", "Timed"},
		default = "Default",
		category = "Objective Complete",
	},
	{
		type = ST_NUMBER,
		name = "completion_time_interval",
		displayName = "Completion Time Interval",
		description = "Time interval between checks",
		requirement = {"completion_condition_check_type", "Timed"},
		category = "Objective Complete",
		default = 1,
	},
	{
		type = ST_STRING,
		name = "failure_condition_check_type",
		displayName = "Failure Condition Check Type",
		description = "Objective Failure checks can be limited to PlayerTurnStart/EndScripted phase, or every few seconds. Defaults to checking the failure conditions every Objective_Manager update.",
		requirement = {"can_fail", true},
		options = {"Default", "TurnStart", "TurnEnd", "Timed"},
		default = "Default",
		category = "Objective Fail",
	},
	{
		type = ST_NUMBER,
		name = "failure_time_interval",
		displayName = "Failure Check Time Interval",
		description = "Time interval between checks",
		requirement = {"failure_condition_check_type", "Timed"},
		category = "Objective Fail",
		default = 1,
	},
}

-- Extra elements that the sub objective schema has
local objectivesSubElements = {
    {
        type = ST_STRING,
        name = "beat_type",
        displayName = "Beat Type",
        description = "The type of objective this is.",
        options = subObjectiveOptions,
        default = "Destroy",
        category = "General",
    },
    {
        type = ST_STRING,
        name = "veterancy_reward_type",
        displayName = "Completion Veterancy Reward",
        description = "The amount of veterancy awarded to the player companies upon Campaign objective completion",
        options = objectiveVeterancyRewardOptions,
        default = "None",
        category = "General",
    },
    {
        type = ST_STRING,
        name = "start_check",
        displayName = "Start Check",
        description = "Whether the objective should start immediately or should it wait for conditions to be met.",
        options = {"Immediately", "Condition"},
        default = "Immediately",
        category = "Objective Start",
    },
    {
        type = ST_TABLE,
        name = "start_conditions",
        description = "All conditions to check before starting the objective",
        multiplicity = "multiple",
        itemSchema = g_conditions_template,
        category = "Objective Start",
        requirement = {"start_check", "Condition"},
    },
    {
        type = ST_BOOLEAN,
        name = "hide_on_finish",
        displayName = "Hide on Finish",
        description = "Hide the Subobjective UI once it is finished",
        default = false,
        category = "General",
    },
}

-- Extra elements that top level objectives have
local objectivesSuperElements = {
	{
		type = ST_STRING,
		name = "beat_type",
		displayName = "Beat Type",
		description = "The type of objective this is.",
		options = superObjectiveOptions,
		default = "SubObjective",
		category = "General",
	},
	{
		type = ST_STRING,
		name = "veterancy_reward_type",
		displayName = "Completion Veterancy Reward",
		description = "The amount of veterancy awarded to the player companies upon Campaign objective completion",
		options = objectiveVeterancyRewardOptions,
		default = "None",
		category = "General",
	},
	{
		type = ST_BOOLEAN,
		name = "allow_complete_or_fail",
		displayName = "Allow Complete OR Fail?",
		description = "If this is set to true, the completion condition will be that all subobjectives must be completed OR failed, and there will be no added failure conditions.",
		default = false,
		requirement = {"beat_type", "SubObjective"},
		category = "Objective Complete",
	},
	{
		type = ST_TABLE,
		name = "sub_objectives",
		description = "Optional sub objectives to appear parented to the primary objective.",
		multiplicity = "multiple",
		requirement = {"beat_type", "SubObjective"},
		itemSchema = Table_Concatenate(objectivesCommonElements, objectivesSubElements),
	},
	{
		type = ST_STRING,
		name = "pre_restart_function",
		description = "Function with signature: [(objectiveTable, prefabData, saveInfo) -> bool] which runs before restart on load of this objective. It should return true to skip restarting the objective through the normal flow.",
		default = "",
		category = "Save/Load"
	},
}

-- Top level template
g_objectives_template = Table_Concatenate(objectivesCommonElements, objectivesSuperElements)