import("ui/hpat_enum_util.scar")
import("table.scar")
import("prefabs/templates/dynamic_narrative_node_names_template.scar")
import("prefabs/templates/soldier_story_names_template.scar")
import("narrative/dynamic_narrative_variables.scar")

--[[

This file provides schema subtables for use in multiple locations within prefab schemas

Provided Global Variables:
==========================

- g_action_type_base_list: The base list of simple action names that don't contain require any sub-actions.
- g_playbills_actions_template_base: The schema containing the set of fields required by the base actions
- g_playbills_actions_base_template: The final schema that can be embedded in another prefab to provide a
  list of base actions to execute. Usually this is used within additional actions, rather than directly by
  other prefabs as you can use actions_template.scar's full template to get access to additional actions.
  
Explanation of Local Variables:
===============================
- action_type_base: Base action type field that selects an action name from the base list of actions

--]]

g_action_type_base_list = {
	{value="None", description="Doesnothing"},
	"MissionComplete",
	"MissionFail",
	"MultiplayerComplete",
	"Loop",
	"CallScarFunction",
	"MoveUnit",
	"StartTimer",
	"Construct",
	"UseAbility",
	"Attack",
	"AttackMove",
	"SpawnSquads",
	"SpawnEntities",
	"DeSpawn",
	"PlayerSetResource",
	"PlayerSetResourceCap",
	"PlayerSetPopulationCap",
	"SpawnMarkerFX",
	"PlayAnimation",
	"PlayMusicStinger",
	"PlaySpeech",
	"StartIntel",
	"MaxSpeed",
	"ObjectiveStartTimer",
	"ObjectivePauseTimer",
	"ObjectiveUnPauseTimer",
	"ObjectiveStopTimer",
	"LaunchCustomMission",
	"StartObjective",
	"CompleteObjective",
	"StopObjective",
	"ObjectiveShowTitle",
	"FailObjective",
	"ObjectiveAddHealthBar",
	"ObjectiveRemoveHealthBar",
	"ObjectiveSetCounter",
	"ObjectiveIncreaseCounter",
	"ObjectiveStopCounter",
	"PlayerInstantUpgrade",
	"UpgradeCommand",
	"SetInvulnerable",
	"SetDamageReceivedModifier",
	"SetOwner",
	"InstantCaptureStrategicPoint",
	"BookmarkTime",
	"LaunchPrefabOrPlaybill",
	"StopPrefabOrPlaybill",
	"AddEGroupToGroup",
	"AddSGroupToGroup",
	"SetLedger",
	"CreateWarningObjective",
	"Retreat",
	"ClearSGroup",
	"AddObjHintpointTo",
	"SpawnRandomTarget",
	"RemoveObjHintpoint",
	"SetNarrativeInfluenceValueToUse",
	"SetNarrativeActionEnabled",
	"ChangePartisanHubRelationPoint",
	"SetPartisanHubActivated",
	"SetInteractionStage",
	"FOWReveal",
	"FadeToBlack",
	"FadeFromBlack",
	"SetAbilityAvailability",
	"PlayerAddAbility",
	"WorldEnableSharedLineOfSight",
	"ReSpawn",
	"SGroupSetAutoTargetting",
	"LoadAtmosphere",
	"Wait",
	"UIFlashAbilityButton",
	"UIFireEventCue",
	"UIFireMinimapBlip",
	"UIRemoveMinimapBlip",
	"UIShowInfoPanel",
	"FadeSequence",
	"EventDelay",
	"CameraSplinePan",
	"CameraFocusEvent",
	"SGroupWarpTo",
	"ModifyAccuracy",
	"ResourcesDisable",
	"NISStart",
	"NISEnd",
	"ResourcesEnable",
	"ModifyScatter",
	"AILockSquads",
	"AIUnlockSquads",
	"UIAllTerritoryHide",
	"UIAllTerritoryShow",
	"SetSelectable",
	"SetTargetingType",
	"FOWUnReveal",
	"GameTextTitleFade",
	"ObjectiveSetCanFail",
	"ObjectiveSetEnableTitlecard",
	"StartPrimaryObjectiveOrPlaybill",
	"Garrison",
	"SquadPath",
	"AIPushMilitaryTargetScoreMultiplier",
	"AIPopMilitaryTargetScoreMultiplier",
	"AIPushUnitTypeTargetScoreMultiplier",
	"AIPopUnitTypeTargetScoreMultiplier",
	"AISetPlayerStrategy",
	"AIPrefabSetCanReassign",
	"PlayCaptureCamera",
	"MetamapLinkAttachmentToCompany",
	"PlayCampaignBattleSitrep",
	"AIPrefabChangeIntents",
	"AIClearSoloSquads",
	"SpawnLiveMunition",
	"GroupKill",
	"KillNeutralEntitiesNearPosition",
	"ApplyModifier",
	"RemoveModifier",
	"AISetMarkerActive",
	"AISetPersonality",
	"AISetLuaPersonalityFile",
	"SetHealth",
	"AIPushMilitaryTargetEGroupScore",
	"AIPopMilitaryTargetEGroupScore",
	"FillSGroupFromMarker",
	"FillSGroupWithPlayerSquads",
	"SoldierStoriesClear",
	"SoldierStoriesSetNextSkirmishStory",
	"SoldierStoriesSetNextMissionStory",
	"SetNarrativeVariable",
	"ConvertToFieldSupport",
	"SetInterruptingAction",
	"SetMusic",
	"ThreatArrowAdd",
	"EnableEntityExtension",
	"WaitForAnyEventComplete",
	"SetStateModelProperty",
	"CameraUnFocus",
	"SetCrushMode",
}

local action_type_base =
{
	{
		type = ST_STRING,
		name = "action",
		displayName = "Action",
		description = "Actions triggered once above actions are met",
		options = g_action_type_base_list,
		default = "None",
		category = "Action",
	}
}

g_playbills_actions_template_base = 
{
	
	------------------------
	-- CALL PLAYBILL
	
	{
		type = ST_PREFAB,
		name = "prefab_playbill",
		displayName = "Prefab",
		description = "Linked prefab or playbill to call",
		requirement = {"action", "LaunchPrefabOrPlaybill", "StopPrefabOrPlaybill", "AIPrefabSetCanReassign", "AIPrefabChangeIntents"},
		default = "",
	},
	
	
	-----------------------
	--CALL FUNCTION--
	{
		type = ST_STRING,
		name = "function_name",
		displayName = "Function Name",
		description = "Calls a function of this name",
		requirement = {"action", "CallScarFunction", "FadeSequence"},
		category = "Options",
	},
	----------------------
	--Shared Properties
	----------------------	
	{
		type = ST_STRING,
		name = "grouptype",
		displayName = "Group Type",
		description = "Type of group SGroup or EGroup",
		requirement =
		{
			operator = "ANY",
			{"action", "SetSelectable", "SetTargetingType","EnableEntityExtension"},
			{
				operator = "ALL",
				{"action", "SetHealth"},
				{"use_context_as_target", false}
			}
		},
		options = {"SGROUP", "EGROUP"},
		default = "SGROUP",
		category = "Options",
	},
	----------------------
	--Attacker+Target
	----------------------
	{
		type = ST_STRING,
		name = "attacker_type",
		displayName = "Attacker Group Type",
		description = "Type of attacker - SGroup or EGroup",
		requirement = {"action", "Attack"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Attacker",
	},
	{
		type = ST_EGROUP,
		name = "attacker_egroup",
		displayName = "Attacker EGroup",
		description = "EGroup of the attacker",
		requirement = 
		{
			operator = "ALL",
			{"action", "Attack"},
			{"attacker_type", "EGroup"},
		},
		category = "Attacker",
	},
	{
		type = ST_SGROUP,
		name = "attacker_sgroup",
		displayName = "Attacker SGroup",
		description = "SGroup of the attacker",
		requirement =
		{
				operator = "ANY",
				{"action", "AttackMove"},
			{
				operator = "ALL",
				{"action", "Attack"},
				{"attacker_type", "SGroup"},
			},
		},
		category = "Attacker",
	},
	{
		type = ST_STRING,
		name = "attacktarget_type",
		displayName = "Target Group Type",
		description = "Type of target - SGroup or EGroup",
		requirement = {"action", "Attack"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Target",
	},
	-----------------------
	--Despawn--
	{
		type = ST_STRING,
		name = "despawn_grouptype",
		displayName = "Group Type",
		description = "Type of despawn group - SGroup or EGroup",
		requirement = {"action", "DeSpawn"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "despawn_egroup",
		displayName = "EGroup",
		description = "EGroup to be despawned",
		requirement = {"despawn_grouptype", "EGroup"},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "despawn_sgroup",
		displayName = "SGroup",
		description = "SGroup to be despawned",
		requirement = {"despawn_grouptype", "SGroup"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "destroy",
		displayName = "Destroy Group?",
		description = "Destroy all squads or entities in the group. They cannot be respawned.",
		requirement = {"action", "DeSpawn"},
		default = false,
		category = "Options",
	},
	-----------------------
	--Respawn--
	{
		type = ST_STRING,
		name = "respawn_grouptype",
		displayName = "Group Type",
		description = "Type of respawn group - SGroup or EGroup",
		requirement = {"action", "ReSpawn"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "respawn_egroup",
		displayName = "EGroup",
		description = "EGroup to be respawned",
		requirement = {"respawn_grouptype", "EGroup"},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "respawn_sgroup",
		displayName = "SGroup",
		description = "SGroup to be respawned",
		requirement = {"respawn_grouptype", "SGroup"},
		category = "Options",
	},
	-----------------------
	--group kill--
	{
		type = ST_STRING,
		name = "groupkill_grouptype",
		displayName = "Group Type",
		description = "Type of group to kill - SGroup or EGroup",
		requirement = {"action", "GroupKill"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "groupkill_egroup",
		displayName = "EGroup",
		description = "EGroup to be killed",
		requirement = {"groupkill_grouptype", "EGroup"},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "groupkill_sgroup",
		displayName = "SGroup",
		description = "SGroup to be killed",
		requirement = {"groupkill_grouptype", "SGroup"},
		category = "Options",
	},
	-----------------------
	--SpawnEntities
	{
		type = ST_STRING,
		name = "spawn_entities_method",
		displayName = "EGroup Source",
		description = "Create new EGroup or use existing EGroup",
		requirement = {"action", "SpawnEntities"},
		options = {"CreateNewEGroup", "UseExistingEGroup"},
		default = "UseExistingEGroup",
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "new_egroup_name",
		displayName = "New EGroup Name",
		description = "Name of the new EGroup to be spawned",
		requirement = {"spawn_entities_method", "CreateNewEGroup"},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "existing_egroup",
		displayName = "Existing EGroup",
		description = "EGroup to be spawned",
		requirement = {"spawn_entities_method", "UseExistingEGroup"},
		category = "Options",
	},
	-----------------------
	--SetInvulnerable
	{
		type = ST_STRING,
		name = "invulnerable_grouptype",
		displayName = "Group Type",
		description = "Type of group to set invulnerability to",
		requirement = {"action", "SetInvulnerable"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Options"
	},
	{
		type = ST_SGROUP,
		name = "invulnerable_sgroup",
		displayName = "SGroup",
		description = "SGroup to set invulnerable",
		requirement = {"invulnerable_grouptype", "SGroup"},
		category = "Options"
	},
	{
		type = ST_EGROUP,
		name = "invulnerable_egroup",
		displayName = "EGroup",
		description = "EGroup to set invulnerable",
		requirement = {"invulnerable_grouptype", "EGroup"},
		category = "Options"
	},
	-----------------------
	{
		type = ST_EGROUP,
		name = "damage_received_egroup",
		displayName = "EGroup",
		description = "EGroup to set Damage Received Modifier to",
		requirement = {"action", "SetDamageReceivedModifier"},
		category = "Options",
	},
	-----------------------
	--SetOwner
	{
		type = ST_STRING,
		name = "set_owner_grouptype",
		displayName = "Group Type",
		description = "Type of group the object is",
		requirement = {"action", "SetOwner"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "set_owner_sgroup",
		displayName = "SGroup",
		description ="SGroup to set the owner of",
		requirement = {"set_owner_grouptype", "SGroup"},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "set_owner_egroup",
		displayName = "EGroup",
		description ="EGroup to set the owner of",
		requirement = {"set_owner_grouptype", "EGroup"},
		category = "Options",
	},
	-----------------------
	--LoadAtmosphere
	{
		type = ST_STRING,
		name = "atmosphere_name",
		displayName = "Atmosphere Name",
		description = "Name of the atmosphere to load",
		requirement = {"action", "LoadAtmosphere"},
		category = "Options",
	},
	-----------------------
	--Options--
	{
		type = ST_STRING,
		name = "icon_name",
		displayName = "Icon Name",
		description = "Name of the icon",
		requirement = {
			operator = "ANY",
			{"action", "AddObjHintpointTo", "UIShowInfoPanel"},
			{
				operator = "ALL",
				{"action", "UIFireEventCue"},
				{"cue_category", "General"},
			},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "sound_name",
		displayName = "Sound Name",
		description = "Name of the sound to play",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "world_arrow",
		displayName = "Use World Arrow",
		description = "Do you want a world arrow?",
		requirement = {"action", "AddObjHintpointTo"},
		default = false,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "add_blip_area",
		displayName = "Add Minimap Blip Area",
		description = "Do you want to add a circle of a given radius to the minimap blip?",
		requirement = {
			operator = "ALL",
			{"action", "AddObjHintpointTo"},
			{"ping", true}
		},
		default = false,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "blip_radius",
		displayName = "Minimap Blip Radius Override",
		description = "When this is a positive number, it will be used for the radius of the minimap blip."..
		" Otherwise the radius will be extracted from the target marker if possible.",
		requirement = {"add_blip_area", true},
		default = -1,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "add_reticule",
		displayName = "Add Ground Reticule",
		description = "Do you want to add a circular reticule (ground overlay) centred on this location?"..
		"\n\nNOTE: If this hint point is using the ObjectiveMarkerDataTemplate, the reticule will only show when the hint point is hovered.",
		requirement = {"action", "AddObjHintpointTo"},
		default = false,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "reticule_radius",
		displayName = "Ground Reticule Radius Override",
		description = "When this is a positive number, it will be used for the radius of the ground reticule."..
		" Otherwise the radius will be extracted from the target marker if possible.",
		requirement = {"add_reticule", true},
		default = -1,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "id",
		displayName = "ID",
		description = "A unique ID to reference an item in a list",
		requirement = {"action", "BookmarkTime", "ObjectiveStartTimer", "ObjectiveStopTimer", "ObjectivePauseTimer", "ObjectiveUnPauseTimer",
						"StartObjective", "CompleteObjective", "FailObjective", "SetLedger", "CreateWarningObjective",
						"ObjectiveAddHealthBar", "ObjectiveRemoveHealthBar", "ObjectiveSetCanFail", "ObjectiveSetEnableTitlecard", "StopObjective",
						"AIPushMilitaryTargetScoreMultiplier", "AIPopMilitaryTargetScoreMultiplier",
						"AIPushUnitTypeTargetScoreMultiplier", "AIPopUnitTypeTargetScoreMultiplier",
						"AIPushMilitaryTargetEGroupScore", "AIPopMilitaryTargetEGroupScore"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "use_null_objective",
		displayName = "Use Null Objective",
		description = "The null objective can be used for hintpoints that are not connected to an actual objective. An element_id (Hintpoint ID) is necessary to refer to such UI so it can be removed explicitly.",
		requirement = {"action", "AddObjHintpointTo", "RemoveObjHintpoint"},
		category = "Options",
		default = false,
	},
	{
		type = ST_STRING,
		name = "objective_id",
		displayName = "Objective ID",
		description = "A unique objective ID to reference an item in a list",
		requirement = {
			operator = "ANY",
			{"action", "ObjectiveShowTitle", "ObjectiveSetCounter", "ObjectiveIncreaseCounter", "ObjectiveStopCounter"},
			{
				operator = "ALL",
				{"action", "AddObjHintpointTo", "RemoveObjHintpoint"},
				{"use_null_objective", false},
			},
		},
		category = "Options",
	},
    {
        type = ST_STRING,
        name = "objective_type",
        description = "Type of objective to create",
        category = "General",
        default = "OT_PRIMARY",
		requirement = {"action", "CreateWarningObjective"},
        options = {"OT_PRIMARY", "OT_SECONDARY", "OT_BONUS", "OT_INFORMATION"},
    },
	{
		type = ST_STRING,
		name = "opt_title",
		displayName = "Opt Manual Title",
		description = "(Optional) Manually specify a title.",
		requirement = {"action", "ObjectiveShowTitle"},
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
		category = "Options",
	},

	{
		type = ST_STRING,
		name = "element_id",
		displayName = "Hintpoint ID",
		description = "A unique element of an unique objective id that can be referenced. ENSURE THERE IS NO DUPLICATE NAME WHEN USING THIS",
		requirement = {"action", "AddObjHintpointTo", "RemoveObjHintpoint"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "marker_name",
		displayName = "Marker Name",
		description = "The name of the marker you are referencing",
		requirement = {"action", "AISetMarkerActive"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "personality_name",
		displayName = "Personality Name",
		description = "The personality name or personality lua file you are setting",
		requirement = {"action", "AISetPersonality", "AISetLuaPersonalityFile"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "math_type_string_for_ledger",
		displayName = "Math Operation",
		description = "specifies the type of math operation",
		options = {"SET", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE"},
		default = "SET",
		requirement = {"action", "SetLedger", "SetHealth"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "number",
		displayName = "Number",
		description = "Number to use in an equation",
		requirement = 
		{
			operator = "ANY",
			{"action", "SetLedger", "ChangePartisanHubRelationPoint"},
			{
				operator = "ALL",
				{"action", "SetHealth"},
				{"math_type_string_for_ledger", "SET"},
				{"set_health_randomly", false},
			},
			{
				operator = "ALL",
				{"action", "SetHealth"},
				{"math_type_string_for_ledger", "ADD", "MULTIPLY", "DIVIDE", "SUBTRACT"},
			},
		},
		category = "Options",
		default = 0,
	},
	{
		type = ST_STRING,
		name = "narrative_influence_character_name",
		description = "Name of the narrative character (in string)",
		requirement = {"action", "SetNarrativeInfluenceValueToUse"},
		category = "Narrative",
	},
	{
		type = ST_NUMBER,
		name = "narrative_influence_value",
		description = "Value of narrative influence (in decimal number)",
		requirement = {"action", "SetNarrativeInfluenceValueToUse"},
		category = "Narrative",
	},
	{
		type = ST_STRING,
		name = "math_operation_for_narrative_influence",
		description = "Math operation type to set the influence value",
		requirement = {"action", "SetNarrativeInfluenceValueToUse"},
		options = {"SET", "ADD", "MULTIPLY"},
		default = "SET",
		category = "Narrative",
	},
	{
		type = ST_STRING,
		name = "narrative_action_name",
		displayName = "Action Name",
		description = "Searches the event director for any events with the provided title.",
		requirement = {"action", "SetNarrativeActionEnabled"},
		category = "Narrative",
	},
	{
		type = ST_BOOLEAN,
		name = "narrative_action_enabled",
		displayName = "Enabled",
		description = "Control whether the event should be enabled, or disabled in the event director.",
		requirement = {"action", "SetNarrativeActionEnabled"},
		default = true,
		category = "Narrative",
		
	},
	{
		type = ST_NUMBER,
		name = "hardpoint",
		displayName = "Hardpoint Number",
		description = "Hardpoint integer",
		requirement = {"action", "SGroupSetAutoTargetting"},
		category = "Options",
		default = 0,
	},
	{
		type = ST_STRING,
		name = "actionStringName",
		displayName = "Animator Action Name",
		description = "specifies a name of an animator action",
		requirement = {"action", "PlayAnimation"},
		
	},
	{
		type = ST_BOOLEAN,
		name = "clear_all",
		displayName = "Clear All Solo Squads?",
		description = "Do you want to disable all solo-squad AI prefabs?",
		requirement = {"action", "AIClearSoloSquads"},
		default = false,
		
	},
	--PlayAnimation
	{
		type = ST_STRING,
		name = "animation_grouptype",
		displayName = "Group Type",
		description = "Group type of the animation that is applied to",
		requirement = {"action", "PlayAnimation"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Options",
	},
	---------------
	{
		type = ST_STRING,
		name = "target_type",
		displayName = "Target Type",
		description = "Specifies what type to be targeted by the action. CONTEXT uses the dynamic context selected by the playbill",
		requirement = {"action", "FOWReveal", "FOWUnReveal"},
		options = {"SGROUP", "EGROUP", "POSITION", "PLAYER", "CONTEXT"},
		category = "Target",
		default = "SGROUP",
	},
	{
		type = ST_STRING,
		name = "ability_target_type",
		displayName = "Target Type",
		description = "Specifies what type to be targeted by the action. CONTEXT uses the dynamic context selected by the playbill",
		requirement = {"action", "UseAbility"},
		options = {"SGROUP", "EGROUP", "POSITION", "PLAYER", "SELF", "CONTEXT"},
		category = "Target",
		default = "SGROUP",
	},
	{
		type = ST_STRING,
		name = "position_type_string",
		displayName = "Target Type",
		description = "The type of target location for the action. CONTEXT uses the dynamic context selected by the playbill.",
		requirement = {
			operator = "ANY",
			{"action", "AddObjHintpointTo", "MoveUnit", "AttackMove", "UIFireMinimapBlip", "CameraFocusEvent"},
			{"cue_move_camera", true} --UIFireEventCue
		},
		options = {"SGROUP", "EGROUP", "POSITION", "CONTEXT"},
		category = "Target",
		default = "SGROUP",
	},
	{
		type = ST_STRING,
		name = "spawn_where",
		displayName = "Spawn Location Type",
		description = "The type of spawn location for this action. CONTEXT uses the dynamic context selected by the playbill.",
		requirement = {"action", "SpawnSquads"},
		options = {"POSITION", "SGROUP", "EGROUP", "CONTEXT"},
		category = "Target",
		default = "POSITION",
	},
	{
		type = ST_STRING,
		name = "spawn_entities_where",
		displayName = "Spawn Location Type",
		description = "The type of spawn location for this action. CONTEXT uses the dynamic context selected by the playbill.",
		requirement = {"action", "SpawnEntities"},
		options = {"POSITION", "CONTEXT"},
		category = "Target",
		default = "POSITION",
	},
	{
		type = ST_STRING,
		name = "spawn_entities_facing",
		displayName = "Spawn Facing Type",
		description = "How to determine which way to face the spawned entities (\"Inherit\" means to use target_spawn_dest if POSITION / context rotation if CONTEXT).",
		requirement = {"action", "SpawnEntities"},
		options = {"Inherit", "Manual", "Random", "SGroup", "EGroup"},
		category = "Target",
		default = "Inherit",
	},
	{
		type = ST_NUMBER,
		name = "spawn_entities_angle",
		displayName = "Spawn Facing Angle",
		description = "What angle to spawn the entities at, counterclockwise with North (+x) being 0 degrees",
		requirement = {"spawn_entities_facing", "Manual"},
		category = "Target",
		default = 0,
		integer = false,
	},
	{
		type = ST_BOOLEAN,
		name = "enable_random_radius_spawn",
		displayName = "Spawn Randomly Within Radius",
		description = "When enabled you can specify a range away from the chosen target within which the actual spawn location will be chosen",
		category = "Target",
		requirement = {"action", "SpawnSquads", "SpawnEntities"},
	},
	{
		type = ST_NUMBER,
		name = "random_spawn_max_range",
		displayName = "Random Spawn Max Range",
		description = "Spawn units randomly between this range from the selected target and the min range",
		requirement =
		{
			operator = "ALL",
			{"action", "SpawnEntities", "SpawnSquads"},
			{"enable_random_radius_spawn", true},
		},
		default = 10,
		category = "Target",
	},
	{
		type = ST_NUMBER,
		name = "random_spawn_min_range",
		displayName = "Random Spawn Min Range",
		description = "Spawn units randomly between this range from the selected target and the max range",
		requirement =
		{
			operator = "ALL",
			{"action", "SpawnEntities", "SpawnSquads"},
			{"enable_random_radius_spawn", true},
		},
		default = 10,
		category = "Target",
	},
	{
		type = ST_BOOLEAN,
		name = "add_concrete_offset",
		displayName = "Add Concrete Offset",
		description = "Adds a specified 2D vector to the action's position as an offset if enabled",
		requirement = {"action", "SpawnEntities", "SpawnSquads", "MoveUnit"},
		default = false,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "offset_x",
		displayName = "X-Axis Offset",
		description = "Offset to add in the X axis",
		default = 0,
		integer = false,
		category = "Offset",
		requirement = {"add_concrete_offset", true},
	},
	{
		type = ST_NUMBER,
		name = "offset_z",
		displayName = "Z-Axis Offset",
		description = "Offset to add in the Y axis",
		default = 0,
		integer = false,
		category = "Offset",
		requirement = {"add_concrete_offset", true},
	},
	{
		type = ST_STRING,
		name = "caster_type_string",
		displayName = "Caster Type",
		description = "The type caster (user) for the ability/upgrade",
		requirement = {"action", "UseAbility", "UpgradeCommand"},
		options = {"SGROUP", "EGROUP", "PLAYER"},
		category = "Options",
		default = "SGROUP",
	},
	{
		type = ST_STRING,
		name = "resource_type_string",
		displayName = "Resource Type",
		description = "The type of resource to use for the action.",
		requirement = {"action", "PlayerSetResource", "PlayerSetResourceCap"},
		options = {"RT_Fuel", "RT_Manpower", "RT_Munition", "RT_Requisition"},
		category = "Options",
		default = "RT_Manpower",
	},
	{
		type = ST_STRING,
		name = "math_type_string",
		displayName = "Math Operation",
		description = "The type of math operation to apply to the action.",
		requirement = {"action", "PlayerSetResourceCap", "PlayerSetResource","PlayerSetPopulationCap"},
		options = {"MUT_Multiplication", "MUT_Addition", "MUT_Set"},
		category = "Options",
		default = "MUT_Multiplication",
	},
	{
		type = ST_STRING,
		name = "relationship_set_type",
		displayName = "Math Operation",
		description = "The way that the partisan hub relation should be changed (SET will set the meter to that value and ADD will add to the existing value)",
		requirement = {"action", "ChangePartisanHubRelationPoint"},
		options = {"SET", "ADD"},
		category = "Options",
		default = "ADD",
	},
	{
		type = ST_BOOLEAN,
		name = "invulnerable",
		displayName = "Is Invulnerable",
		description = "True: Target is invulnerable. False: Target is vulnerable.",
		default = false,
		category = "Target",
		requirement = {"action", "SetInvulnerable"},
	},
	{
		type = ST_NUMBER,
		name = "invulnerable_threshold",
		displayName = "Invulnerable Threshold",
		description = "Use a number between 0.0 and 1.0 for more precise control on how much damage an entity can take before it takes no more.",
		default = 1.0,
		category = "Target",
		requirement = {"invulnerable", true},
	},
	{
		type = ST_BOOLEAN,
		name = "apply_to_each_entity",
		displayName = "Apply To Each Entity",
		description = "True: relation change is applied to every entity in the EGROUP. False: relation change is only applied to first entity in EGROUP.",
		default = false,
		category = "Options",
		requirement = {"action", "ChangePartisanHubRelationPoint"},
	},
	{
		type = ST_BOOLEAN,
		name = "enable",
		displayName = "Enable",
		description = "Flag to enable or disable some sort of functionality, or represent a true/false value required for something.",
		default = false,
		requirement = {"action", "SGroupSetAutoTargetting", "UIFlashAbilityButton", "ObjectiveSetCanFail", "ObjectiveSetEnableTitlecard", "AIPrefabSetCanReassign", "SetPartisanHubActivated", "AISetMarkerActive", "SetInterruptingAction","EnableEntityExtension"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "titlecard_type",
		description = "Which title card should this enable/disable",
		default = "COMPLETE",
		options= {"COMPLETE", "FAILURE"},
		category = "Options",
		requirement = {"action", "ObjectiveSetEnableTitlecard"}
	},
	{
		type = ST_TABLE,
		name = "intents",
		displayName = "Change Intents To",
		description = "List of AI Intents to enforce. Only units matching the specified intent are accepted. Empty implies all units are acceptable and will clear existing intent",
		multiplicity = "multiple",
		requirement = {"action", "AIPrefabChangeIntents"},
		itemSchema = {	
			{
				type = ST_PBG,
				name = "intent",
				blueprintType = "ai_prefab_intent",
				description = "AI Intent",					
			},	
		},
	},
	{
		type = ST_NUMBER,
		name = "damage_received_modifier",
		displayName = "Modifier Amount",
		description = "Target squad or entity's damage received modifier (NOTE: 0.5 = 50%)",
		requirement = {"action", "SetDamageReceivedModifier"},
		default = nil,
		integer = false,
		category = "Target",
	},
	
	{
		type = ST_NUMBER,
		name = "modifier",
		displayName = "Modifier Amount",
		description = "Percentage modifier (NOTE: 0.5 = 50%)",
		requirement = {"action", "ModifyAccuracy", "ModifyScatter"},
		default = nil,
		integer = false,
		category = "Target",
	},
	
	{
		type = ST_STRING,
		name = "target",
		displayName = "Target Type",
		description = "Where to get the value for the health from.",
		requirement = {"action", "ObjectiveAddHealthBar"},
		options = {"EGROUP", "SGROUP", "LEDGER"},
		category = "Options",
		default = "SGROUP",
	},
	
	{
		type = ST_SGROUP,
		name = "sgroup",
		displayName = "SGroup",
		description = "The instigating SGroup to do things from or spawn; Can be used as a Semicolon(;) delimited list of sgroups for SpawnSquads",
		requirement =
		{
			operator = "ANY",
			{"target", "SGROUP"}, 
			{"action", "Retreat", "MoveUnit", "PlaySpeech", "MaxSpeed", "SpawnSquads", "ClearSGroup", "SGroupSetAutoTargetting", "FillSGroupFromMarker", "FillSGroupWithPlayerSquads",
			"SGroupWarpTo", "ModifyAccuracy", "AILockSquads", "AIUnlockSquads", "ModifyScatter", "MetamapLinkAttachmentToCompany", "Construct", "AIClearSoloSquads", "SetCrushMode"},
			{
				operator = "ALL",
				{"target_type", "SGROUP"},
				{"action", "FOWReveal", "FOWUnReveal"}
			},	
			{
				operator = "ALL",
				{"action", "PlayAnimation"},
				{"animation_grouptype", "SGroup"}
			},
			{
				operator = "ALL",
				{"caster_type_string", "SGROUP"},
				{"action", "UseAbility", "UpgradeCommand"},
			},
		},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "egroup",
		displayName = "EGroup",
		description = "The instigating EGroup to do things from or spawn; Can be used as a Semicolon(;) delimited list of egroups for SpawnEntities",
		requirement = 
		{
				operator = "ANY",
				{"target", "EGROUP"},
				{"action", "ChangePartisanHubRelationPoint", "SetPartisanHubActivated"},
			{
				operator = "ALL",
				{"target_type", "EGROUP"},
				{"action", "FOWReveal", "FOWUnReveal"}
			},
			{
				operator = "ALL",
				{"action", "PlayAnimation"},
				{"animation_grouptype", "EGroup"}
			},
			{
				operator = "ALL",
				{"caster_type_string", "EGROUP"},
				{"action", "UseAbility", "UpgradeCommand"},
			},
			{
				operator = "ALL",
				{"action", "Construct"},
				{"construct_type", "Existing Construction"}
			},
			{
				"action", "AIPushMilitaryTargetEGroupScore", "AIPopMilitaryTargetEGroupScore"
			},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "ledger_id",
		displayName = "Ledger ID",
		description = "The ID of the ledger to get value from.",
		requirement =
		{
			operator = "ALL",
			{"target", "LEDGER"},
			{"action", "ObjectiveAddHealthBar"}
		},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "current_count",
		displayName = "Current Count",
		description = "Current count of the counter in the objective",
		requirement = {"action", "ObjectiveSetCounter"},
		default = 0,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "max_count",
		displayName = "Max Count",
		description = "Maximum count of the counter in the objective. -1 will make the counter as basic counter without a max count",
		requirement = {"action", "ObjectiveSetCounter"},
		default = -1,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "increment_amount",
		displayName = "Increment Amount",
		description = "Amount to increment the count of the counter in the objective",
		requirement = {"action", "ObjectiveIncreaseCounter"},
		default = 1,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "max_health",
		displayName = "Healthbar Max",
		description = "The max health value of the healthbar.",
		requirement =
		{
			operator = "ALL",
			{"target", "LEDGER"},
			{"action", "ObjectiveAddHealthBar"}
		},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "use_local_player",
		displayName = "Use Local Player",
		description = "Use local player instead of specifying a player",
		default = true,
		requirement = 
		{
			operator = "ANY",
			{"action", "ResourcesDisable", "ResourcesEnable"},
			{
				operator = "ALL",
				{"action", "SetStateModelProperty"},
				{"statemodel_target", "Player"},
			},
		},
		category = "Options",
	},
	{
		type = ST_PLAYER,
		name = "player",
		displayName = "Player",
		description = "The Player to do things from",
		requirement =
		{
			operator = "ANY",
			{"action", "SpawnSquads", "SpawnEntities", "PlayerSetResource", "PlayerSetResourceCap", "PlayerSetPopulationCap", "PlayerInstantUpgrade", "MultiplayerComplete",
			"SetAbilityAvailability", "PlayerAddAbility", "AILockSquads", "AIUnlockSquads", "AIPushMilitaryTargetScoreMultiplier", "AIPopMilitaryTargetScoreMultiplier", "AIPushUnitTypeTargetScoreMultiplier", "AIPopUnitTypeTargetScoreMultiplier", "AISetPlayerStrategy", "AISetMarkerActive", "AISetPersonality", "AISetLuaPersonalityFile",
			"AIPushMilitaryTargetEGroupScore", "AIPopMilitaryTargetEGroupScore", "FillSGroupFromMarker", "FillSGroupWithPlayerSquads", "AIClearSoloSquads"},
			{"use_local_player", false},
			{
				operator = "ALL",
				{"action", "UseAbility", "UpgradeCommand"},
				{"caster_type_string", "PLAYER"},
			},
			{
				operator = "ALL",
				{"action", "SetStateModelProperty"},
				{"statemodel_target", "Player"},
				{"use_local_player", false},
			},
		},
		category = "Options",
		allowWorld = true,
		default = "Player1",
	},
	{
		type = ST_TABLE,
		name = "squad_types_to_filter_in",
		description = "Squad type filters to populate the sgroup with",
		multiplicity = "multiple",
		requirement = {"action", "FillSGroupWithPlayerSquads"},
		itemSchema = {
			{
				type = ST_STRING,
				name = "squad_type",
				displayName = "Squad Type",
				description = "Type of squad to filter in",
				category = "Options",
				options = {"infantry", "elite_infantry", "light_vehicle", "vehicle", "light_armor", "heavy_armor"},
				default = "infantry",
			},
		},
	},
	{
		type = ST_TABLE,
		name = "squad_bps_to_filter_in",
		description = "Squad BP filters to populate the sgroup with",
		multiplicity = "multiple",
		requirement = {"action", "FillSGroupWithPlayerSquads"},
		itemSchema = {
			{
				type = ST_PBG,
				name = "sbp",
				displayName = "SBP",
				blueprintType  = "squad",
				description = "squad bp to be filtered in",
				category = "Options",
			},
		},
	},
	{
		type = ST_MARKER,
		name = "position",
		displayName = "Position",
		description = "Position to be used for an action.",
		colour = "orange",
		hasDirection = true,
		hasRange = true,
		requirement = 
		{
			operator = "ANY",
			{
				operator = "ALL", 
				{"target_type", "POSITION"},
				{"action", "FOWReveal", "FOWUnReveal"}
			},
			{
				operator = "ALL",
				{"action", "Garrison"},
				{"hold_type", "MARKER"},
				{"use_random_position", false},
			},
			{
				operator = "ALL",
				{"action", "Construct"},
				{"construct_type", "Marker"},
				{"use_random_position", false},
			},
			{
				operator = "ALL",
				{"action", "UIFireEventCue"},
				{"cue_category", "Call To Action"},
			},
			{
				operator = "ALL",
				{"action", "UIFireMinimapBlip", "UIFireEventCue"},
				{"position_type_string", "POSITION"},
			},
			{
				operator = "ALL",
				{"action", "KillNeutralEntitiesNearPosition"},
				{"position_option", "Marker"},
			},
			{
				operator = "ALL",
				{"action", "SquadPath"},
				{"use_marker_to_delete_sgroup", true},
			},
		},
	},
	{
		type = ST_BOOLEAN,
		name = "use_random_position",
		displayName = "Use Random Position?",
		description = "If selected, allows you to specify a list of weighted positions to be randomly chosen from",
		default = false,
		category = "Target",
		requirement = 
		{
			operator = "ANY",
			{
				operator = "ALL",
				{"action", "Garrison"},
				{"hold_type", "MARKER"},
			},
			{
				operator = "ALL",
				{"action", "Construct"},
				{"construct_type", "Marker"},
			},
			{
				operator = "ALL",
				{"action", "SpawnSquads"},
				{"spawn_where", "POSITION"},
			},
			{
				operator = "ALL",
				{"action", "SpawnEntities"},
				{"spawn_entities_where", "POSITION"},
			},
			{
				operator = "ALL",
				{"action", "UseAbility"},
				{"ability_target_type", "POSITION"},
			},
		},
	},
	{
		type = ST_TABLE,
		name = "random_positions",
		requirement = {
			operator = "ANY",
			{
				operator = "ALL",
				{"action", "Garrison"},
				{"hold_type", "MARKER"},
				{"use_random_position", true},
			},
			{
				operator = "ALL",
				{"action", "Construct"},
				{"construct_type", "Marker"},
				{"use_random_position", true},
			},
			{
				operator = "ALL",
				{"action", "UseAbility"},
				{"ability_target_type", "POSITION"},
				{"use_random_position", true},
			},
		},
		multiplicity = "multiple",
		itemSchema = {
			{
				type = ST_NUMBER,
				name = "weight",
				displayName = "Weight",
				default = 1,
				description = "If all the weights are 1, everything is equally likely. Otherwise a given item has a weight/(total weight) chance of being selected. WEIGHTS MUST BE WHOLE NUMBERS",
				category = "Options",
			},
			{
				type = ST_MARKER,
				name = "position",
			},
		},
	},
	{
		type = ST_BOOLEAN,
		name = "wait_to_complete",
		displayName = "Wait for Completion",
		description = "Should this action wait until the playbill being run has completed?",
		requirement = {"action", "LaunchPrefabOrPlaybill"},
		default = false,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "duration",
		displayName = "Duration",
		description = "Duration of an action in seconds",
		requirement = {"action", "FOWReveal", "FadeToBlack", "FadeFromBlack", "LoadAtmosphere", "EventDelay", "CameraSplinePan", "CameraFocusEvent", "FadeSequence", "GameTextTitleFade", "UIFireEventCue", "UIFireMinimapBlip", "UIShowInfoPanel"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "seconds",
		displayName = "Duration",
		description = "Duration of an action in seconds",
		requirement = {"action", "Wait"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "max_seconds",
		displayName = "Max Duration (Optional)",
		description = "Use this value to randomly select a duration between the two values (inclusive).",
		default = 0,
		requirement = {"action", "Wait"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "title_fade_in_time",
		displayName = "Fade-In Duration",
		description = "Duration of a fade in, in seconds",
		requirement = {"action", "GameTextTitleFade"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "title_fade_out_time",
		displayName = "Fade-Out Duration",
		description = "Duration of a fade out, in seconds",
		requirement = {"action", "GameTextTitleFade"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "wait_for_action",
		displayName = "Wait For Action To Finish",
		description = "Whether we should wait for an action to finish before moving on to the next action.",
		requirement = {"action", "EventDelay"},
		category = "Options",
		default = false,
	},
	{
		type = ST_SGROUP,
		name = "target_sgroup",
		displayName = "Target SGroup",
		description = "The SGroup to target",
		requirement = 
		{
			operator = "ANY",
			{"action", "Garrison", "MetamapLinkAttachmentToCompany", "SquadPath"},
			{
				operator = "ALL",
				{"action", "AddObjHintpointTo", "AttackMove","MoveUnit", "UIFireMinimapBlip", "UIFireEventCue", "CameraFocusEvent"},
				{"position_type_string", "SGROUP"},
			},
			{
				operator = "ALL",
				{"action", "Attack"},
				{"attacktarget_type", "SGroup"}
			},
			{
				operator = "ALL",
				{"action", "UseAbility"},
				{"ability_target_type", "SGROUP"},
			},
			{
				operator = "ALL",
				{"action", "SpawnEntities"},
				{"spawn_entities_facing", "SGroup"},
			},
			{
				operator = "ALL",
				{
					operator = "ANY",
					{"action", "SetHealth"},
					{"action", "SetSelectable"},
					{"action", "SetTargetingType"},
					{"action", "EnableEntityExtension"},
				},
				{"grouptype", "SGROUP"},
			},
		},
		category = "Target",
	},
	{
		type = ST_EGROUP,
		name = "target_egroup",
		displayName = "Target EGroup",
		description = "The EGroup to target",
		requirement = 
		{
				operator = "ANY",
				{"action", "InstantCaptureStrategicPoint","ConvertToFieldSupport"},
			{
				operator = "ALL",
				{"action", "AddObjHintpointTo", "AttackMove", "MoveUnit", "UIFireMinimapBlip", "UIFireEventCue", "CameraFocusEvent"},
				{"position_type_string", "EGROUP"},
			},
			{
				operator = "ALL",
				{"action", "Attack"},
				{"attacktarget_type", "EGroup"},
			},
			{
				operator = "ALL",
				{"action", "UseAbility"},
				{"ability_target_type", "EGROUP"},
			},
			{
				operator = "ALL",
				{"action", "SpawnEntities"},
				{"spawn_entities_facing", "EGroup"},
			},
			{
				operator = "ALL",
				{
					operator = "ANY",
					{"action", "SetHealth"},
					{"action", "SetSelectable"},
					{"action", "SetTargetingType"},
					{"action", "EnableEntityExtension"},
				},
				{"grouptype", "EGROUP"},
			},
		},
		category = "Target",
	},
	{
		type = ST_BOOLEAN,
		name = "selectable",
		displayName = "Selectable",
		description = "If enabled, set target selectable. Otherwise, set target unselectable",
		default = true,
		requirement = {"action", "SetSelectable"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "targeting_type",
		displayName = "Targeting Type",
		description = "Type of Targeting to Allow",
		options = {"Automatic", "Manual", "None"},
		default = "Automatic",
		requirement = {"action", "SetTargetingType"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "garrison",
		displayName = "Garrison?",
		default = true,
		requirement = {"action", "Garrison"},
		category = "Hold",
		description = "If enabled, then garrison. Otherwise ungarrison!",
	},
	{
		type = ST_STRING,
		name = "hold_type",
		displayName = "Hold Type",
		description = "Type of group for the hold",
		options = {"SGROUP", "EGROUP", "MARKER"},
		requirement = {
			operator = "ALL", 
			{"action", "Garrison"},
			{"garrison", true},
		},
		category = "Hold",
		default = "EGROUP",
	},
	{
		type = ST_BOOLEAN,
		name = "split_garrison",
		displayName = "Split Garrison",
		description = "Split the garrison for multiple squads if multiple holds are found with the specified marker",
		default = false,
		requirement = {"hold_type", "MARKER"},
		category = "Hold",
	},
	{
		type = ST_STRING,
		name = "garrison_priority",
		displayName = "Garrison Priority",
		options = {"Highest Health",},
		default = "Highest Health",
		description = "Priority for garrison when marker is used to search for garrisonables",
		requirement = {"hold_type", "MARKER"},
		category = "Hold",
	},
	{
		type = ST_SGROUP,
		name = "hold_sgroup",
		displayName = "Location SGroup",
		description = "The SGroup to use for hold",
		requirement = 
		{
			operator = "ANY",
			{
				operator = "ALL",
				{"action", "SpawnSquads"},
				{"spawn_where", "SGROUP"},
			},
			{
				operator = "ALL",
				{"action", "Garrison"},
				{"hold_type", "SGROUP"},
			},
		},
		category = "Hold",
	},
	{
		type = ST_EGROUP,
		name = "hold_egroup",
		displayName = "Location EGroup",
		description = "The EGroup to use for hold",
		requirement =
		{
			operator = "ANY",
			{
				operator = "ALL",
				{"action", "SpawnSquads"},
				{"spawn_where", "EGROUP"},
			},
			{
				operator = "ALL",
				{"action", "Garrison"},
				{"hold_type", "EGROUP"},
			},
		},
		category = "Hold",
	},
	{
		type = ST_BOOLEAN,
		name = "opt_overload",
		displayName = "Overload",
		description = "Should the hold squad/entity ignore maximum slot check?",
		requirement = 
		{
			operator = "ALL",
			{"action", "Garrison"},
			{"garrison", true},
			{
				operator = "NOT",
				{"hold_type", "MARKER"},
			},
		},
		default = false,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "opt_queued",
		displayName = "Queued",
		description = "Should the hold command be queued?",
		requirement = {"action", "Garrison"},
		default = false,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "opt_instant",
		displayName = "Instant",
		description = "Should the command be instant?",
		requirement = 
		{
			operator = "ANY",
			{
				operator = "ALL", 
				{"action", "Garrison"},
				{"garrison", true},
			},
			{
				operator = "ALL",
				{"action", "UpgradeCommand"},
				{"command_type", "ADD"},
			},
		},
		default = false,
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "sgroupA",
		displayName = "SGroup A",
		description = "The RECEIVING group (squads are added to this one).",
		requirement = {"action", "AddSGroupToGroup"},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "sgroupB",
		displayName = "SGroup B",
		description = "The SOURCE group (these squads are added to the other group)",
		requirement = {"action", "AddSGroupToGroup"},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "egroupA",
		displayName = "EGroup A",
		description = "The first egroup in an A,B action.",
		requirement = {"action", "AddEGroupToGroup"},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "egroupB",
		displayName = "EGroup B",
		description = "The target egroup in an A,B action.",
		requirement = {"action", "AddEGroupToGroup"},
		category = "Options",
	},
	{
		type = ST_PLAYER,
		name = "playerA",
		displayName = "Player A",
		description = "Player A in a function that uses 2 players",
		requirement = {"action", "WorldEnableSharedLineOfSight"},
		category = "Target",
		allowWorld = false,	
		default = "Player1",
	},
	{
		type = ST_PLAYER,
		name = "playerB",
		displayName = "Player B",
		description = "Player B in a function that uses 2 players",
		requirement = {"action", "WorldEnableSharedLineOfSight"},
		category = "Target",
		allowWorld = false,	
		default = "Player2",
	},
	{
		type = ST_PLAYER,
		name = "target_player",
		displayName = "Target Player",
		description = "The Player to target",
		requirement = 
		{
			operator = "ANY",
			{"action", "InstantCaptureStrategicPoint", "Garrison", "ConvertToFieldSupport"},
			{
				operator = "ALL",
				{"action", "SetOwner"},
				{"set_neutral", false},
			},
			{
				operator = "ALL",
				{"action", "UseAbility"},
				{"ability_target_type", "PLAYER"},
			},
		},
		category = "Target",
		allowWorld = false,
		default = "Player1",
	},
	{
		type = ST_BOOLEAN,
		name = "set_neutral",
		displayName = "Set World Owned?",
		description = "Set the egroup or sgroup to be neutral / world-owned.",
		requirement = {"action", "SetOwner"},
		category = "Target",
		default = false,
	},
	{
		type = ST_TABLE,
		name = "spline",
		displayName = "Spline",
		description = "List of markers to use as an ordered list of locations.",
		multiplicity = "multiple",
		requirement = {"action", "CameraSplinePan"},
		itemSchema = {
			{
				type = ST_MARKER,
				name = "marker",
				displayName = "Spline Point",
				description = "A location in the spline",
				hasRange = false,
				hasDirection = true,
			},
		},
	},
	{
		type = ST_BOOLEAN,
		name = "keepQueue",
		displayName = "Keep Queue",
		description = "Whether to keep or jump the marker queue for camera movements",
		requirement = {"action", "CameraSplinePan"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "controlRotation",
		displayName = "Control Rotation",
		description = "Allows the system to control rotation?",
		requirement = {"action", "CameraSplinePan"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "use_context_as_destination",
		displayName = "Pan Towards Context",
		description = "Whether or not to use the dynamically selected context from the playbill as the last point in the pan. Requires the playbill has a context location!",
		requirement = {"action", "CameraSplinePan"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "use_current_camera_position",
		displayName = "Use Current Camera Position",
		description = "Whether to use the current camera position as the start position of the spline.",
		requirement = {"action", "CameraSplinePan"},
		category = "Options",
		default = false,
	},
	{
		type = ST_MARKER,
		name = "start_position",
		displayName = "Spawn Position",
		description = "A location or position to spawn or start at",
		requirement = 
		{
			operator = "ANY",
			{"action", "SpawnEntities", "SpawnMarkerFX"},
			{
				operator = "ALL",
				{"action", "SpawnSquads"},
				{"spawn_where", "POSITION"},
				{"use_random_position", false},
			},
			{
				operator = "ALL",
				{"action", "SpawnEntities"},
				{"spawn_entities_where", "POSITION"},
				{"use_random_position", false},
			},
		},
		hasRange = false,
		hasDirection = true,
		category = "Target",
	},
	{
		type = ST_MARKER,
		name = "dest_position",
		displayName = "Destination Position",
		description = "The location to move something to, or do something at",
		requirement =
		{
			operator = "ANY",
			{"action", "Retreat", "SpawnEntities", "SGroupWarpTo"},
			{
				operator = "ALL",
				{"action", "SpawnEntities"},
				{"use_random_position", false},
			},
			{
				operator = "ALL",
				{"action", "SpawnSquads"},
				{"spawn_where", "POSITION"},
				{"use_random_position", false},
			},
			{
				operator = "ALL",
				{"action", "AddObjHintpointTo", "MoveUnit", "CameraFocusEvent"},
				{"position_type_string", "POSITION"},
			},
			{
				operator = "ALL",
				{"action", "UseAbility"},
				{"ability_target_type", "POSITION"},
				{"use_random_position", false},
			},
		},
		hasRange = true,
		hasDirection = true,
		category = "Target",
	},
	{
		type = ST_TABLE,
		name = "random_position_pairs",
		multiplicity = "multiple",
		requirement = {
			operator = "ANY",
			{
				operator = "ALL",
				{"action", "SpawnSquads"},
				{"spawn_where", "POSITION"},
				{"use_random_position", true},
			},
			{
				operator = "ALL",
				{"action", "SpawnEntities"},
				{"use_random_position", true},
			},
		},
		itemSchema = {
			{
				type = ST_NUMBER,
				name = "weight",
				displayName = "Weight",
				description = "If all the weights are 1, everything is equally likely. Otherwise a given item has a weight/(total weight) chance of being selected. WEIGHTS MUST BE WHOLE NUMBERS",
				default = 1,
				category = "Options",
			},
			{
				type = ST_MARKER,
				name = "start_position",
				hasRange = false,
				hasDirection = true,
			},
			{
				type = ST_MARKER,
				name = "dest_position",
				hasRange = true,
				hasDirection = true,
			},
		},
	},
	{
		type = ST_NUMBER,
		name = "random_movement_max_radius",
		displayName = "Random Movement Max Radius",
		description = "Specify the upper bound of the randomly chosen offset from the target position",
		requirement = {"enable_random_move", true},
	},
	{
		type = ST_NUMBER,
		name = "random_movement_min_radius",
		displayName = "Random Movement Min Radius",
		description = "Specify the lower bound of the randomly chosen offset from the target position",
		requirement = {"enable_random_move", true},
	},
	{
		type = ST_BOOLEAN,
		name = "enable_random_move",
		displayName = "Enable Random Radius",
		description = "If enabled then the action will move to a random point within the random movement radius",
		requirement = {"action", "MoveUnit"},
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_destination_standable",
		displayName = "Ignore Destination Standable",
		description = "If enabled, squads/units will try to move closer to the destination even if it is occupied",
		requirement = {"action", "MoveUnit"},
	},
	{
		type = ST_MARKER,
		name = "face_position",
		displayName = "Facing Position",
		description = "The location to face something at",
		requirement = {"action", "AddObjHintpointTo"},
		hasRange = true,
		hasDirection = true,
		category = "Target",
	},
	{
		type = ST_STRING,
		name = "ui_template",
		displayName = "UI Callout Style",
		description = "How the callout should look.",
		options = {"PrimaryObjectiveDataTemplate", "SecondaryObjectiveDataTemplate", "BonusObjectiveDataTemplate", "ThreatGroupDataTemplate", "TutorialDataTemplate", "ObjectiveMarkerDataTemplate", "Debug"},
		default = "PrimaryObjectiveDataTemplate",
		requirement = {"action", "AddObjHintpointTo"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "action_type",
		displayName = "Action Type",
		description = "The DCA action to spawn with the hint point.",
		options = HPAT_NAMES,
		default = "None",
		requirement = {"action", "AddObjHintpointTo"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "number_to_spawn",
		displayName = "Number of Locations",
		description = "How many locations to pick to spawn units at",
		requirement = {"action", "SpawnRandomTarget"},
		default = 1,
	},
	{
		type = ST_NUMBER,
		name = "chance",
		displayName = "Chance",
		description = "The integer chance to spawn any units at all",
		requirement = {"action", "SpawnRandomTarget"},
		default = 100,
	},
	{
		type = ST_TABLE,
		name = "target_locations",
		displayName = "Target Locations",
		description = "Locations for targets to spawn",
		multiplicity = "multiple",
		requirement = {"action", "SpawnRandomTarget"},
		itemSchema = {
			{
				type = ST_STRING,
				name = "target_type",
				displayName = "Target Type",
				description = "How are we deciding what object to use for a target",
				options = {"ebp", "sbp"},
				default = "sbp",
				category = "Target",
			},
			{
				type = ST_PBG,
				name = "target_ebp",
				displayName = "EBP",
				blueprintType  = "entity",
				description = "Target entity to be spawned",
				category = "Target",
				requirement = {"target_type", "ebp"},
				show = true,
				showAlways = true,
				lockedTo = "location",
			},
			{
				type = ST_PBG,
				name = "target_sbp",
				displayName = "SBP",
				blueprintType  = "squad",
				description = "Target squad to be spawned",
				category = "Target",
				requirement = {"target_type", "sbp"},
				show = true,
				showAlways = true,
				lockedTo = "location",
			},
			{
				type = ST_EGROUP,
				name = "target_egroup",
				displayName = "Target EGroup",
				description = "EGroup for the target",
				category = "Target",
				requirement = {"target_type", "ebp"},
			},
			{
				type = ST_SGROUP,
				name = "target_sgroup",
				displayName = "Target SGroup",
				description = "SGroup for the target",
				category = "Target",
				requirement = {"target_type", "sbp"},
			},
			{
				type = ST_MARKER,
				name = "location",
				displayName = "Spawn Location",
				description = "Location for objective.",
				colour = "orange",
				hasDirection = true,
			},
			{
				type = ST_PLAYER,
				name = "target_owner",
				displayName = "Player Owner",
				description = "Set the player owner of the target",
				category = "Target",
				allowWorld = true,
				default = "Player2",
			},
		},
	},
	{
		type = ST_TABLE,
		name = "squad_types_to_exclude",
		displayName = "Squad Types to Exclude",
		description = "Squad types to ignore when choosing a target.",
		multiplicity = "multiple",
		requirement = {"action", "UseAbility"},
		itemSchema = {
			{
				type = ST_PBG,
				name = "target_sbp",
				displayName = "SBP",
				blueprintType  = "squad",
				description = "Type of squad to exclude",
				category = "Options",
			},
		},
	},
	{
		type = ST_TABLE,
		name = "squad_types_to_include",
		displayName = "Squad Types to Include",
		description = "Squad types to search for and include in the sgroup.",
		multiplicity = "multiple",
		requirement = {"action", "FillSGroupFromMarker"},
		itemSchema = {
			{
				type = ST_PBG,
				name = "target_sbp",
				displayName = "SBP",
				blueprintType  = "squad",
				description = "Type of squad to include",
				category = "Options",
			},
		},
	},
	{
		type = ST_STRING,
		name = "healthbar_weight",
		displayName = "Weigh Equally?",
		description = "No will simply sum the health of everything, Entity will sum Entity health percentage, Squad will sum Squad health percentage",
		default = "No",
		options = {"No", "Entity", "Squad"},
		requirement = {"action", "ObjectiveAddHealthBar"},
	},
	{
		type = ST_TABLE,
		name = "groups_to_track",
		displayName = "Groups to Track",
		description = "EGroups and/or SGroups to track.",
		multiplicity = "multiple",
		requirement = {"action", "ObjectiveAddHealthBar"},
		itemSchema = {
			{
				type = ST_STRING,
				name = "target_type",
				displayName = "Target Type",
				description = "Is the target squad group or entity group?",
				options = {"EGroup", "SGroup"},
				default = "SGroup",
				category = "Target",
			},
			{
				type = ST_EGROUP,
				name = "target_egroup",
				displayName = "Target EGroup",
				description = "EGroup for the target",
				category = "Target",
				requirement = {"target_type", "EGroup"},
			},
			{
				type = ST_SGROUP,
				name = "target_sgroup",
				displayName = "Target SGroup",
				description = "SGroup for the target",
				category = "Target",
				requirement = {"target_type", "SGroup"},
			},
		},
	},
	{
		type = ST_MARKER,
		name = "attack_position",
		displayName = "Attack Position",
		description = "Where to attack. May take into account radius.",
		requirement = 
		{
			operator = "ALL",
			{"action", "AttackMove"},
			{"position_type_string", "POSITION"},
		},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "radius",
		displayName = "Cover Search Radius",
		description = "Radius to search for cover (e.g. around a marker)",
		requirement = {"action", "AttackMove"},
		category = "Target",
	},
	{
		type = ST_BOOLEAN,
		name = "delete_near_marker",
		displayName = "Delete Near Marker",
		description = "Delete squads when within the dest_position marker proximity OR within acceptable_retreat_proximity for retreats (tuning in attributes)",
		requirement = {"action", "AttackMove", "MoveUnit", "Retreat"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "snap_to_ground",
		displayName = "Snap to Ground",
		description = "Snap entities to terrain when spawned",
		requirement = {"action", "SpawnEntities"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "skipForceConstruct",
		displayName = "Require Construction",
		description = "Allows you to skip the step that normally spawns buildings fully constructed, so you can spawn buildings that self-construct.",
		requirement = {"action", "SpawnEntities"},
		category = "Options",
		default = false,
	},
	{
		type = ST_STRING,
		name = "construct_type",
		displayName = "Construct Type",
		description = "If you choose Marker, it will continue an existing if it's there, otherwise it will start a new one. Existing Construction is for existing constructions only.",
		options = {"Existing Construction", "Marker"},
		requirement = {"action", "Construct"},
		category = "Target",
		default = "Marker",
	},
	{
		type = ST_BOOLEAN,
		name = "skip_cost",
		displayName = "Skip Cost",
		description = "skip the cost for something",
		requirement = {"action", "UseAbility"},
		category = "Options",
		default = false,
	},
	{
		type = 	ST_STRING,
		name = "target_selection",
		displayName = "Target Selection",
		description = "Target the center of a group, a random squad/entity, or the nearest squad/entity. ",
		requirement = 
		{
			operator = "ALL",
			{"action", "UseAbility"},
			{"ability_target_type", "EGROUP", "SGROUP"},
		},
		options = {"CENTER","RANDOM", "NEAREST"},
		category = "Options",
		default = "CENTER",
	},
	{
		type = 	ST_BOOLEAN,
		name = "ignore_ability_cooldown",
		displayName = "Ignore Ability Cooldown",
		description = "Reduce cooldown to 0.",
		requirement = {"action", "UseAbility"},
		category = "Options",
		default = false,
	},
	{
		type = 	ST_BOOLEAN,
		name = "ignore_fow",
		displayName = "Ignore FOW",
		description = "Allow ability to be targeted outside of the fog of war.",
		requirement = {"action", "UseAbility"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "queued",
		displayName = "Use Queue",
		description = "queued?",	
		requirement = {"action", "UseAbility", "Attack", "Construct", "SquadPath"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "stop",
		displayName = "Stop Ability",
		description = "Instead of using the ability, stop / toggle off an active ability",	
		requirement = 
		{
			operator = "ALL",
			{"action", "UseAbility"},
			{"ability_target_type", "SELF"},
		},
		category = "Options",
		default = false,
	},
	{
		type = 	ST_BOOLEAN,
		name = "has_direction",
		displayName = "Has Direction?",
		description = "Should the ability have a direction?",
		requirement = {"action", "UseAbility"},
		category = "Options",
		default = false,
	},
	{
		type = 	ST_NUMBER,
		name = "safe_radius",
		displayName = "Safe Radius",
		description = "The radius around the target player's start position where squads cannot be targeted.",
		requirement =
		{
			operator = "ALL",
			{"action", "UseAbility"},
			{"caster_type_string", "PLAYER"},
			{"ability_target_type", "PLAYER"},
		},
		category = "Options",
		default = -1,
	},
	{
		type = 	ST_MARKER,
		name = "direction",
		requirement = {"has_direction", true},
	},
	{
		type = ST_BOOLEAN,
		name = "stationary",
		displayName = "Remain Stationary",
		description = "Is stationary?",
		requirement = {"action","Attack"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "check_FOW",
		displayName = "Check FOW",
		description = "Check FOW",
		requirement = {"action","Attack"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "attack_move",
		displayName = "Use Attack Move",
		description = "flag to attack move or not",
		requirement = {"action", "SpawnSquads", "SquadPath"},
		default = false,
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "abilityPBG",
		displayName = "Ability PBG",
		blueprintType  = "ability",
		description = "ability to be used or added",
		category = "Options",
		requirement = {"action", "UseAbility", "SetAbilityAvailability", "PlayerAddAbility", "UIFlashAbilityButton"},
	},
	{
		type = ST_STRING,
		name = "item_availability",
		displayName = "Ability Availability",
		description = "item availability",
		category = "Options",
		options = {"ITEM_UNLOCKED", "ITEM_LOCKED", "ITEM_REMOVED", "ITEM_DEFAULT"},
		default = "ITEM_UNLOCKED",
		requirement = {"action", "SetAbilityAvailability"},
	},
	{
		type = ST_PBG,
		name = "upgradePBG",
		displayName = "Upgrade PBG",
		blueprintType  = "upgrade",
		description = "upgrade blueprint",
		category = "Options",
		requirement = {"action", "SpawnSquads", "SpawnEntities", "PlayerInstantUpgrade"},	
	},
	{
		type = ST_STRING,
		name = "command_type",
		displayName = "Command Type",
		description = "Type of command to send",
		options = {"ADD", "REMOVE"},
		default = "ADD",
		requirement = {"action", "UpgradeCommand"},
		category = "Options",
	},
	{
		type = ST_TABLE,
		name = "upgrades",
		displayName = "Upgrades",
		description = "Upgrades to add",
		multiplicity = "multiple",
		itemSchema = {
			{
				type = ST_PBG,
				name = "upgrade_bp",
				displayName = "Upgrade BP",
				description = "Upgrade to add",
				blueprintType = "upgrade",
				category = "Options",
			},
		},
		requirement = {"action", "UpgradeCommand"},
	},
	{
		type = ST_BOOLEAN,
		name = "use_squad_type",
		displayName = "Use squad type",
		description = "Use squad type to spawn based on the player's company instead of specifying a PBG",
		default = false,
		requirement = {"action", "SpawnSquads"},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "squadPBG",
		displayName = "Squad PBG",
		blueprintType  = "squad",
		description = "squad blueprint to spawn",
		category = "Options",
		requirement = {"use_squad_type", false},
	},
	{
		type = ST_STRING,
		name = "squad_type",
		displayName = "Squad Type",
		description = "squad type to spawn",
		options = {"basic_infantry", "builder", "elite_infantry", "light_vehicle", "light_tank", "medium_tank", "suppression", "mortar", "anti_tank", "sniper", "transport", "default"},
		default = "basic_infantry",
		requirement = {"use_squad_type", true},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "entityPBG",
		displayName = "Entity PBG",
		blueprintType  = "entity",
		description = "entity blueprint to spawn/construct",
		category = "Options",
		requirement = {"action", "SpawnEntities", "Construct"},
	},
	
	
	{
		type = ST_NUMBER,
		name = "count",
		displayName = "opt Count",
		description = "How many iterations to do something or how many of something",
		requirement =
		{
			operator = "ANY",
			{"action", "Loop", "PlayerSetResource"},
			{
				operator = "ALL",
				{"action", "UpgradeCommand"},
				{"command_type", "ADD"},
			},
		},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "offset",
		displayName = "opt Icon Offset",
		description = "The offset of something",
		requirement = {"action", "AddObjHintpointTo"},
		category = "Options",
	},
	
	{
		type = ST_NUMBER,
		name = "loadout",
		displayName = "opt Entities In Squad",
		description = "How many squad entities",
		requirement = {"action", "SpawnSquads"},
		category = "Options",
		default = 0,
	},
	{
		type = ST_NUMBER,
		name = "numsquads",
		displayName = "Number of Squads",
		description = "How many squad entities",
		requirement = {"action", "SpawnSquads"},
		category = "Options",
		default = 1,
	},
	{
		type = ST_NUMBER,
		name = "numentities",
		displayName = "Number of Entities",
		description = "How many entities",
		requirement = {"action", "SpawnEntities"},
		category = "Options",
		default = 1,
	},
	{
		type = ST_NUMBER,
		name = "stage",
		displayName = "Stage",
		description = "What stage in the playbill to loop to.  Default (hardcoded in function) if no number answered is 1",							
		requirement = {"action", "Loop"},
		category = "Options",
		default = 1,
	},
	{
		type = ST_NUMBER,
		name = "interaction_stage",
		displayName = "Interaction Stage",
		description = "What stage to set interaction stage to",
		requirement = {"action", "SetInteractionStage"},
		category = "Options",
		default = 1,
	},
	{
		type = ST_NUMBER,
		name = "timerID",
		displayName = "Timer ID",
		description = "Integer name of the timer ID",
		requirement = {"action", "StartTimer"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "healthbar_index",
		displayName = "Healthbar ID",
		description = "Index/ID for a healthbar",
		requirement = {"action", "ObjectiveAddHealthBar", "ObjectiveRemoveHealthBar"},
		category = "Options",
	},
	
	{
		type = ST_NUMBER,
		name = "period",
		displayName = "Duration",
		description = "duration in seconds",
		requirement = {"action", "StartTimer"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "display",
		displayName = "opt Use Display",
		description = "display flag for something on screen",
		requirement = {"action", "StartTimer"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "ping",
		displayName = "opt Use Ping",
		description = "Use minimap ping",
		requirement = {"action", "AddObjHintpointTo"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "flashTime",
		displayName = "opt Flash At Time",
		description = "when to flash something in seconds left out of a timer",
		requirement = {"action", "StartTimer"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "scale_factor",
		displayName = "Scale Factor",
		description = "scale factor",
		requirement = {"action", "PlayerSetResourceCap", "MaxSpeed"},
		category = "Options",
		default = 1,
	},
	{
		type = ST_STRING,
		name = "stinger",
		displayName = "Stinger Name",
		description = "specifies a filename for a stinger",
		requirement = {"action", "PlayMusicStinger"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "music_state",
		displayName = "Music State",
		description = "Name of the WWise music state to call.",
		requirement = {"action", "SetMusic"},
		options = {"NONE","mus_set_state_ambient", "mus_combat_intensity_state_comb"},
		default = "NONE",
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "music_combat_state",
		displayName = "Music Combat State",
		description = "Name of the WWise music combat state to call.",
		requirement = {"action", "SetMusic"},
		options = {"NONE", "mus_battle_set_finale", "mus_battle_set_win","mus_battle_set_level_01","mus_battle_set_level_02","mus_battle_set_level_03","mus_battle_set_previctory","mus_battle_set_intro"},
		default = "NONE",
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "custom_music_event",
		displayName = "Custom Music Event",
		description = "Name of the custom WWise event to call.",
		requirement = {"action", "SetMusic"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "music_intensity",
		displayName = "Lock Music Intensity",
		description = "Intensity state from WWise.",
		requirement = 
				{
			operator = "ALL",
			{"action", "SetMusic"},
			{"unlock_intensity", false},
		},
		options = {"NONE", "COMBAT", "EXPLORE"},
		default = "NONE",
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "unlock_intensity",
		displayName = "Unlock Music Intensity?",
		description = "Unlock the previously locked music intensity.",
		requirement = {"action", "SetMusic"},
		default = false,
		category = "Options",		
	},
	{
		type = ST_STRING,
		name = "audioCtrlEvent",
		displayName = "opt AudioCtrlEvent Name",
		description = "specifies a filename for an audioCtrlEvent",
		requirement = {"action", "PlaySpeech"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "eventfile",
		displayName = "FX Eventfile",
		description = "specifies a filename for a FX eventfile",
		requirement = {"action", "SpawnMarkerFX"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "wait_for_intel_completion",
		displayName = "Wait For Intel Completion",
		description = "Should the action pause further actions in the list until the intel is complete?",
		default = false,
		requirement = {"action", "StartIntel", "CameraFocusEvent"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "intel_type",
		description = "Which type of intel to play as a SCAR event",
		options = {"NarrativeEvent", "NarrativeLine", "DynamicNarrative"},
		requirement = {"action", "StartIntel"},
		category = "Narrative",
		default = "NarrativeEvent",
	},
	{
		type = ST_STRING,
		name = "defending_squad_selection_type",
		description = "Should the defending squad point to an existing one on the board or should it be a new instance of a blueprint",
		requirement = {"action", "LaunchCustomMission"},
		options = {"UseExistingSquad", "SpawnNewSquad"},
		category = "Options",
		default = "UseExistingSquad",
	},
	{
		type = ST_PBG,
		name = "defending_squad_pbg",
		displayName = "Defending Squad PBG",
		blueprintType = "squad",
		description = "Defending squad to be instanced for use in the custom mission",
		requirement =
		{
			operator = "ALL",
			{"action", "LaunchCustomMission"},
			{"defending_squad_selection_type", "SpawnNewSquad"},
		},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "spawned_defending_squad_group",
		displayName = "Spawned Defending Squad SGROUP to use",
		description = "SGROUP to assign the new Defending Squad",
		requirement =
		{
			operator = "ALL",
			{"action", "LaunchCustomMission"},
			{"defending_squad_selection_type", "SpawnNewSquad"},
		},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "existing_defending_squad_group",
		displayName = "Defending Squad SGROUP",
		description = "SGROUP of the existing defending squad to use in the custom mission",
		requirement =
		{
			operator = "ALL",
			{"action", "LaunchCustomMission"},
			{"defending_squad_selection_type", "UseExistingSquad"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "attacking_squad_selection_type",
		description = "Should the attacking squad point to an existing one on the board or should it be a new instance of a blueprint",
		requirement = {"action", "LaunchCustomMission"},
		options = {"UseExistingSquad", "SpawnNewSquad"},
		category = "Options",
		default = "UseExistingSquad",
	},
	{
		type = ST_PBG,
		name = "attacking_squad_pbg",
		displayName = "Attacking Squad PBG",
		blueprintType = "squad",
		description = "Defending squad to be instanced for use in the custom mission",
		requirement =
		{
			operator = "ALL",
			{"action", "LaunchCustomMission"},
			{"attacking_squad_selection_type", "SpawnNewSquad"},
		},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "spawned_attacking_squad_group",
		displayName = "Spawned Attacking Squad SGROUP to use",
		description = "SGROUP to assign the new Attacking Squad",
		requirement =
		{
			operator = "ALL",
			{"action", "LaunchCustomMission"},
			{"attacking_squad_selection_type", "SpawnNewSquad"},
		},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "existing_attacking_squad_group",
		displayName = "Attacking Squad SGROUP",
		description = "SGROUP of the existing defending squad to use in the custom mission",
		requirement =
		{
			operator = "ALL",
			{"action", "LaunchCustomMission"},
			{"attacking_squad_selection_type", "UseExistingSquad"},
		},
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "custom_mission_map_pool",
		blueprintType = "map_pool",
		displayName = "Mission Map Pool",
		description = "PBG holding the map pool for the custom mission to trigger",
		requirement = {"action", "LaunchCustomMission"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "start_node",
		displayName = "Start Node",
		description = "Name of the first Articy node to play",
		options = g_dynamic_narrative_node_names,
		requirement = {
			operator = "ANY",
			{"intel_type", "DynamicNarrative"},
			{"action", "CameraFocusEvent"}
		},
		category = "Narrative",
		default = "<none>"
	},
	
	-- Soldier Stories
	--
	-- SoldierStoriesSetNextSkirmishStory
	{
		type = ST_STRING,
		name = "skirmish_story_name",
		displayName = "Skirmish Story",
		description = "Name of the Skirmish Story to display during the next skirmish mission",
		options = g_skirmish_story_names,
		requirement = {"action", "SoldierStoriesSetNextSkirmishStory"},
		category = "Soldier Stories",
		default = "<none>"
	},

	
	-- SoldierStoriesSetNextMissionStory
	{
		type = ST_STRING,
		name = "mission_story_name",
		displayName = "Mission Story",
		description = "Name of the Soldier Story to display after the next mission",
		options = g_skirmish_story_names,
		requirement = {"action", "SoldierStoriesSetNextMissionStory"},
		category = "Soldier Stories",
		default = "<none>"
	},	
	-- End Soldier Stories

	--
	-- Narrative
	--
	
	-- Set Variable
	-- Variable set parameter
	{
		type = ST_STRING,
		name = "narrative_variableset",
		displayName = "Variableset",
		description = "Name of the variable set to change",
		options = g_narrative_variable_sets,
		requirement = {"action", "SetNarrativeVariable"},
		category = "Variables",
		default = "state_game"
	},
	
	-- End Narrative	
	
	{
		type = ST_STRING,
		name = "title_type",
		displayName = "Title Source Type",
		description = "Which title to display. NOTE: This does NOT control whether the objective says failed or completed etc., it simply controls which title string is used.",
		options = {"Start", "Complete", "Fail", "Expire", "Update", "Default"},
		requirement = {"action", "ObjectiveShowTitle"},
		category = "Options",
		default = "Default",
	},
	{
		type = ST_STRING,
		name = "narrative_event",
		description = "The narrative event object to play",
		requirement = 
		{
			operator = "ANY",
			{"intel_type", "NarrativeEvent"},
			{"action", "PlayCaptureCamera"},
		},

		editor = 
		{
			name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
			properties = 
			{
				type= "NarrativeEvent"
			}
		},
		category = "Narrative",
	},
	{
		type = ST_STRING,
		name = "narrative_line",
		requirement = {"intel_type", "NarrativeLine"},
		description = "The narrative line to play",
		editor = 
		{
			name = "Essence.Editor.Bridge.Editors.ReflectObjectEditor",
			properties = 
			{
				type= "NarrativeLine"
			}
		},
		category = "Narrative",
	},
	{
		type = ST_STRING,
		name = "actor_name",
		displayName = "Actor Name",
		description = "specifies name of an ActorTable",
		requirement = {"action", "PlaySpeech"},
		category = "Options",
		
	},
	{
		type = ST_NUMBER,
		name = "locID",
		displayName = "Loc ID",
		description = "An integer locID",
		requirement = {"action", "PlaySpeech", "GameTextTitleFade"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "display_actor",
		displayName = "Use Portrait",
		description = "whether to use an actor portrait or not",
		requirement = {"action", "PlaySpeech"},
		category = "Options",
		default = true,
	},
	{
		type = ST_NUMBER,
		name = "initialTime",
		displayName = "Timer Duration",
		description = "How long is the objective timer",
		requirement = {"action", "ObjectiveStartTimer", "CreateWarningObjective"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "countType",
		displayName = "Count Type",
		description = "Count up or down",
		options = {"COUNT_DOWN", "COUNT_UP"},
		requirement = {"action", "ObjectiveStartTimer"},
		default = "COUNT_DOWN",
		category = "Options",
		
	},
	{
		type = ST_NUMBER,
		name = "flashThreshold",
		displayName = "opt Flash Time",
		description = "When should this objective start flashing",
		requirement = {"action", "ObjectiveStartTimer", "CreateWarningObjective"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "useTimerBar",
		displayName = "opt Use Timer Bar",
		description = "Whether to display the timer as a bar",
		requirement = {"action", "ObjectiveStartTimer"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "text",
		displayName = "Display Text",
		description = "Text to display. Leave blank for for AddObjHintpoint to create just a minimap blip and no world hintpoint",
		requirement = 
		{
				operator = "ANY",
				{"action", "AddObjHintpointTo", "GameTextTitleFade"},
			{
				operator = "ALL",
				{"action", "ObjectiveStartTimer"},
				{"useTimerBar", true},
			},
		},
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "silent",
		displayName = "opt Silent",
		description = "Whether the objective popups should use a UI popup or if it should just appear silently.",
		requirement = {"action", "StartObjective","CompleteObjective", "FailObjective"},
		default = false,
		category = "Options",
	},

	{
		type = ST_STRING,
		name = "title",
		displayName = "Title",
		description = "Objective title text",
		requirement = {"action", "CreateWarningObjective", "ObjectiveAddHealthBar"},
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "description",
		displayName = "opt Description",
		description = "Objective description text",
		requirement = {"action", "CreateWarningObjective"},
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "start_intel_event",
		description = "OPTIONAL: Event to call when the objective starts",
		requirement = {"action", "CreateWarningObjective"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "complete_intel_event",
		description = "OPTIONAL: Event to call when the objective completes",
		displayName = "opt Fail Intel",
		requirement = {"action", "CreateWarningObjective"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "fail_intel_event",
		description = "OPTIONAL:  Event to call when the objective fails",
		requirement = {"action", "CreateWarningObjective"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "parent_id",
		displayName = "opt Parent ID",
		description = "OPTIONAL: ID for the parent objective if this should be a sub-objective. Leave blank for it to show up independently.",
		requirement = {"action", "CreateWarningObjective"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "countCondition",
		displayName = "opt Count Type",
		description = "OPTIONAL: Use a timer",
		options = {"TIMER", "NONE"},
		default = "NONE",
		requirement = {"action", "CreateWarningObjective"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "vulnerable",
		displayName = "opt Vulnerable",
		description = "Should retreating troops take extra damage",
		requirement = {"action", "Retreat"},
		category = "Options",
		default = false,
	},
	{
		type = ST_BOOLEAN,
		name = "allow_non_interactive_stages",
		displayName = "opt Allow Non Interactive Zones",
		description = "Do you want to allow non-interactive stages for retreating",
		requirement = {"action", "Retreat"},
		category = "Options",
		default = true,
	},
	{
		type = ST_STRING,
		name = "ai_military_target_scoring_criteria",
		displayName = "AI Military Target Scoring Criteria",
		options = {"front_line", "DefendStructure", "AttackStructure", "EnemyClump"},
		description = "push an ai military target score mulitplier for the given score value",
		requirement = {"action", "AIPushMilitaryTargetScoreMultiplier", "AIPopMilitaryTargetScoreMultiplier"},
		category = "Options",
		default = "front_line",
	},
	{
		type = ST_NUMBER,
		name = "multiplier",
		displayName = "Multiplier",
		description = "numeric multiplier",
		requirement = {"action", "AIPushMilitaryTargetScoreMultiplier", "AIPushUnitTypeTargetScoreMultiplier"},
		default = nil,
		integer = false,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "unit_type",
		displayName = "Unit Type",
		description = "unit type. These are added to entities/squads on type_ext and squad_type_ext",
		requirement = {"action", "AIPushUnitTypeTargetScoreMultiplier", "AIPopUnitTypeTargetScoreMultiplier"},
		default = nil,
		category = "Options",
	},
	{
		type = 	ST_STRING,
		name = "strategy",
		displayName = "Strategy",
		description = "Name of an AI player strategy defined in a strategy file",
		requirement = {"action", "AISetPlayerStrategy"}
	},
	{
		type = ST_STRING,
		name = "scenref_playbill_key",
		description = "Set the key of a playbill/missionobjective/introtype",
		requirement = {"action", "StartPrimaryObjectiveOrPlaybill"},
		default = "",
	},
	{
		type = ST_BOOLEAN,
		name = "spawnNearDest",
		displayName = "Spawn Hidden in FOW",
		description = "Spawn the squad at a hidden location near Dest or Start Position",
		requirement = {
			operator = "ALL",
			{"action", "SpawnSquads"},
			{"spawn_where", "POSITION"},
		},
		default = false,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "spawnDistance",
		displayName = "Distance to Destination",
		description = "Should the squad spawn closest or farthest from Dest Position",
		requirement = 		
		{
			operator = "ALL",
			{"action", "SpawnSquads"},
			{"spawnNearDest", true},
		},
		options = {"Closest", "Farthest"},
		default = "Closest",
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "spawnLocked",
		displayName = "Spawn AI Locked",
		description = "Spawn the squad with AI Lock enabled, to prevent AI control.",
		requirement = {"action", "SpawnSquads"},
		default = false,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "soloSquad",
		displayName = "Solo Squad",
		description = "Creates a small AI prefab specifically for this squad at its spawn position. Use this only when necessary!",
		requirement = 		
		{
			operator = "ALL",
			{"action", "SpawnSquads"},
			{"spawnLocked", false},
		},
		default = false,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "goToDest",
		displayName = "Setup at Destination",
		description = "If true, AI prefab will center on dest_position instead of start_position.",
		requirement = 		
		{
			operator = "ALL",
			{"action", "SpawnSquads"},
			{"soloSquad", true},
		},
		default = false,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "spawnRank",
		displayName = "Veterancy Rank",
		description = "What veterancy rank the squad should spawn at.",
		requirement = {"action", "SpawnSquads"},
		default = 0,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "pop_cap_required",
		displayName = "Player Population Required",
		description = "Spawn this squad only if the human player has at least X population. Useful for spawning extra enemies when the player's army is large.",
		requirement = {"action", "SpawnSquads"},
		default = 0,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "pop_cap_delta",
		displayName = "Population Delta",
		description = "The value used to add, multiply, or set a player's population cap.",
		requirement = {"action", "PlayerSetPopulationCap"},
		default = 0,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "comparison",
		displayName = "Comparison",
		description = "How to compare the numbers",
		options = {"IS_EQUAL", "IS_LESS_THAN", "IS_GREATER_THAN", "IS_LESS_THAN_OR_EQUAL", "IS_GREATER_THAN_OR_EQUAL", "IS_NOT_EQUAL"},
		default = "IS_GREATER_THAN_OR_EQUAL",
		requirement = {"action", "SpawnSquads"},
		category = "Difficulty",
	},
	{
		type = ST_STRING,
		name = "difficulty",
		displayName = "Difficulty Required",
		description = "The SP difficulty setting required to perform the action.",
		options = {"0 - Easy", "1 - Normal", "2 - Hard", "3 - Expert"},
		requirement = {"action", "SpawnSquads"},
		category = "Difficulty",
		default = "0 - Easy",
	},
	{
		type = ST_BOOLEAN,
		name = "snap_to_standable_node",
		displayName = "Snap to Standable Node",
		description = "If true, newly spawned squads will be moved to the nearest standable node.",
		requirement = {"action", "SpawnSquads"},
		category = "Options",
		default = true,
	},
	{
		type = ST_TABLE,
		name = "capture_camera_splines",
		description = "Splines to use for PlayCaptureCamera",
		requirement = {"action", "PlayCaptureCamera"},
		multiplicity = "multiple",
		itemSchema = {
			{
				type = ST_NUMBER,
				name = "spline_index",
				displayName = "Spline Index",
				description = "Index of the spline to define the order",
				default = 0,
				category = "Options",
			},
			{
				type = ST_STRING,
				name = "spline_name",
				displayName = "Spline Name",
				description = "The name of the spline defined in the capture tool and visible in the .spline file.",
				category = "Options",
			},
		},
	},
	{
		type = ST_STRING,
		name = "spline_name",
		displayName = "Spline Name",
		description = "(DEPRECATED: Use splines table to add splines) The name of the spline defined in the capture tool and visible in the .spline file.",
		requirement = {"action", "PlayCaptureCamera"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "spline2_name",
		displayName = "Spline 2 Name (Optional)",
		description = "(DEPRECATED: Use splines table to add splines) The name of a second spline to cut to.",
		requirement = {"action", "PlayCaptureCamera"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "path_name",
		displayName = "Path Name",
		description = "Name of the path for the waypoint",
		requirement = {"action", "SquadPath"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "path_from_closest_waypoint",
		displayName = "From Closest",
		description = "Start at the closest waypoint",
		requirement = {"action", "SquadPath"},
		default = true,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "path_loop_type",
		displayName = "Loop Type",
		description = "What to do when reaching end of path",
		requirement = {"action", "SquadPath"},
		options = {"NONE", "NORMAL", "TOGGLE_DIRECTION"},
		default = "NONE",
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "path_pause_time",
		displayName = "Pause Time",
		description = "How long to pause at each waypoint",
		requirement = {"action", "SquadPath"},
		default = 0.0,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "use_marker_to_delete_sgroup",
		displayName ="Use Marker",
		description = "Delete sgroup when in proximity of a marker",
		requirement = {"action", "SquadPath"},
		default = false,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "path_move_forward",
		displayName = "Move Forward",
		description = "Move forward",
		requirement = {"action", "SquadPath"},
		default = true,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "acceptable_proximity",
		displayName = "Acceptable Proximity",
		description = "Acceptable proximity to move to the next waypoint",
		requirement = {"action", "SquadPath"},
		default = 1.0,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "camType",
		displayName = "Camera Type",
		description = "Intro cameras do not fade out on start. Outro cameras do not fade in on complete and end the mission. MidMission cameras fade in and out.",
		requirement = {"action", "PlayCaptureCamera"},
		options = {"INTRO", "OUTRO", "MIDMISSION"},
		default = "INTRO",
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "quickEnd",
		displayName = "Fast Intro Ending",
		description = "Enable this when blending back to gameplay camera after spline. Skips fade out and back in.",
		requirement =
		{
			operator = "ALL",
			{"action", "PlayCaptureCamera"},
			{
				operator = "NOT",
				{"camType", "OUTRO"},
			},
		},
		default = false,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "preSpeechDelay",
		displayName = "Delay Before Speech",
		description = "Number of seconds before narrative event starts.",
		requirement = {"action", "PlayCaptureCamera"},
		default = 2,
		category = "Narrative",
	},
	{
		type = ST_NUMBER,
		name = "cutOffset",
		displayName = "Cut Offset",
		description = "In seconds. Cut to spline2 (if used) after [spline1 duration + cut offset].",
		requirement = {"action", "PlayCaptureCamera"},
		default = 1,
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "do_transition_to_end_position",
		displayName = "Do Transition to end_position",
		description = "Transitions the camera splines to the specified end_position so manual transition of capture camera to game camera can be avoided",
		requirement = {"camType", "INTRO", "MIDMISSION"},
		default = false, -- This could be defaulted to true when the workflow has been updated with design to always have transitioning to game camera
		category = "Transition to End Options",
	},
	{
		type = ST_NUMBER,
		name = "transition_to_end_duration",
		displayName = "Transition to End Duration",
		description = "Time to transition from the captured camera back to gameplay camera, focusing on end_position",
		requirement = {"do_transition_to_end_position", true},
		default = 2,
		category = "Transition to End Options",
	},
	{
		type = ST_MARKER,
		name = "end_position",
		displayName = "End Position",
		description = "Where to focus the game camera after the spline is complete.",
		requirement =
		{
			operator = "ALL",
			{"action", "PlayCaptureCamera"},
			{
				operator = "NOT",
				{"camType", "OUTRO"},
			},
		},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "enable_gameplay_speech",
		displayName = "Enable Gameplay Speech",
		description = "Enable the gameplay speech of squads during the capture camera action",
		requirement = {"action", "PlayCaptureCamera"},
		default = false,
		category = "Options",
	},
	{
		type = ST_TABLE,
		name = "munition_targets",
		description = "Locations to detonate munition",
		requirement = {"action", "SpawnLiveMunition"},
		multiplicity = "multiple",
		itemSchema = {
			{
				type = ST_STRING,
				name = "target_type",
				displayName = "Target Type",
				description = "Specifies what type to be targeted by the action.",
				options = {"SGROUP", "EGROUP", "POSITION"},
				default = "POSITION",
				category = "Target",
			},
			{
				type = ST_MARKER,
				name = "position",
				description = "Where to spawn.",							
				hasDirection = true,
				requirement = {"target_type", "POSITION"},
				category = "Options",
			},
			{
				type = ST_PBG,
				name = "weapon",
				blueprintType = "weapon",
				displayName = "Weapon",
				description = "The weapon to use for bombing this position.",
				lockedTo = "position",
				category = "Options",
			},
			{
				type = ST_NUMBER,
				name = "origin_offset",
				displayName = "Origin Offset",
				description = "How far above the target should the munition spawn? In meters. ",
				lockedTo = "position",
				category = "Options",
			},
			{
				type = ST_EGROUP,
				name = "target_egroup",
				displayName = "Target EGroup",
				description = "EGroup to target. Uses the position of the egroup; this returns the center point of a multi-entity egroup.",
				category = "Target",
				requirement = {"target_type", "EGROUP"},
			},
			{
				type = ST_SGROUP,
				name = "target_sgroup",
				displayName = "Target SGroup",
				description = "SGroup to target. Uses the position of the sgroup; this returns the center point of a multi-squad sgroup.",
				category = "Target",
				requirement = {"target_type", "SGROUP"},
			},
		},
	},
	{
		type = ST_TABLE,
		name = "locations",
		description = "Locations/markers to check.",
		requirement = {"action", "FillSGroupFromMarker"},
		multiplicity = "multiple",
		itemSchema = {
			{
				type = ST_MARKER,
				name = "position",
				description = "Where to collect squads from.",							
				hasDirection = false,
				hasRange = true,
				category = "Options",
			},

		},
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_airplane",
		displayName = "opt Ignore Airplanes",
		description = "Ignores planes when filling the sgroup.",
		requirement = {"action", "FillSGroupFromMarker", "FillSGroupWithPlayerSquads"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_bp_casualty",
		displayName = "opt Ignore Casualties",
		description = "Ignores casualties when filling the sgroup.",
		requirement = {"action", "FillSGroupFromMarker", "FillSGroupWithPlayerSquads"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_auto_builder",
		displayName = "opt Ignore Auto-Builder squads",
		description = "Ignores auto-builder squads when filling the sgroup.",
		requirement = {"action", "FillSGroupFromMarker", "FillSGroupWithPlayerSquads"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_building",
		displayName = "opt Ignore Building squads",
		description = "Ignores building squads (emplacements etc) when filling the sgroup.",
		requirement = {"action", "FillSGroupFromMarker", "FillSGroupWithPlayerSquads"},
		category = "Options",
		default = true,
	},
	{
		type = ST_BOOLEAN,
		name = "ignore_type_medic_na",
		displayName = "opt Ignore Medic",
		description = "Ignores medic when filling the sgroup. (NOTE: Medics dont have a unit type yet. Anvil_FilterOutForbiddenSquadTypes will need to be updated once medic type is specified)",
		requirement = {"action", "FillSGroupFromMarker", "FillSGroupWithPlayerSquads"},
		category = "Options",
		default = true,
	},
	-----------------------
	--PlayCampaignBattleSitrep
	{
		type = ST_STRING,
		name = "sitrep_video",
		displayName = "Sitrep Attribute",
		description = "Filename (without the extension) of the battle's sitrep attribute",
		requirement = {"action", "PlayCampaignBattleSitrep"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "audio_start_event",
		displayName = "Audio - On Start Event",
		description = "Name of the WWise event to call when the sitrep starts. Leave blank for no event.",
		requirement = {"action", "PlayCampaignBattleSitrep"},
		default = "sitrep_enter",
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "audio_end_event",
		displayName = "Audio - On End Event",
		description = "Name of the WWise event to call when the sitrep ends. Leave blank for no event.",
		requirement = {"action", "PlayCampaignBattleSitrep"},
		default = "sitrep_exit",
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "play_as_event",
		displayName = "Play as Event?",
		description = "Should the sitrep be queued like an intel or HUD event? If yes, it will wait for speech and objective pop-ups to clear.",
		default = false,
		requirement = {"action", "PlayCampaignBattleSitrep"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "fade_in",
		displayName = "Fade In?",
		description = "Should the screen fade out briefly and fade back in at the start of the sitrep?",
		default = false,
		requirement = {"action", "PlayCampaignBattleSitrep"},
		category = "Options",
	},
	-----------------------
	--ApplyModifier
	{
		type = ST_STRING,
		name = "modifier_target_type",
		displayName = "Target Type",
		description = "What should the modifier be applied to?",
		options = {"Player", "EGroup", "Squads in SGroup", "Entities in SGroup"},
		default = "Player",
		requirement = {"action", "ApplyModifier"},
		category = "Options",
	},
	{
		type = ST_PLAYER,
		name = "modifier_player",
		displayName = "Player",
		description = "The player to apply the modifier to.",
		default = "Player1",
		requirement = {"modifier_target_type", "Player"},
		category = "Options",
	},
	{
		type = ST_EGROUP,
		name = "modifier_egroup",
		displayName = "EGroup",
		description = "The EGroup to apply the modifier to.",
		requirement = {"modifier_target_type", "EGroup"},
		category = "Options",
	},
	{
		type = ST_SGROUP,
		name = "modifier_sgroup",
		displayName = "SGroup",
		description = "The SGroup to apply the modifier to.",
		requirement = {"modifier_target_type", "Squads in SGroup", "Entities in SGroup"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "player_application_type",
		displayName = "Application Type",
		description = "What will the modifier actualy be used on?",
		options = {"Player", "Entity Blueprint", "Squad Blueprint", "Ability", "Upgrade", "Weapon Blueprint"},
		default = "Player",
		requirement = {"modifier_target_type", "Player"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "entity_application_type",
		displayName = "Application Type",
		description = "What will the modifier actualy be used on?",
		options = {"Entity", "Weapon", "Entity Blueprint", "Squad Blueprint", "Ability", "Upgrade"},
		default = "Entity",
		requirement = {"modifier_target_type", "EGroup", "Entities in SGroup"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "squad_application_type",
		displayName = "Application Type",
		description = "What will the modifier actualy be used on?",
		options = {"Squad", "Weapon", "Ability", "Upgrade"},
		default = "Squad",
		requirement = {"modifier_target_type", "Squads in SGroup"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "position_option",
		displayName = "Position Option",
		description = "Use Marker or Territory SectorID for position",
		options = {"Marker", "Sector ID"},
		requirement = {"action", "KillNeutralEntitiesNearPosition"},
		default = "Marker",
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "sector_id",
		displayName = "Sector ID",
		description = "Territory Sector ID to use for position",
		requirement = {
			operator = "ALL",
			{"action", "KillNeutralEntitiesNearPosition"},
			{"position_option", "Sector ID"},
		},
		default = 0,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "unit_matching_option",
		displayName = "Unit Matching Option",
		description = "Use Blueprint or unit_type for unit matching",
		options = {"Blueprint", "unit_type"},
		requirement = {"action", "KillNeutralEntitiesNearPosition"},
		default = "unit_type",
		category = "Options",
	},
	{
		type = ST_PBG,
		name = "entity_blueprint",
		blueprintType = "entity",
		displayName = "Entity Blueprint",
		description = "Entity blueprint for matching",
		requirement = {
			operator = "ALL",
			{"action", "KillNeutralEntitiesNearPosition"},
			{"unit_matching_option", "Blueprint"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "entity_unit_type",
		displayName = "Entity unit_type",
		description = "unit_type of the entity. Empty will kill any entity with wreck unit_type",
		requirement = {
			operator = "ALL",
			{"action", "KillNeutralEntitiesNearPosition"},
			{"unit_matching_option", "unit_type"},
		},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "range",
		displayName = "Range",
		description = "Radius range to use for finding entities around a point. 0 will use the radius provided in the marker.",
		requirement = {"action", "KillNeutralEntitiesNearPosition"},
		default = 0,
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "num_to_kill",
		displayName = "Num to Kill",
		description = "Number of matching entities to kill. 0 means to kill all matching entities.",
		requirement = {"action", "KillNeutralEntitiesNearPosition"},
		default = 0,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "weapon_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"accuracy_weapon_modifier", "auto_target_enable_weapon_modifier", "burst_weapon_modifier", "cooldown_weapon_modifier", "damage_weapon_modifier", "enable_weapon_modifier", "horizontal_speed_weapon_modifier", "range_weapon_modifier", "reload_weapon_modifier", "weapon_burst_length_modifier", "weapon_burst_rate_of_fire_modifier", "weapon_penetration_modifier", "weapon_scatter", "weapon_suppression_modifier"},
		default = "damage_weapon_modifier",
		requirement = {
			operator = "ANY",
			{"entity_application_type", "Weapon"},
			{"squad_application_type", "Weapon"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "player_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"max_personnel_cap_player_modifier", "max_vehicle_cap_player_modifier", "paradrop_reinforcements_modifier", "personnel_cap_player_modifier", "player_max_fuel", "player_max_manpower", "player_max_munition", "player_rate_fuel", "player_rate_manpower", "player_rate_munition", "production_speed_player_modifier", "received_experience_player_modifier", "sight_radius_player_modifier", "squad_loadout_max_modifier", "vehicle_cap_player_modifier"},
		default = "sight_radius_player_modifier",
		requirement = {"player_application_type", "Player"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "entity_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"armor_modifier", "camouflage_enable", "cost_ticks_modifier", "enable_knock_back_modifier", "enable_visible_in_fow", "entity_rate_manpower", "health_maximum_modifier", "health_regeneration_modifier", "hold_disable", "on_fire_damage_per_tick_modifier", "on_fire_decay_amount_per_tick_modifier", "on_fire_threshold_modifier", "production_speed_modifier", "received_accuracy_modifier", "received_damage_modifier", "received_penetration_modifier", "rotation_rate_modifier", "selection_name_modifier", "sight_radius_modifier", "speed_maximum_modifier", "strategic_point_capture_ticks_modifier", "target_priority_modifier", "territory_radius_max"},
		default = "armor_modifier",
		requirement = {"entity_application_type", "Entity"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "squad_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"capture_enable_squad_modifier", "capture_rate_squad_modifier", "received_accuracy_modifier", "received_suppression_squad_modifier", "squad_health_regeneration_modifier", "squad_invisible_on_mini_map_enabled", "squad_loadout_max_modifier", "squad_reinforce_cost", "squad_reinforce_time", "squad_shield_regeneration_modifier", "target_priority_squad_modifier"},
		default = "squad_health_regeneration_modifier",
		requirement = {"squad_application_type", "Squad"},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "entity_type_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"cost_ticks_modifier", "projectile_delay_time", "vehicle_repair_rate_modifier"},
		default = "cost_ticks_modifier",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Entity Blueprint"},
			{"entity_application_type", "Entity Blueprint"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "squad_type_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"squad_availability_modifier"},
		default = "squad_availability_modifier",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Squad Blueprint"},
			{"entity_application_type", "Squad Blueprint"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "ability_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"ability_cast_time_modifier", "ability_channeling_time_modifier", "ability_cost_manpower", "ability_cost_munition", "ability_delay_time_modifier", "ability_duration_time_modifier", "ability_max_range_modifier", "ability_min_range_modifier", "ability_recharge_time_modifier", "ability_target_in_fow_modifier"},
		default = "ability_cast_time_modifier",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Ability"},
			{"entity_application_type", "Ability"},
			{"squad_application_type", "Ability"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "upgrade_modifier",
		displayName = "Modifier",
		description = "Which modifier should be applied?",
		options = {"upgrade_production_speed_modifier"},
		default = "upgrade_production_speed_modifier",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Upgrade"},
			{"entity_application_type", "Upgrade"},
			{"squad_application_type", "Upgrade"},
		},
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "modifier_usage_type",
		displayName = "Usage Type",
		description = "How should this modifier be combined with the existing number(s)?",
		options = {"Addition", "Multiplication", "Multiply Add", "Enable", "Set"},
		default = "Multiplication",
		requirement = {"action", "ApplyModifier"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "modifier_enabled",
		displayName = "Enable?",
		description = "Should we enable (true) or disable (false) the modified thing?",
		default = true,
		requirement = {"modifier_usage_type", "Enable"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "modifier_value",
		displayName = "Value",
		description = "What is the value of the modifier?",
		default = true,
		requirement = {
			operator = "ALL",
			{
				operator = "NOT",
				{"modifier_usage_type", "Enable"},
			},
			{"action", "ApplyModifier"},
		},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "modifier_exclusive",
		displayName = "Exclusive?",
		description = "Should this modifier disable all other modifiers on whatever you're modifying?",
		default = false,
		requirement = {"action", "ApplyModifier"},
		category = "Options",
	},
	{
		type = ST_PBG,
		blueprintType = "entity",
		name = "modifier_ebp",
		displayName = "Blueprint",
		description = "Entity blueprint for the modifier.",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Entity Blueprint"},
			{"entity_application_type", "Entity Blueprint"},
		},
		category = "Options",
	},
	{
		type = ST_PBG,
		blueprintType = "squad",
		name = "modifier_sbp",
		displayName = "Blueprint",
		description = "Squad blueprint for the modifier.",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Squad Blueprint"},
			{"entity_application_type", "Squad Blueprint"},
		},
		category = "Options",
	},
	{
		type = ST_PBG,
		blueprintType = "ability",
		name = "modifier_ability",
		displayName = "Blueprint",
		description = "Ability blueprint for the modifier.",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Ability"},
			{"entity_application_type", "Ability"},
			{"squad_application_type", "Ability"},
		},
		category = "Options",
	},
	{
		type = ST_PBG,
		blueprintType = "upgrade",
		name = "modifier_upgrade",
		displayName = "Blueprint",
		description = "Upgrade blueprint for the modifier.",
		requirement = {
			operator = "ANY",
			{"player_application_type", "Upgrade"},
			{"entity_application_type", "Upgrade"},
			{"squad_application_type", "Upgrade"},
		},
		category = "Options",
	},
	{
		type = ST_PBG,
		blueprintType = "weapon",
		name = "modifier_weapon_pbg",
		displayName = "Blueprint",
		description = "Weapon blueprint for the modifier.",
		requirement = {"player_application_type", "Weapon Blueprint"},
		category = "Options",
	},
	{
		type = ST_NUMBER,
		name = "modifier_duration",
		displayName = "Duration",
		description = "How long should it last? 0 for unlimited duration",
		requirement = {"action", "ApplyModifier"},
		default = 0,
		category = "Options",
	},
	{
		type = ST_STRING,
		name = "modifier_id",
		displayName = "Modifier ID",
		description = "An optional UNIQUE id that allows this modifier to be referred to in both ApplyModifer and RemoveModifier.",
		requirement = {"action", "ApplyModifier", "RemoveModifier"},
		category = "Options",
	},
	{
		type = ST_BOOLEAN,
		name = "show_cue",
		displayName = "Show Event Cue?",
		description = "Show an event cue to help highlight the event.",
		default = true,
		requirement = {"action", "ConvertToFieldSupport", "PlayerSetPopulationCap"},
		category = "Options",
	},
	
	-----------------------
	--UIFireEventCue
	-----------------------
	{
		type = ST_STRING,
		name = "cue_category",
		displayName = "Event Cue Category",
		requirement = {"action", "UIFireEventCue"},
		category = "Action",
		default = "General",
		options = {
			"Influence", "Call To Action", "General",
		},
	},
	{
		type = ST_STRING,
		name = "cue_type_influence",
		displayName = "Event Cue Type",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "Influence"},
		},
		category = "Action",
		default = "influence_gained",
		options = {
			"influence_reward_unlocked", "influence_gained",
		},
	},
	{
		type = ST_STRING,
		name = "cue_type_cta",
		displayName = "Event Cue Type",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "Call To Action"},
		},
		category = "Action",
		default = "cta_alarm",
		options = {
			"cta_alarm", "cta_raised_stakes", "cta_celebration", "cta_focus_change"
		},
	},
	{
		type = ST_STRING,
		name = "cue_type",
		displayName = "Event Cue Type",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
		category = "Action",
		default = "medium_priority",
		options = {
			"low_priority", "medium_priority", "high_priority",
		},
	},
	{
		type = ST_STRING,
		name = "cue_text",
		displayName = "Cue Text",
		description = "Locstring of text to be displayed",
		requirement = {"action", "UIFireEventCue"},
		category = "Options",
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
	},
	{
		type = ST_STRING,
		name = "cue_description",
		displayName = "Cue Description",
		description = "Locstring of description for event cue",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General", "Influence"},
		},
		category = "Options",
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
	},
	{
		type = ST_NUMBER,
		integer = true,
		min = 0,
		max = 255,
		name = "cue_red",
		displayName = "Cue Color - Red",
		description = "Red component of the cue color (0-255)",
		default = 255,
		category = "Cue Style",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
	},
	{
		type = ST_NUMBER,
		integer = true,
		min = 0,
		max = 255,
		name = "cue_green",
		displayName = "Cue Color - Green",
		description = "Green component of the cue color (0-255)",
		default = 255,
		category = "Cue Style",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
	},
	{
		type = ST_NUMBER,
		integer = true,
		min = 0,
		max = 255,
		name = "cue_blue",
		displayName = "Cue Color - Blue",
		description = "Blue component of the cue color (0-255)",
		default = 255,
		category = "Cue Style",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
	},
	{
		type = ST_NUMBER,
		integer = true,
		min = 0,
		max = 255,
		name = "cue_alpha",
		displayName = "Cue Color - Alpha",
		description = "Alpha/Opacity component of the cue color (0-255)",
		default = 255,
		category = "Cue Style",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
	},
	{
		type = ST_STRING,
		name = "cue_visibility",
		displayName = "Cue Visibility Type",
		default = "Queue",
		options = {"None", "Queue", "Title"},
		description = "How should this cue be presented to the player?",
		category = "Cue Style",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
	},
	{
		type = ST_STRING,
		name = "callback_function",
		displayName = "Opt Callback Function",
		description = "Name of a callback function to call when clicked.",
		category = "Options",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General", "Call To Action"},
		},
	},
	{
		type = ST_BOOLEAN,
		name = "cue_move_camera",
		displayName = "Move Camera On Click?",
		default = false,
		description = "Should the camera move when the cue is clicked?",
		category = "Options",
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
	},
	{
		type = ST_BOOLEAN,
		name = "cue_reset_camera",
		displayName = "Reset Camera to Default?",
		default = false,
		description = "Should the camera reset to default when the cue is clicked?",
		category = "Options",
		requirement = {"cue_move_camera", true},
	},
	{
		type = ST_BOOLEAN,
		name = "show_blip",
		displayName = "Show Minimap Blip?",
		default = false,
		requirement = {
			operator = "ALL",
			{"action", "UIFireEventCue"},
			{"cue_category", "General"},
		},
		description = "Show a minimap blip at the cue's target position?",
		category = "Options",
	},
	--------------------
	--UIFireMinimapBlip
	--------------------
	{
		type = ST_STRING,
		name = "blip_type",
		displayName = "Blip Type",
		description = "What type of blip should be displayed?",
		category = "Options",
		requirement = {
			operator = "ANY",
			{"action", "UIFireMinimapBlip"},
			{
				operator = "ALL",
				{"action", "UIFireEventCue"},
				{"show_blip", true},
			},
		},
		default = "PrimaryObjectiveDataTemplate",
		options = {
			"PrimaryObjectiveDataTemplate",
			"PrimaryOrObjectiveDataTemplate",
			"SecondaryObjectiveDataTemplate",
			"BonusObjectiveDataTemplate",
			"InfoObjectiveDataTemplate",
			"ThreatGroupDataTemplate",
			"attack_here",
			"defend_here",
			}
	},
	{
		type = ST_STRING,
		name = "blip_id",
		displayName = "(Opt) Blip ID",
		description = "(Optional) An ID to specify so that the blip can be removed later by UIRemoveMinimapBlip.",
		category = "Options",
		requirement = {"action", "UIFireMinimapBlip", "UIRemoveMinimapBlip"},
	},
	--------------------
	--UIShowInfoPanel
	--------------------
	{
		type = ST_BOOLEAN,
		name = "flashing",
		displayName = "Flashing?",
		description = "Should the panel be flashing?",
		category = "Options",
		default = false,
		requirement = {"action", "UIShowInfoPanel"},
	},
	{
		type = ST_BOOLEAN,
		name = "use_custom_title",
		displayName = "Use Custom Title?",
		description = "Rather than using a static locstring, should we get the title from a SCAR function?",
		category = "Options",
		default = false,
		requirement = {"action", "UIShowInfoPanel"},
	},
	{
		type = ST_BOOLEAN,
		name = "use_custom_description",
		displayName = "Use Custom Description?",
		description = "Rather than using a static locstring, should we get the description from a SCAR function?",
		category = "Options",
		default = false,
		requirement = {"action", "UIShowInfoPanel"},
	},
	{
		type = ST_STRING,
		name = "panel_title",
		displayName = "Panel Title",
		description = "Title to display on the panel",
		category = "Options",
		requirement = {
			operator = "ALL",
			{"action", "UIShowInfoPanel"},
			{"use_custom_title", false},
		},
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
	},
	{
		type = ST_STRING,
		name = "panel_description",
		displayName = "Panel Description",
		description = "Description to display on the panel",
		category = "Options",
		requirement = {
			operator = "ALL",
			{"action", "UIShowInfoPanel"},
			{"use_custom_description", false},
		},
		editor = 
		{
			name = "Essence.Editor.ScenarioEditor.Controls.LocStringEditor, EssenceEditor"
		},
	},
	{
		type = ST_STRING,
		name = "panel_title_fn",
		displayName = "Panel Title Function",
		description = "Function which returns the title to display on the panel",
		category = "Options",
		requirement = {
			operator = "ALL",
			{"action", "UIShowInfoPanel"},
			{"use_custom_title", true},
		},
	},
	{
		type = ST_STRING,
		name = "panel_description_fn",
		displayName = "Panel Description Function",
		description = "Function which returns the description to display on the panel",
		category = "Options",
		requirement = {
			operator = "ALL",
			{"action", "UIShowInfoPanel"},
			{"use_custom_description", true},
		},
	},
	{
		type = ST_STRING,
		name = "vertical_alignment",
		displayName = "Vertical Alignment",
		description = "Should the panel be on the Top Right or Bottom Right?",
		category = "Options",
		requirement = {"action", "UIShowInfoPanel"},
		default = "Top",
		options = {"Top", "Bottom"},
	},
	{
		type = ST_NUMBER,
		name = "score",
		displayName = "Score",
		description = "Score value to push",
		requirement = {"action", "AIPushMilitaryTargetEGroupScore"},
		category = "Options",
		default = 1,
	},
	--------------------
	--SetHealth--
	--------------------
	{
		type = ST_BOOLEAN,
		name = "set_health_randomly",
		displayName = "Set Health In Random Range",
		default = true,
		category = "Options",
		requirement = {
			operator = "ALL",
			{"action", "SetHealth"},
			{"math_type_string_for_ledger", "SET"},
		},
		description = "When setting the health, specify a range ",
	},
	{
		type = ST_BOOLEAN,
		name = "use_context_as_target",
		displayName = "Use Context as Target",
		description = "Instead of using a group, set the health of the selected context. NOTE: Must be an Entity/Squad context type!",
		requirement = {"action", "SetHealth"},
		category = "Options",
		default = false,
	},
	{
		type = ST_NUMBER,
		name = "minHealth",
		displayName = "Minimum Health",
		description = "Lower bounds of randomized health, between 0 and 1.",
		requirement =
		{
			operator = "ALL",
			{"set_health_randomly", true},
			{"action", "SetHealth"}
		},
		category = "Options",
		default = 1,
	},
	{
		type = ST_NUMBER,
		name = "maxHealth",
		displayName = "Maximum Health",
		description = "Upper bounds of randomized health, between 0 and 1.",
		requirement =
		{
			operator = "ALL",
			{"set_health_randomly", true},
			{"action", "SetHealth"}
		},
		category = "Options",
		default = 1,
	},
	--------------------
	-- Add Threat Arrow --
	--------------------
	{
		type = ST_STRING,
		name = "threatarrow_target_type",
		displayName = "Target Group Type",
		description = "Type of target - SGroup or EGroup",
		requirement = {"action", "ThreatArrowAdd"},
		options = {"SGroup", "EGroup"},
		default = "SGroup",
		category = "Target",
	},
	{
		type = ST_EGROUP,
		name = "threatarrow_target_egroup",
		displayName = "Target EGroup",
		description = "EGroup of the target",
		requirement = 
		{
			operator = "ALL",
			{"action", "ThreatArrowAdd"},
			{"threatarrow_target_type", "EGroup"},
		},
		category = "Target",
	},
	{
		type = ST_SGROUP,
		name = "threatarrow_target_sgroup",
		displayName = "Target SGroup",
		description = "SGroup of the target",
		requirement =
		{
			operator = "ALL",
			{"action", "ThreatArrowAdd"},
			{"threatarrow_target_type", "SGroup"},
		},
		category = "Target",
	},
	{
		type = ST_STRING,
		name = "threatarrow_datatemplate",
		displayName = "Datatemplate",
		description = "Datatemplate to use to display the threat arrow UI",
		requirement = {"action", "ThreatArrowAdd"},
		category = "UI",
	},
	{
		type = ST_STRING,
		name = "threatarrow_icon_override",
		displayName = "Icon Override",
		description = "Icon to display on the threat arrow UI, empty to auto detect based on target",
		requirement = {"action", "ThreatArrowAdd"},
		category = "UI",
	},
	{
		type = ST_STRING,
		name = "extension_name",
		displayName = "Extension Name",
		description = "Name of the entity extension to enable or disable",
		requirement = {"action", "EnableEntityExtension"},
	},
	----------------
	-- State Model--
	----------------
	{
		type = ST_STRING,
		name = "statemodel_key",
		displayName = "State Model Key",
		description = "The Key for the State Model",
		requirement = {"action", "SetStateModelProperty"},
	},
	{
		type = ST_STRING,
		name = "statemodel_type",
		displayName = "State Model Type",
		description = "What type of Statemodel to set",
		requirement = {"action", "SetStateModelProperty"},
		options = {"Bool",},		-- TODO: Add more (Int, Float, etc)
		default = "Bool",
	},
	{
		type = ST_STRING,
		name = "statemodel_target",
		displayName = "State Model Target",
		description = "The target for this statemodel",
		requirement = {"action", "SetStateModelProperty"},
		options = {"Player",},		-- TODO: Add more (Squad, Entity, etc)
		default = "Player",
	},
	{
		type = ST_BOOLEAN,
		name = "statemodel_value_bool",
		displayName = "State Model Bool Value",
		description = "The new State Model Bool's Value",
		default = false,
		requirement = 
		{
			operator = "ALL",
			{"action", "SetStateModelProperty"},
			{"statemodel_type", "Bool"},
		}
	},
	{
		type = ST_BOOLEAN,
		name = "zero_popcap_while_locked",
		displayName = "Zero Popcap While Locked",
		description = "Apply a modifier to the squad to set its popcap to 0. Remove if the squad becomes unlocked via prefab action.",
		default = false,
		requirement = 
		{
			operator = "ANY",
			{"action", "AILockSquads"}, 
			{
				operator = "ALL",
				{"action", "SpawnSquads"},
				{"spawnLocked", true},
			},
		},
		category = "Options",
	},
	
	------------------
	--SetCrushMode--
	------------------
	
	-- see generic "sgroup" definition for type ST_SGROUP above for how this action targets

	{
		type = ST_STRING,
		name = "crush_type_modifier",
		displayName = "Crush Type",
		description = "The crush type you want to adjust to",
		requirement = {"action", "SetCrushMode"},
		category = "Options",
		options = {"Light", "Medium", "Heavy", "Off"},
		default = "Light",
	},
	
}

g_playbills_actions_base_template = Table_Concatenate(Table_Concatenate(action_type_base, g_playbills_actions_template_base), Table_Concatenate(g_narrative_variable_template, g_narrative_variable_action_template))
