import("anvil.scar")

-----------------------------------------------------------------------
-- Script framework 
-----------------------------------------------------------------------
if Misc_IsCommandLineOptionSet("protofail") then
	Core_RegisterModule("ProtoFail")
elseif Misc_IsCommandLineOptionSet("protofail2") then
	Core_RegisterModule("ProtoFail2")
end

-----------------------------------------------------------------------

local p1DamageDealt = 0
local p2DamageDealt = 0
local humanPlayer = Game_GetLocalPlayer()
local enemyTeam = Player_GetTeam(World_GetPlayerAt(2))
local warningIndex = 0
local warningComplete = false
local damageToFail = 1000
local backerColor = 1

local lossesToFail = 50
local currentLosses = 0

function ProtoFail_Start()
	damageToFail = tonumber(Misc_GetCommandLineString("protofail")) or 1000
	Rule_AddGlobalEvent(ProtoFail_OnDamageReceived, GE_DamageReceived)
	ProtoFail_CreateUI()
	ProtoFail_UpdateUI()
	UI_SetPropertyValue("DamageCounter.DamageGrid", "Visibility", "Visible")
	UI_SetPropertyValue("DamageCounterTitle.DamageGridTitle", "Visibility", "Visible")
	UI_SetPropertyValue("DamageCounter.MaxDamageText", "Text", string.format("%d", p2DamageDealt))
end


-- Global event callback for GE_DamageReceived
function ProtoFail_OnDamageReceived(context)
	if context.victim ~= nil and context.attacker ~= nil then
		if context.damage > 0 and not World_OwnsEntity(context.victim) and not World_OwnsEntity(context.attacker) then
			if Entity_IsValid(Entity_GetID(context.attacker)) and Entity_IsValid(Entity_GetID(context.victim))  then
				local victimOwner = Entity_GetPlayerOwner(context.victim)
				local attackerOwner = Entity_GetPlayerOwner(context.attacker)
				
				if Player_GetTeam(victimOwner) == enemyTeam and attackerOwner == humanPlayer then
					
					p1DamageDealt = p1DamageDealt + context.damage
					ProtoFail_UpdateUI()	
					
				elseif victimOwner == humanPlayer and Player_GetTeam(attackerOwner) == enemyTeam then
					
					p2DamageDealt = p2DamageDealt + context.damage
					ProtoFail_UpdateUI()		
					
				end

				if (p2DamageDealt - p1DamageDealt >= damageToFail) and warningIndex ~= 3 then
					ProtoFail_OnFail()
					warningIndex = 3
					Rule_RemoveMe()
				elseif (p2DamageDealt - p1DamageDealt >= damageToFail*0.7) and warningIndex ~= 2 then
					if warningComplete == false then
						Game_TextTitleFade(11192770, 1, 6, 1)
						warningComplete = true
					end
					warningIndex = 2
					UI_SetPropertyValue("ProgressBar.ProgressBar", "Fill", "Red")
					_flashTitle(true)
				elseif (p2DamageDealt - p1DamageDealt >= damageToFail*0.4) and (p2DamageDealt - p1DamageDealt < damageToFail*0.7) and warningIndex ~= 1 then
					warningIndex = 1
					UI_SetPropertyValue("ProgressBar.ProgressBar", "Fill", "Yellow")
					_flashTitle(false)
				elseif (p2DamageDealt - p1DamageDealt < damageToFail*0.4) and warningIndex ~= 0 then
					UI_SetPropertyValue("ProgressBar.ProgressBar", "Fill", "Green")
					warningIndex = 0
					_flashTitle(false)
				end
			end
		end
	end
end

function ProtoFail_CreateUI()
		local xamlBacker =
[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI" 
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,12,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">

		<Rectangle Width="200" Height="64"
			   Name ="BackerRect"
               Fill="#272727"
			   Stroke="White"
			   StrokeThickness="2"
               RadiusX="5" RadiusY="5" 
			   Opacity = "0.8"/>
				
</StackPanel>]]
	
UI_AddChild("", "XamlPresenter", "Backer", {IsHitTestVisible = false, Xaml = xamlBacker })
--UI_Remove("DamageCounterTitle")
	local xaml =
[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI"
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,44,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">
	
	<!-- Placeholder for reserving space for Tactical Pause button -->
	<Border Height="45" Visibility="{Binding GUCPosition, Converter={StaticResource EqualityCompare}, ConverterParameter={x:Static hudModel:GUCPositionEnum.TopRight}}" />
	
    <Grid x:Name="DamageGrid" Width="180">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
			<ColumnDefinition Width="48" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <TextBlock x:Name="CurrentDamageText"
				Grid.Column="0"
				Style="{StaticResource VictoryPointTextStyle}"
				Effect="{StaticResource TextDropShadowEffect}"
				Foreground="SteelBlue"
				TextAlignment="Right"
				VerticalAlignment="Center"
				Text="0" />
		<Image Source="pack://application:,,,/WPFGUI;component/icons/core_gameplay/marked_target/marked_target_indicator.png"
				Grid.Column="1"
				Height="24" />
        <TextBlock x:Name="MaxDamageText"
				Grid.Column="2"
				Style="{StaticResource VictoryPointTextStyle}"
				Effect="{StaticResource TextDropShadowEffect}"
				Foreground="OrangeRed"
				TextAlignment="Left"
				VerticalAlignment="Center"
				Text="0" />
    </Grid>
</StackPanel>]]
		
	UI_AddChild("", "XamlPresenter", "DamageCounter", {IsHitTestVisible = false, Xaml = xaml })
	
	local xaml2 =
[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI"
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,22,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">
	
    <Grid x:Name="DamageGridTitle" Width="200">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
        </Grid.ColumnDefinitions>
        <TextBlock x:Name="DamageGridTitleText"
				Grid.Column="0"
				Style="{StaticResource VictoryPointTextStyle}"
				Effect="{StaticResource TextDropShadowEffect}"
				Foreground="White"
				TextAlignment="Center"
				VerticalAlignment="Center"
				Text="ATTRITION" />
    </Grid>
</StackPanel>]]
	UI_AddChild("", "XamlPresenter", "DamageCounterTitle", {IsHitTestVisible = false, Xaml = xaml2 })
	
		local xamlBar =
[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI"
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,75,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">
		<Canvas Width="200" Height="18"> 
		
		<Rectangle Width="200" Height="18"
			   Name ="ProgressBarFrame"
			   HorizontalAlignment = "Left"
			   VerticalAlignment="Top" 
               Fill="#828282"
			   Stroke="Black"
			   StrokeThickness="5"
               RadiusX="3" RadiusY="3" 
			   Opacity = "0.4"/>

		<Rectangle Width="0" Height="8" Canvas.Left="5" Canvas.Top="5"
			   Name ="ProgressBar"
			   HorizontalAlignment = "Left"
			   VerticalAlignment="Center" 
               Fill="Green"
			   RadiusX="2" RadiusY="2"
			   Opacity = "1"/>
		</Canvas>	
</StackPanel>]]
	
	UI_AddChild("", "XamlPresenter", "ProgressBar", {IsHitTestVisible = false, Xaml = xamlBar })
end

function ProtoFail_UpdateUI()
	UI_SetPropertyValue("DamageCounter.CurrentDamageText", "Text", string.format("%d", math.floor(p1DamageDealt)))
	
	UI_SetPropertyValue("DamageCounter.MaxDamageText", "Text", string.format("%d", math.floor(p2DamageDealt)))
	local value = math.min((p2DamageDealt - p1DamageDealt) / damageToFail, 1)
	UI_SetPropertyValue("ProgressBar.ProgressBar", "Width", math.max(0,value) * 190)
	
end

function ProtoFail_OnFail()

	-- Failure UI
	local xaml =
	[[<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
		xmlns:esControls="clr-namespace:WPFGUI.Shared.Controls;assembly=EngineUI"
		xmlns:esUtility="clr-namespace:WPFGUI.Shared.Utility;assembly=EngineUI"
		SnapsToDevicePixels="True"
		Background="Black"
		Opacity="0">
	<Grid.Triggers>
		<!-- Fade in -->
        <EventTrigger RoutedEvent="FrameworkElement.Loaded">			
            <BeginStoryboard>
                <Storyboard>
					<DoubleAnimation Storyboard.TargetProperty="(Grid.Opacity)" 
							From="0" To="1" BeginTime="0:0:0" Duration="0:0:4.5" />
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
   	</Grid.Triggers>
	<StackPanel VerticalAlignment="Center" Effect="{StaticResource DropShadowNoBackgroundStyle}">
		<!-- Fade out -->
		<StackPanel.Triggers>
			<EventTrigger RoutedEvent="FrameworkElement.Loaded">				
			    <BeginStoryboard>
			        <Storyboard>
						<DoubleAnimation Storyboard.TargetProperty="(StackPanel.Opacity)" 
							From="1" To="0" BeginTime="0:0:8" Duration="0:0:2.5" />
			        </Storyboard>
			    </BeginStoryboard>
			</EventTrigger>
		</StackPanel.Triggers>
		<!-- Match result -->
		<Image Source="pack://application:,,,/WPFGUI;component/icons/core_gameplay/marked_target/marked_target_indicator.png"
				Visibility="{Binding [is_defeat], Converter={StaticResource BoolToVis}}"
				Height="48" />
		<TextBlock Text="MISSION FAILED BY ATTRITION"
				Style="{StaticResource DefaultHeaderText}"
				FontSize="48"
				HorizontalAlignment="Center"
				Margin="0,12,0,340">
			<TextBlock.Foreground>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="White" />
					<GradientStop Offset="0.2" Color="White" />
					<GradientStop Offset="1" Color="Gray" />
				</LinearGradientBrush>
			</TextBlock.Foreground>
		</TextBlock>
	</StackPanel>
</Grid>
]]
	
	UI_AddChild("", "XamlPresenter", "GameOverUI", { IsHitTestVisible = false, Xaml = xaml })	
	Rule_AddOneShot(ProtoFail_DelayedFail, 12)
end

function ProtoFail_DelayedFail()
	
	local objective = MissionOMatic_GetCurrentPrimaryObjective()
	
	ActionList_PlayActions({action = "MissionFail", id = objective,})
	
end

function _flashTitle(enable)
	local xaml =
	[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI"
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,22,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">
	
    <Grid x:Name="DamageGridTitle" Width="200">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
        </Grid.ColumnDefinitions>
		<Grid.RenderTransform>
         	<ScaleTransform x:Name="FlashScaleTransform" 
          		ScaleX="1" ScaleY="1"  />
        </Grid.RenderTransform>
		<Grid.Triggers>
			<!-- Fade in -->
	        <EventTrigger RoutedEvent="FrameworkElement.Loaded">			
	            <BeginStoryboard>
	                <Storyboard>
						<DoubleAnimation Storyboard.TargetProperty="(Grid.Opacity)" 
								From="0.3" To="1" BeginTime="0:0:0" Duration="0:0:1.5" RepeatBehavior="Forever" AutoReverse="True"/>
	                	<DoubleAnimation Storyboard.TargetName="FlashScaleTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
								From="1" To="1.1" BeginTime="0:0:0" Duration="0:0:1.5" RepeatBehavior="Forever" AutoReverse="True"/>
					</Storyboard>
	            </BeginStoryboard>
	        </EventTrigger>
	   	</Grid.Triggers>
        <TextBlock x:Name="DamageGridTitleText"
				Grid.Column="0"
				Style="{StaticResource VictoryPointTextStyle}"
				Effect="{StaticResource TextDropShadowEffect}"
				Foreground="#AD3100"
				TextAlignment="Center"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Text="ATTRITION" />
    </Grid>
</StackPanel>]]
	
	if enable then
		UI_AddChild("", "XamlPresenter", "DamageCounterTitleFlash", {IsHitTestVisible = false, Xaml = xaml })
		UI_SetPropertyValue("DamageCounterTitle.DamageGridTitle", "Visibility", "Collapsed")
	else
		UI_Remove("DamageCounterTitleFlash")
		UI_SetPropertyValue("DamageCounterTitle.DamageGridTitle", "Visibility", "Visible")
	end
end

------ ALTERNATE CONDITION: SOLDIERS LOST ------
function ProtoFail2_Start()
	lossesToFail = tonumber(Misc_GetCommandLineString("protofail2")) or 50
	Rule_AddGlobalEvent(ProtoFail2_OnEntityKilled, GE_EntityKilled)
	ProtoFail2_CreateUI()
	ProtoFail2_UpdateUI()
	UI_SetPropertyValue("DamageCounter.DamageGrid", "Visibility", "Visible")
	UI_SetPropertyValue("DamageCounterTitle.DamageGridTitle", "Visibility", "Visible")
end

function ProtoFail2_OnEntityKilled(context, data)
  	if scartype(context.victim) == ST_ENTITY and context.victimOwner == humanPlayer then
		if Entity_IsOfType(context.victim, "infantry") or Entity_IsOfType(context.victim, "vehicle") then
			local increment = 1
			if Entity_IsOfType(context.victim, "vehicle") then
				increment = 4
				if Entity_IsOfType(context.victim, "light_vehicle") then
					increment = 2
				end
			end
			currentLosses = currentLosses + increment
			ProtoFail2_UpdateUI()
		end
	end
end

function ProtoFail2_CreateUI()
		local xamlBacker =
[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI" 
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,12,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">

		<Rectangle Width="160" Height="64"
			   Name ="BackerRect"
               Fill="#272727"
			   Stroke="White"
			   StrokeThickness="2"
               RadiusX="5" RadiusY="5" 
			   Opacity = "0.8"/>
				
</StackPanel>]]
	
UI_AddChild("", "XamlPresenter", "Backer", {IsHitTestVisible = false, Xaml = xamlBacker })

	
	local xaml2 =
[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI"
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,22,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">
	
    <Grid x:Name="DamageGridTitle" Width="160">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="160" />
        </Grid.ColumnDefinitions>
        <TextBlock x:Name="DamageGridTitleText"
				Grid.Column="0"
				Style="{StaticResource VictoryPointTextStyle}"
				Effect="{StaticResource TextDropShadowEffect}"
				Foreground="White"
				TextAlignment="Center"
				VerticalAlignment="Center"
				Text="ATTRITION" />
    </Grid>
</StackPanel>]]
	UI_AddChild("", "XamlPresenter", "DamageCounterTitle", {IsHitTestVisible = false, Xaml = xaml2 })
	
		local xamlBar =
[[<StackPanel 
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:hudModel="clr-namespace:HUDModelTypes"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
		xmlns:esConverters="clr-namespace:WPFGUI.Shared.Converters;assembly=EngineUI"
		VerticalAlignment="Top" 
		HorizontalAlignment="Center" 
		Margin="0,48,0,0"
		Visibility="{Binding [is_ui_visible], Converter={StaticResource BoolToVis}}">
		<Canvas Width="150" Height="18"> 
		
		<Rectangle Width="150" Height="18"
			   Name ="ProgressBarFrame"
			   HorizontalAlignment = "Left"
			   VerticalAlignment="Top" 
               Fill="#828282"
			   Stroke="Black"
			   StrokeThickness="5"
               RadiusX="3" RadiusY="3" 
			   Opacity = "0.4"/>

		<Rectangle Width="0" Height="8" Canvas.Left="5" Canvas.Top="5"
			   Name ="ProgressBar"
			   HorizontalAlignment = "Left"
			   VerticalAlignment="Center" 
               Fill="Green"
			   RadiusX="2" RadiusY="2"
			   Opacity = "1"/>
		</Canvas>	
</StackPanel>]]
	
	UI_AddChild("", "XamlPresenter", "ProgressBar", {IsHitTestVisible = false, Xaml = xamlBar })
end

function ProtoFail2_UpdateUI()

	local value = math.min(currentLosses / lossesToFail, 1)
	UI_SetPropertyValue("ProgressBar.ProgressBar", "Width", math.max(0,value) * 140)
		if value >= 1 then
			ProtoFail_OnFail()
			Rule_RemoveMe()
		elseif value >= 0.8 and value < 1 and warningIndex ~= 2 then
			if warningComplete == false then
				Game_TextTitleFade(11192770, 1, 6, 1)
				warningComplete = true
			end
			warningIndex = 2
			UI_SetPropertyValue("ProgressBar.ProgressBar", "Fill", "Red")
			_flashTitle(true)
		elseif value >= 0.4 and value < 0.7 and warningIndex ~= 1 then
			warningIndex = 1
			UI_SetPropertyValue("ProgressBar.ProgressBar", "Fill", "Yellow")
			_flashTitle(false)
		elseif value < 0.4 and warningIndex ~= 0 then
			UI_SetPropertyValue("ProgressBar.ProgressBar", "Fill", "Green")
			warningIndex = 0
			_flashTitle(false)
		end

end