----------------------------------------------------------------------------------------------------------------
-- Entity helper functions
-- Copyright 2016 SEGA Corporation, Developed by Relic Entertainment

--? @group scardoc;Entity




--? @shortdesc Checks whether an entity is of any of the Blueprints or EntityTypes specified.
--? @extdesc Blueprint can be a single Blueprint, a single EntityType, or a table of multiple Blueprints or EntityTypes. If you want to see if an entity has ALL of a set of EntityTypes, then wrap them all in a sub-table.
--? @args EntityID entity, EBP/EntityType/Table blueprints
--? @result Boolean
function Entity_HasBlueprint(entity, blueprints)

	if scartype(blueprints) ~= ST_TABLE then
		blueprints = {blueprints}
	end
	
	local entityBP = Entity_GetBlueprint(entity)
	
	for index, item in pairs(blueprints) do 
		
		if scartype(item) == ST_PBG then								-- this item is an EBP
			
			if entityBP == item then
				return true
			end
			
		elseif scartype(item) == ST_STRING then							-- this item is an Entity Type
			
			if Entity_IsOfType(entity, item) == true then 
				return true 
			end
			
		elseif scartype(item) == ST_TABLE then							-- this item is a table of Entity Types, so we only want to return true if the entity matches ALL the Entity Types in it
			
			local result = true 
			
			for i = 1, #item do 
				if Entity_IsOfType(entity, item[i]) == false then 
					result = false 
					break
				end
			end
			
			if result == true then 
				return true
			end
			
		end
		
	end
	
	return false

end







--? @shortdesc Returns true if entity is in cover.
--? @args EntityID entityId
--? @result Boolean
function Entity_IsInCover( entityId )
	return (Entity_GetCoverType( entityId ) ~= CT_None)
end

--? @shortdesc Warps an entity immediately to a new position
--? @args EntityID entity, Position pos
--? @result Void
function Entity_WarpToPos(entity, pos)

	Entity_SetPosition(entity, pos)
	
end

--? @shortdesc Set invulnerability on the entity. Reset time is in seconds. If it it set, the invulnerability will expire after this time.
--? @args EntityID entity, Bool enable, Float reset_time
--? @result Void
function Entity_SetInvulnerable(squad, enable, reset_time)

	local cap
	if ( enable == true ) then
		cap = 1.0
	elseif (enable == false) then
		cap = 0.0
	else
		cap = enable
	end

	Entity_SetInvulnerableMinCap( squad, cap, reset_time )
end

--? @shortdesc Check if the entity is invulnerable or not
--? @args SquadID squad
--? @result Bool
function Entity_GetInvulnerable(entity)

	return ( Entity_GetInvulnerableMinCap( entity ) == 1.0 )
end

function __EntityDemolitionCallback(entity)

	-- call all callbacks matching this entity
	if __t_EntityDemolitionCallbacks ~= nil then
		for k, v in pairs(__t_EntityDemolitionCallbacks) do
			if Entity_IsValid(v.entityID) and v.entityID == Entity_GetID(entity) then
				v.func(entity)
			end
		end
	end
	
end

function Entity_ClearDemolitionCallbacks()
	__t_EntityDemolitionCallbacks = nil
end

--? @shortdesc Calls a function when an entity gets destroyed by the player clicking the "Detonate me" button next to an entity.
--? @args Entity entity, LuaFunction function
--? @result Void
function Entity_NotifyOnPlayerDemolition(entity, f)

	if __t_EntityDemolitionCallbacks == nil then
		__t_EntityDemolitionCallbacks = {}
	end
	
	table.insert(__t_EntityDemolitionCallbacks, { entityID = Entity_GetID(entity), func = f } )
end

--? @shortdesc Returns a position relative to an entity's current position and orientation. see ScarUtil.scar for explanation of 'offset' parameter.
--? @args EntityID entity, Integer offset, Real distance
--? @result Position
function Entity_GetOffsetPosition(entity, offset, distance)
	return World_GetOffsetPosition(Entity_GetPosition(entity), Entity_GetHeading(entity), offset, distance)
end

--? @shortdesc Enables or disables the BurnExt extensions for squads / entities
--? @args EGroup/entity unit, Bool enabled
--? @result Void
function Entity_SetBurnExtEnabled(unit, enabled)

	if scartype(unit) == ST_EGROUP then
		local count = EGroup_Count(unit)
		local i = 0
		for i = 1, count, 1 do
			Entity_SetBurnExtEnabled(EGroup_GetEntityAt(unit, i), enabled)
		end
	elseif scartype(unit) == ST_ENTITY then
		Entity_SetExtEnabled(unit, EXTID_Burn, enabled)
	else
		print("WARNING!: Entity_SetBurnExtEnabled unit type was invalid!")
	end

end
