----------------------------------------------------------------------------------------------------------------
-- Camera helper functions
-- Copyright 2018 SEGA Corporation, Developed by Relic Entertainment

--? @group scardoc;Camera

----------------------------------------------------------------------------------------------------------------
 
function _Camera_Init()
	-- put camera init code here...
end

Scar_AddInit(_Camera_Init)


--? @shortdesc Rotate the camera to a given angle in degrees.
--? @args Float angle
--? @result Void
function Camera_RotateTo(angle)
	Camera_SetOrbit(angle)
end

--? @shortdesc Rotate the camera relative to its current rotation in degrees.
--? @args Float angle
--? @result Void
function Camera_RotateRelative(angleRelative)
	Camera_SetOrbitRelative(angleRelative)
end

--? @shortdesc Reset the camera to its default rotation.
--? @result Void
function Camera_ResetRotation()
	Camera_ResetOrbit()
end

--? @shortdesc Queue moving the camera a certain distance from the position of the camera in a specified amount of time.
--? @extdesc The position used is the position the camera will be in after completing the movement(s) queued in front.
--? @args ScarPosition delta, Integer seconds, Bool keepQueue
--? @result Void
function Camera_PanOverTimeRelative(deltaPos, panTime, keepQueue)
	-- get the nearest position the camera can move to
	deltaPos = World_GetNearestInteractablePoint(deltaPos)
	
	local zoomLevel = Camera_GetZoomDist()
	
	if keepQueue == nil or keepQueue == false then
		Camera_StopPan()
	end
	
	Camera_StartRelativePan(deltaPos, panTime, zoomLevel)
end

--? @shortdesc Queue moving the camera to an entity/marker/pos/egroup/sgroup/squad within seconds.
--? @extdesc The camera will move from the position that was in front of it in the queue.
--? @args Variable var, Integer seconds, Bool keepQueue
--? @result Void
function Camera_PanOverTimeTo(pos, panTime, keepQueue)
	
	-- if we were passed in a marker, convert it to a pos
	if scartype(pos) ~= ST_SCARPOS then
		pos = Util_GetPosition(pos)
	end
	-- get the nearest position the camera can move to
	pos = World_GetNearestInteractablePoint(pos)
	
	local zoomLevel = Camera_GetZoomDist()
	
	if keepQueue == nil or keepQueue == false then
		Camera_StopPan()
	end
	
	Camera_StartPanTo(pos, panTime, zoomLevel)
end

local Camera_SplinePanOverTime_Internal = function(positions, panTime, keepQueue, controlRotation, splineFunc)
	if keepQueue == nil or keepQueue == false then
		Camera_StopPan()
	end
	
	for i = 1,#positions do
		local pos = positions[i]
		if scartype(pos) ~= ST_SCARPOS then
			pos = Util_GetPosition(pos)
			
		end
		pos = World_GetNearestInteractablePoint(pos)
		
		Camera_QueueSplinePanPos(pos)
	end	
	
	if (#positions > 0) then	
		splineFunc(panTime, controlRotation)		
	end
end

--? @shortdesc Queue moving the camera along a spline consisting of entity/marker/pos/egroup/sgroup/squad objects within seconds.
--? @extdesc The camera will move from the position that was in front of it in the pan queue along the positions provided. Linear interpolation between points is used
--? @args Variable var, Integer seconds, Bool keepQueue, Bool controlRotation
--? @result Void
function Camera_LinearSplinePanOverTime(positions, panTime, keepQueue, controlRotation)
	Camera_SplinePanOverTime_Internal(positions, panTime, keepQueue, controlRotation, Camera_ExecuteLinearSplinePan)
end

--? @shortdesc Queue moving the camera along a spline consisting of entity/marker/pos/egroup/sgroup/squad objects within seconds.
--? @extdesc The camera will move from the position that was in front of it in the pan queue along the positions provided. Catmull-Rom interpolation between points is used
--? @args Variable var, Integer seconds, Bool keepQueue, Bool controlRotation
--? @result Void
function Camera_CatromSplinePanOverTime(positions, panTime, keepQueue, controlRotation)
	Camera_SplinePanOverTime_Internal(positions, panTime, keepQueue, controlRotation, Camera_ExecuteCatromSplinePan)
end

--? @shortdesc Move the camera to an entity/marker/pos/egroup/sgroup/squad at a given speed
--? @args Variable var, Boolean pan, Float panRate, Boolean keepInputLocked, Boolean resetToDefault
--? @result Void
function Camera_MoveTo(pos, pan, panRate, keepLocked, resetToDefault)
	zoomLevel = 0
	-- if we were passed in a marker, convert it to a pos
	if scartype(pos) ~= ST_SCARPOS then
		pos = Util_GetPosition(pos)
	end
	-- get the nearest position the camera can move to
	pos = World_GetNearestInteractablePoint(pos)
	
	if keepLocked == nil then
		keepLocked = false
	end
	
	_MoveToPosition_KeepLocked = keepLocked
	
	if resetToDefault == true then 
		Camera_ResetToDefault()
	else
		resetToDefault = false
	end
	
	if (pan == nil) then
		pan = false
	end

	-- attempt to prevent multiple calls
	Camera_SetInputEnabled(false)
	
	if Rule_Exists(_MoveToPosition_CamLock) == false then
		Rule_Add(_MoveToPosition_CamLock)
	end

	_MoveToPosition_camLock = true
	_MoveToPosition_position = pos
	
	-- track the camera position in case we get stuck
	_MoveToPosition_lastPosition = Camera_GetCurrentTargetPos()
	_MoveToPosition_lastTime = World_GetGameTime()

	if pan == true and panRate ~= nil and panRate ~= 0 then
		-- stop panning because the pan time is calculated based on current position
		Camera_StopPan()
		
		-- pan the camera over time to a given position at a specified rate
		local curPos = Camera_GetCurrentPos()
		
		local x = pos.x - curPos.x
		local y = pos.z - curPos.z
		
		local panTime = math.sqrt(x * x + y * y) / panRate

		Camera_StartPanTo(pos, panTime, zoomLevel)
	else
		-- immediately move the camera to the given position
		Camera_FocusOnPosition(pos)
	end	
end

function _MoveToPosition_CamLock()

	if _MoveToPosition_camLock == true then
		if _MoveToPosition_position == nil or Misc_IsPosOnScreen(_MoveToPosition_position, 0.16) or ((World_GetGameTime() - _MoveToPosition_lastTime) > 0 and World_DistancePointToPoint(_MoveToPosition_lastPosition, Camera_GetCurrentTargetPos()) < 0.0125) then
			-- don't interfere with camera input during cinematic mode (it will handle re-enabling it at the right time) -- attempt to prevent multiple calls
			if Util_IsCinematicMode() == false and _MoveToPosition_KeepLocked ~= true then
				Camera_SetInputEnabled(true)
			end
			_MoveToPosition_KeepLocked = nil
			_MoveToPosition_position = nil
			_MoveToPosition_camLock = false
			Rule_RemoveMe()
		else
			_MoveToPosition_lastPosition = Camera_GetCurrentTargetPos()
			_MoveToPosition_lastTime = World_GetGameTime()
		end
	else
		Rule_RemoveMe() -- shouldn't happen
	end
end

--? @shortdesc Slightly refocus the camera to rest on an entity/squad/squad/sgroup/egroup/pos/marker if it's close by.
--? @extdesc This function can be called through a CTRL object in NISlets.
--? @args Variable var
--? @result Void
function Camera_MoveToIfClose(pos)
	
	-- if we were passed in a marker, convert it to a pos
	if scartype(pos) ~= ST_SCARPOS then
		pos = Util_GetPosition(pos)
	end
	
	-- work out how close we are to the position already
	local dist = World_DistancePointToPoint(Camera_GetTargetPos(), pos)
	
	-- shift the camera is it's within our range
	if dist > 5 and dist < 20 then
		
		Camera_FocusOnPosition(pos)
		
	end
	
end

--? @shortdesc Set the camera to follow an sgroup/squad/egroup/entity.
--? @extdesc The camera will follow them until the player takes control again.
--? @args Variable var
--? @result Void
function Camera_Follow(var)
	
	if scartype(var) == ST_SGROUP then
		if (SGroup_CountSpawned(var) >= 1) then
			Camera_FollowSquad(SGroup_GetSpawnedSquadAt(var, 1))
		end
	elseif scartype(var) == ST_EGROUP then
		if (EGroup_CountSpawned(var) >= 1) then
			Camera_FollowEntity(EGroup_GetSpawnedEntityAt(var, 1))
		end
	elseif scartype(var) == ST_SQUAD then
		Camera_FollowSquad(var)
	elseif scartype(var) == ST_ENTITY then
		Camera_FollowEntity(var)
	else
		fatal("Camera_Follow variable is not a valid EGroup/SGroup/Squad/Entity")
	end
	
end

--? @shortdesc Moves the camera through a list of positions.
--? @result Void
--? @args Table list[, Boolean pan, Float panRate, ScarFn callback]
function Camera_CyclePositions(list, pan, panRate, callback)
	
	if(scartype(list) == ST_TABLE and #list > 0) then
		__cycleData = {
			["list"] = list,
			["pan"] = pan or false,
			["panRate"] = panRate or 1.0,
			["callback"] = callback,
		}			
			
		Camera_MoveTo(list[1], pan, panRate)
		Rule_AddInterval(_CamCycle_Check, { delay =  2, interval =  1 } )
	else
		__cycleData = nil
		if(callback) then callback() end
	end
end

function _CamCycle_Check()
	local pos = __cycleData.list[1]
	if(Misc_IsPosOnScreen(Util_GetPosition(pos), 0.25)) then
		Rule_RemoveMe()
		table.remove(__cycleData.list, 1)
		Camera_CyclePositions(__cycleData.list, __cycleData.pan, __cycleData.panRate, __cycleData.callback)
	end
end





function Camera_ExecuteCaptureCameraPanAtPosition(cameraPanTable, position)
	
	local newCameraData = Clone(cameraPanTable)
	local positions = newCameraData.positions
	local offset = Util_GetPosition(position)	
	
	for index = 1, #positions, 3 do 
		positions[index] = positions[index] + offset.x
		positions[index + 1] = positions[index + 1] + offset.y
		positions[index + 2] = positions[index + 2] + offset.z
	end
	
	Camera_ExecuteCaptureCameraPan(newCameraData)
	
end

function Camera_ChangeCameraFromDeadSquad()
	Camera_DebugFollowSquadStart(true)
end

function Camera_AddSquadDeathRule()
	if Camera_IsFollowingSquad() then
		-- register event so when squad dies we switch camera to nearby squad
		local group = SGroup_CreateUnique()
		SGroup_Add(group, Camera_GetFollowingSquad())
		Rule_RemoveSGroupEvent(Camera_ChangeCameraFromDeadSquad, group)
		Rule_AddSGroupEvent(Camera_ChangeCameraFromDeadSquad, group, GE_SquadKilled)
	end
end

--? @shortdesc Follow selected or closest squad for debugging. Can cycle through squads and switch squads on death
--? @result Void
--? @args Bool killed (used for grabbing nearest squad after current follow squad is killed)
function Camera_DebugFollowSquadStart(killed)
	local next_squad = false 
	
	if Camera_IsFollowingSquad() and not killed then
		-- cycle through active squads
		next_squad = true
	end
	
	-- find a squad to follow
	if Camera_DebugFollowSquad(next_squad) then
		Rule_AddOneShot(Camera_AddSquadDeathRule,2)
	end
end
